<?xml version="1.0"?>
<root ptr="0x1af44a0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x7f2e2c092000"><page ptr="0x7f2e2c092000" next="0x7f2e2c0920e0" prev="(nil)" upper="0x1af44a0" lower="0x7f2e2c094000"><body ptr="0x7f2e2c094000" next="(nil)" prev="(nil)" upper="0x7f2e2c092000" lower="0x7f2e2c095000"><txt ptr="0x7f2e2c095000" next="0x7f2e2c095110" prev="(nil)" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c095110" next="0x7f2e2c095220" prev="0x7f2e2c095000" upper="0x7f2e2c094000" lower="(nil)">Network Analysis and Visualization<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="34" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c095220" next="0x7f2e2c095330" prev="0x7f2e2c095110" upper="0x7f2e2c094000" lower="(nil)">Identifying most prominent nodes<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="32" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c095330" next="0x7f2e2c095440" prev="0x7f2e2c095220" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c095440" next="0x7f2e2c095550" prev="0x7f2e2c095330" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c095550" next="0x7f2e2c095660" prev="0x7f2e2c095440" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c095660" next="0x7f2e2c095770" prev="0x7f2e2c095550" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c095770" next="0x7f2e2c095880" prev="0x7f2e2c095660" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c095880" next="0x7f2e2c095990" prev="0x7f2e2c095770" upper="0x7f2e2c094000" lower="(nil)">MSc student ID: 1402590<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="23" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c095990" next="0x7f2e2c095aa0" prev="0x7f2e2c095880" upper="0x7f2e2c094000" lower="(nil)">A. M'Tir<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="8" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c095aa0" next="0x7f2e2c095bb0" prev="0x7f2e2c095990" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c095bb0" next="0x7f2e2c095cc0" prev="0x7f2e2c095aa0" upper="0x7f2e2c094000" lower="(nil)">Supervisor: Dr. Shan He<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="23" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c095cc0" next="0x7f2e2c095dd0" prev="0x7f2e2c095bb0" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c095dd0" next="0x7f2e2c096008" prev="0x7f2e2c095cc0" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096008" next="0x7f2e2c096118" prev="0x7f2e2c095dd0" upper="0x7f2e2c094000" lower="(nil)"><anchored><fly ptr="0x1af8490" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1af6670"><txt ptr="0x1af6670" next="(nil)" prev="(nil)" upper="0x1af8490" lower="(nil)"/></fly></anchored><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096118" next="0x7f2e2c096228" prev="0x7f2e2c096008" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096228" next="0x7f2e2c096338" prev="0x7f2e2c096118" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096338" next="0x7f2e2c096448" prev="0x7f2e2c096228" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096448" next="0x7f2e2c096558" prev="0x7f2e2c096338" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096558" next="0x7f2e2c096668" prev="0x7f2e2c096448" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096668" next="0x7f2e2c096778" prev="0x7f2e2c096558" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096778" next="0x7f2e2c096888" prev="0x7f2e2c096668" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096888" next="0x7f2e2c096998" prev="0x7f2e2c096778" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096998" next="0x7f2e2c096aa8" prev="0x7f2e2c096888" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096aa8" next="0x7f2e2c096bb8" prev="0x7f2e2c096998" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096bb8" next="0x7f2e2c096cc8" prev="0x7f2e2c096aa8" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096cc8" next="0x7f2e2c096dd8" prev="0x7f2e2c096bb8" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c096dd8" next="0x7f2e2c097010" prev="0x7f2e2c096cc8" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c097010" next="0x7f2e2c097120" prev="0x7f2e2c096dd8" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c097120" next="0x7f2e2c097230" prev="0x7f2e2c097010" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_FLY" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c097230" next="0x7f2e2c097340" prev="0x7f2e2c097120" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c097340" next="0x7f2e2c097450" prev="0x7f2e2c097230" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c097450" next="0x7f2e2c097560" prev="0x7f2e2c097340" upper="0x7f2e2c094000" lower="(nil)">Submitted in conformance with the requirements <Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="47" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c097560" next="0x7f2e2c097670" prev="0x7f2e2c097450" upper="0x7f2e2c094000" lower="(nil)">for the Master degree in computer Science <Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="42" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c097670" next="0x7f2e2c097780" prev="0x7f2e2c097560" upper="0x7f2e2c094000" lower="(nil)">Stream 1<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="8" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c097780" next="0x7f2e2c097890" prev="0x7f2e2c097670" upper="0x7f2e2c094000" lower="(nil)">School of Computer Science<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="26" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c097890" next="0x7f2e2c0979a0" prev="0x7f2e2c097780" upper="0x7f2e2c094000" lower="(nil)">at the University Of Birmingham <Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="32" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c0979a0" next="0x7f2e2c097ab0" prev="0x7f2e2c097890" upper="0x7f2e2c094000" lower="(nil)">in United-Kingdom<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="17" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c097ab0" next="0x7f2e2c097bc0" prev="0x7f2e2c0979a0" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c097bc0" next="0x7f2e2c097cd0" prev="0x7f2e2c097ab0" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c097cd0" next="0x7f2e2c097de0" prev="0x7f2e2c097bc0" upper="0x7f2e2c094000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c097de0" next="(nil)" prev="0x7f2e2c097cd0" upper="0x7f2e2c094000" lower="(nil)">September 2014, School of Computer Science, University of Birmingham<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="68" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt></body></page><page ptr="0x7f2e2c0920e0" next="0x7f2e2c0921c0" prev="0x7f2e2c092000" upper="0x1af44a0" lower="0x7f2e2c0940c0"><body ptr="0x7f2e2c0940c0" next="0x7f2e2c099000" prev="(nil)" upper="0x7f2e2c0920e0" lower="0x7f2e2c098018"><txt ptr="0x7f2e2c098018" next="0x7f2e2c098238" prev="(nil)" upper="0x7f2e2c0940c0" lower="(nil)">Abstract<Text nLength="8" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c098238" next="0x7f2e2c098348" prev="0x7f2e2c098018" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c098348" next="0x7f2e2c098458" prev="0x7f2e2c098238" upper="0x7f2e2c0940c0" lower="(nil)">The aim of this thesis is to analyze and visualize different networks, ranging from social networks to biology networks. More precisely, we focused on tackling and addressing the problem of identifying most prominent nodes in different medium scale networks. Three highly technical and complex detection algorithms have been implemented, namely the k-cores algorithm, the bias random walk and finally the core-periphery profile. (Research project)<Text nLength="99" nType="POR_TXT"/><Text nLength="1" nType="POR_HOLE"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Text nLength="89" nType="POR_TXT"/><Text nLength="1" nType="POR_HOLE"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Text nLength="95" nType="POR_TXT"/><Text nLength="1" nType="POR_HOLE"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Text nLength="90" nType="POR_TXT"/><Text nLength="1" nType="POR_HOLE"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Text nLength="70" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c098458" next="0x7f2e2c098568" prev="0x7f2e2c098348" upper="0x7f2e2c0940c0" lower="(nil)">These algorithms have been evaluated, compared and contrasted to a baseline algorithm using four data sets where the prominents nodes are known.<Text nLength="96" nType="POR_TXT"/><Text nLength="1" nType="POR_HOLE"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Text nLength="47" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c098568" next="0x7f2e2c098678" prev="0x7f2e2c098458" upper="0x7f2e2c0940c0" lower="(nil)"><Text nLength="0" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c098678" next="0x7f2e2c098788" prev="0x7f2e2c098568" upper="0x7f2e2c0940c0" lower="(nil)">To reach this goal, I devised a web application, a client server application, offering an online service to users interested in visualizing, analysing and characterizing their networks (Software project).<Text nLength="104" nType="POR_TXT"/><Text nLength="1" nType="POR_HOLE"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Text nLength="99" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c098788" next="0x7f2e2c098898" prev="0x7f2e2c098678" upper="0x7f2e2c0940c0" lower="(nil)">This software framework have been developed using the latest technology such as jQuery, java-script, HTML5, CSS3, AJAX, JSON, Java EE API, servlet, JSP and Tomcat server. The originality of this work is that it offers an online service, a web application to users who want to analyse their networks to determine the most important vertices.<Text nLength="93" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Text nLength="93" nType="POR_TXT"/><Text nLength="1" nType="POR_HOLE"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Text nLength="102" nType="POR_TXT"/><Text nLength="1" nType="POR_HOLE"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Text nLength="50" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c098898" next="0x7f2e2c0989a8" prev="0x7f2e2c098788" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0989a8" next="0x7f2e2c098ab8" prev="0x7f2e2c098898" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c098ab8" next="0x7f2e2c098bc8" prev="0x7f2e2c0989a8" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c098bc8" next="0x7f2e2c098cd8" prev="0x7f2e2c098ab8" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c098cd8" next="0x7f2e2c098de8" prev="0x7f2e2c098bc8" upper="0x7f2e2c0940c0" lower="(nil)">Keywords<Text nLength="8" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c098de8" next="0x7f2e2c080020" prev="0x7f2e2c098cd8" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c080020" next="0x7f2e2c080130" prev="0x7f2e2c098de8" upper="0x7f2e2c0940c0" lower="(nil)">Graphs, Networks, Prominent nodes, visualization, metrics, algorithms, K-Core decomposition, Biased Random walk, Core-Periphery Profile, Web-application, client-server, Java, JSP, Servlet, Tomcat7, JSON, AJAX, jQuery.<Text nLength="93" nType="POR_PARA"/><LineBreak/><Text nLength="96" nType="POR_LAY"/><LineBreak/><Text nLength="28" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f2e2c080130" next="0x7f2e2c080240" prev="0x7f2e2c080020" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c080240" next="0x7f2e2c080350" prev="0x7f2e2c080130" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c080350" next="0x7f2e2c080460" prev="0x7f2e2c080240" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c080460" next="0x7f2e2c080570" prev="0x7f2e2c080350" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c080570" next="0x7f2e2c080680" prev="0x7f2e2c080460" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c080680" next="0x7f2e2c080790" prev="0x7f2e2c080570" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c080790" next="0x7f2e2c0808a0" prev="0x7f2e2c080680" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0808a0" next="0x7f2e2c0809b0" prev="0x7f2e2c080790" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0809b0" next="0x7f2e2c080ac0" prev="0x7f2e2c0808a0" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c080ac0" next="0x7f2e2c080bd0" prev="0x7f2e2c0809b0" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c080bd0" next="0x7f2e2c080ce0" prev="0x7f2e2c080ac0" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c080ce0" next="0x7f2e2c080df0" prev="0x7f2e2c080bd0" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c080df0" next="0x7f2e2c081028" prev="0x7f2e2c080ce0" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c081028" next="0x7f2e2c081138" prev="0x7f2e2c080df0" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c081138" next="0x7f2e2c081248" prev="0x7f2e2c081028" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c081248" next="0x7f2e2c081358" prev="0x7f2e2c081138" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c081358" next="0x7f2e2c081468" prev="0x7f2e2c081248" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c081468" next="0x7f2e2c081578" prev="0x7f2e2c081358" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c081578" next="0x7f2e2c081688" prev="0x7f2e2c081468" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c081688" next="0x7f2e2c081798" prev="0x7f2e2c081578" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c081798" next="0x7f2e2c0818a8" prev="0x7f2e2c081688" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0818a8" next="0x7f2e2c0819b8" prev="0x7f2e2c081798" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0819b8" next="0x7f2e2c081ac8" prev="0x7f2e2c0818a8" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c081ac8" next="0x7f2e2c081bd8" prev="0x7f2e2c0819b8" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c081bd8" next="(nil)" prev="0x7f2e2c081ac8" upper="0x7f2e2c0940c0" lower="(nil)"><Finish/></txt></body><footer ptr="0x7f2e2c099000" next="(nil)" prev="0x7f2e2c0940c0" upper="0x7f2e2c0920e0" lower="0x7f2e2c098128"><txt ptr="0x7f2e2c098128" next="(nil)" prev="(nil)" upper="0x7f2e2c099000" lower="(nil)">*<Special nLength="0" nType="POR_MARGIN" rText=""/><Special nLength="1" nType="POR_FLD" rText="2"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt></footer></page><page ptr="0x7f2e2c0921c0" next="0x7f2e2c0922a0" prev="0x7f2e2c0920e0" upper="0x1af44a0" lower="0x7f2e2c094180"><body ptr="0x7f2e2c094180" next="0x7f2e2c0990c0" prev="(nil)" upper="0x7f2e2c0921c0" lower="0x7f2e2c081ce8"><txt ptr="0x7f2e2c081ce8" next="0x7f2e2c082030" prev="(nil)" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c082030" next="0x7f2e2c082140" prev="0x7f2e2c081ce8" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c082140" next="0x7f2e2c082250" prev="0x7f2e2c082030" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c082250" next="0x7f2e2c082360" prev="0x7f2e2c082140" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c082360" next="0x7f2e2c082470" prev="0x7f2e2c082250" upper="0x7f2e2c094180" lower="(nil)">Declaration<Finish/></txt><txt ptr="0x7f2e2c082470" next="0x7f2e2c082580" prev="0x7f2e2c082360" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c082580" next="0x7f2e2c082690" prev="0x7f2e2c082470" upper="0x7f2e2c094180" lower="(nil)">I declare that the report has not been published in any journals, websites and magazines. Also, it has not been appeared in the University of birmingham as well as other universities. All the related works has been finished supervised by Dr. Shan.He<Finish/></txt><txt ptr="0x7f2e2c082690" next="0x7f2e2c0827a0" prev="0x7f2e2c082580" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0827a0" next="0x7f2e2c0828b0" prev="0x7f2e2c082690" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0828b0" next="0x7f2e2c0829c0" prev="0x7f2e2c0827a0" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0829c0" next="0x7f2e2c082ad0" prev="0x7f2e2c0828b0" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c082ad0" next="0x7f2e2c082be0" prev="0x7f2e2c0829c0" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c082be0" next="0x7f2e2c082cf0" prev="0x7f2e2c082ad0" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c082cf0" next="0x7f2e2c082e00" prev="0x7f2e2c082be0" upper="0x7f2e2c094180" lower="(nil)">Acknowledgement<Finish/></txt><txt ptr="0x7f2e2c082e00" next="0x7f2e2c083038" prev="0x7f2e2c082cf0" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c083038" next="0x7f2e2c083148" prev="0x7f2e2c082e00" upper="0x7f2e2c094180" lower="(nil)">I would like to express my very great appreciation to my wife Rita for her patience, support, assistance and trust.<Finish/></txt><txt ptr="0x7f2e2c083148" next="0x7f2e2c083258" prev="0x7f2e2c083038" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c083258" next="0x7f2e2c083368" prev="0x7f2e2c083148" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c083368" next="0x7f2e2c083478" prev="0x7f2e2c083258" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c083478" next="0x7f2e2c083588" prev="0x7f2e2c083368" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c083588" next="0x7f2e2c083698" prev="0x7f2e2c083478" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c083698" next="0x7f2e2c0837a8" prev="0x7f2e2c083588" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0837a8" next="0x7f2e2c0838b8" prev="0x7f2e2c083698" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0838b8" next="0x7f2e2c0839c8" prev="0x7f2e2c0837a8" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0839c8" next="0x7f2e2c083ad8" prev="0x7f2e2c0838b8" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c083ad8" next="0x7f2e2c083be8" prev="0x7f2e2c0839c8" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c083be8" next="0x7f2e2c083cf8" prev="0x7f2e2c083ad8" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c083cf8" next="0x7f2e2c083e08" prev="0x7f2e2c083be8" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c083e08" next="0x7f2e2c084040" prev="0x7f2e2c083cf8" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c084040" next="0x7f2e2c084150" prev="0x7f2e2c083e08" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c084150" next="0x7f2e2c084260" prev="0x7f2e2c084040" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c084260" next="0x7f2e2c084370" prev="0x7f2e2c084150" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c084370" next="0x7f2e2c084480" prev="0x7f2e2c084260" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c084480" next="0x7f2e2c084590" prev="0x7f2e2c084370" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c084590" next="0x7f2e2c0846a0" prev="0x7f2e2c084480" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0846a0" next="0x7f2e2c0847b0" prev="0x7f2e2c084590" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0847b0" next="0x7f2e2c0848c0" prev="0x7f2e2c0846a0" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0848c0" next="0x7f2e2c0849d0" prev="0x7f2e2c0847b0" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0849d0" next="0x7f2e2c084ae0" prev="0x7f2e2c0848c0" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c084ae0" next="0x7f2e2c084bf0" prev="0x7f2e2c0849d0" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c084bf0" next="0x7f2e2c084d00" prev="0x7f2e2c084ae0" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c084d00" next="0x7f2e2c084e10" prev="0x7f2e2c084bf0" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c084e10" next="0x7f2e2c085048" prev="0x7f2e2c084d00" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c085048" next="0x7f2e2c085158" prev="0x7f2e2c084e10" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c085158" next="0x7f2e2c085268" prev="0x7f2e2c085048" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c085268" next="0x7f2e2c085378" prev="0x7f2e2c085158" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c085378" next="0x7f2e2c085488" prev="0x7f2e2c085268" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c085488" next="(nil)" prev="0x7f2e2c085378" upper="0x7f2e2c094180" lower="(nil)"><Finish/></txt></body><footer ptr="0x7f2e2c0990c0" next="(nil)" prev="0x7f2e2c094180" upper="0x7f2e2c0921c0" lower="0x7f2e2c081df8"><txt ptr="0x7f2e2c081df8" next="(nil)" prev="(nil)" upper="0x7f2e2c0990c0" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c0922a0" next="0x7f2e2c092380" prev="0x7f2e2c0921c0" upper="0x1af44a0" lower="0x7f2e2c094300"><body ptr="0x7f2e2c094300" next="0x7f2e2c099180" prev="(nil)" upper="0x7f2e2c0922a0" lower="0x7f2e2c086000"><section ptr="0x7f2e2c086000" next="0x7f2e2c0860f8" prev="(nil)" upper="0x7f2e2c094300" lower="0x7f2e2c087000"><column ptr="0x7f2e2c087000" next="(nil)" prev="(nil)" upper="0x7f2e2c086000" lower="0x7f2e2c094240"><body ptr="0x7f2e2c094240" next="(nil)" prev="(nil)" upper="0x7f2e2c087000" lower="0x7f2e2c085598"><txt ptr="0x7f2e2c085598" next="0x7f2e2c0857b8" prev="(nil)" upper="0x7f2e2c094240" lower="(nil)">Table of Contents<Finish/></txt><txt ptr="0x7f2e2c0857b8" next="(nil)" prev="0x7f2e2c085598" upper="0x7f2e2c094240" lower="(nil)"><Finish/></txt></body></column></section><section ptr="0x7f2e2c0860f8" next="0x7f2e2c0862e8" prev="0x7f2e2c086000" upper="0x7f2e2c094300" lower="0x7f2e2c089c08"><txt ptr="0x7f2e2c089c08" next="0x7f2e2c089af8" prev="(nil)" upper="0x7f2e2c0860f8" lower="(nil)">Abstract*2<Finish/></txt><txt ptr="0x7f2e2c089af8" next="0x7f2e2c0899e8" prev="0x7f2e2c089c08" upper="0x7f2e2c0860f8" lower="(nil)">Chapter 1: Introduction and background*4<Finish/></txt><txt ptr="0x7f2e2c0899e8" next="0x7f2e2c0898d8" prev="0x7f2e2c089af8" upper="0x7f2e2c0860f8" lower="(nil)">1.1 Networks and graphs*4<Finish/></txt><txt ptr="0x7f2e2c0898d8" next="0x7f2e2c0897c8" prev="0x7f2e2c0899e8" upper="0x7f2e2c0860f8" lower="(nil)">1.3 Properties and characteristics of prominent nodes*6<Finish/></txt><txt ptr="0x7f2e2c0897c8" next="0x7f2e2c0896b8" prev="0x7f2e2c0898d8" upper="0x7f2e2c0860f8" lower="(nil)">1.4 Aims and objectives*7<Finish/></txt><txt ptr="0x7f2e2c0896b8" next="0x7f2e2c0895a8" prev="0x7f2e2c0897c8" upper="0x7f2e2c0860f8" lower="(nil)">1.5 Project type*7<Finish/></txt><txt ptr="0x7f2e2c0895a8" next="0x7f2e2c089498" prev="0x7f2e2c0896b8" upper="0x7f2e2c0860f8" lower="(nil)">Chapter 2: Methodology and Algorithms*8<Finish/></txt><txt ptr="0x7f2e2c089498" next="0x7f2e2c089388" prev="0x7f2e2c0895a8" upper="0x7f2e2c0860f8" lower="(nil)">2.1 Methodology*8<Finish/></txt><txt ptr="0x7f2e2c089388" next="0x7f2e2c089278" prev="0x7f2e2c089498" upper="0x7f2e2c0860f8" lower="(nil)">2.2 Algorithms*8<Finish/></txt><txt ptr="0x7f2e2c089278" next="0x7f2e2c089168" prev="0x7f2e2c089388" upper="0x7f2e2c0860f8" lower="(nil)">2.2.1 Network Statistics *8<Finish/></txt><txt ptr="0x7f2e2c089168" next="0x7f2e2c089058" prev="0x7f2e2c089278" upper="0x7f2e2c0860f8" lower="(nil)">2.2.3 K-Core decomposition*9<Finish/></txt><txt ptr="0x7f2e2c089058" next="0x7f2e2c088e20" prev="0x7f2e2c089168" upper="0x7f2e2c0860f8" lower="(nil)">2.2.4 Identifying prominent nodes using biased random walks*11<Finish/></txt><txt ptr="0x7f2e2c088e20" next="0x7f2e2c088d10" prev="0x7f2e2c089058" upper="0x7f2e2c0860f8" lower="(nil)">2.2.5 Profiling core periphery structure by random walkers*13<Finish/></txt><txt ptr="0x7f2e2c088d10" next="0x7f2e2c088c00" prev="0x7f2e2c088e20" upper="0x7f2e2c0860f8" lower="(nil)">Chapter 3: Requirements, design and implementation*14<Finish/></txt><txt ptr="0x7f2e2c088c00" next="0x7f2e2c088af0" prev="0x7f2e2c088d10" upper="0x7f2e2c0860f8" lower="(nil)">3.1 Requirements definition*14<Finish/></txt><txt ptr="0x7f2e2c088af0" next="0x7f2e2c0889e0" prev="0x7f2e2c088c00" upper="0x7f2e2c0860f8" lower="(nil)">3.1 Client-Server Web Architecture*15<Finish/></txt><txt ptr="0x7f2e2c0889e0" next="0x7f2e2c0888d0" prev="0x7f2e2c088af0" upper="0x7f2e2c0860f8" lower="(nil)">3.2 Model View Controller Pattern*16<Finish/></txt><txt ptr="0x7f2e2c0888d0" next="0x7f2e2c0887c0" prev="0x7f2e2c0889e0" upper="0x7f2e2c0860f8" lower="(nil)">Chapter 4: Validation and verification*18<Finish/></txt><txt ptr="0x7f2e2c0887c0" next="0x7f2e2c0886b0" prev="0x7f2e2c0888d0" upper="0x7f2e2c0860f8" lower="(nil)">4.1 Stability*19<Finish/></txt><txt ptr="0x7f2e2c0886b0" next="0x7f2e2c0885a0" prev="0x7f2e2c0887c0" upper="0x7f2e2c0860f8" lower="(nil)">4.2 Correctness*19<Finish/></txt><txt ptr="0x7f2e2c0885a0" next="0x7f2e2c088490" prev="0x7f2e2c0886b0" upper="0x7f2e2c0860f8" lower="(nil)">Chapter 5: Algorithms' evaluation*19<Finish/></txt><txt ptr="0x7f2e2c088490" next="0x7f2e2c088380" prev="0x7f2e2c0885a0" upper="0x7f2e2c0860f8" lower="(nil)">5.1 First dataset: Zachary's karate club*20<Finish/></txt><txt ptr="0x7f2e2c088380" next="0x7f2e2c088270" prev="0x7f2e2c088490" upper="0x7f2e2c0860f8" lower="(nil)">5.2 Second dataset: Thurman office*30<Finish/></txt><txt ptr="0x7f2e2c088270" next="0x7f2e2c088160" prev="0x7f2e2c088380" upper="0x7f2e2c0860f8" lower="(nil)">5.3 Third dataset: Social network of bottlenose dolphin*34<Finish/></txt><txt ptr="0x7f2e2c088160" next="0x7f2e2c088050" prev="0x7f2e2c088270" upper="0x7f2e2c0860f8" lower="(nil)">5.4 Fourth dataset: Books from Amazon 2004.*37<Finish/></txt><txt ptr="0x7f2e2c088050" next="0x7f2e2c085e18" prev="0x7f2e2c088160" upper="0x7f2e2c0860f8" lower="(nil)">5.5 Fifth dataset: Jazz musicians bands network*39<Finish/></txt><txt ptr="0x7f2e2c085e18" next="0x7f2e2c085d08" prev="0x7f2e2c088050" upper="0x7f2e2c0860f8" lower="(nil)">Chapter 6: Conclusion*40<Finish/></txt><txt ptr="0x7f2e2c085d08" next="0x7f2e2c085bf8" prev="0x7f2e2c085e18" upper="0x7f2e2c0860f8" lower="(nil)">Appendix 0: Contents of CD*41<Finish/></txt><txt ptr="0x7f2e2c085bf8" next="0x7f2e2c085ae8" prev="0x7f2e2c085d08" upper="0x7f2e2c0860f8" lower="(nil)">Appendix 1: Test Cases, JUnits*42<Finish/></txt><txt ptr="0x7f2e2c085ae8" next="0x7f2e2c0859d8" prev="0x7f2e2c085bf8" upper="0x7f2e2c0860f8" lower="(nil)">Appendix 2: Object-Oriented Design UML*46<Finish/></txt><txt ptr="0x7f2e2c0859d8" next="0x7f2e2c0858c8" prev="0x7f2e2c085ae8" upper="0x7f2e2c0860f8" lower="(nil)">Appendix 3: External libraires*48<Finish/></txt><txt ptr="0x7f2e2c0858c8" next="(nil)" prev="0x7f2e2c0859d8" upper="0x7f2e2c0860f8" lower="(nil)">References*50<Finish/></txt></section><section ptr="0x7f2e2c0862e8" next="0x7f2e2c0863e0" prev="0x7f2e2c0860f8" upper="0x7f2e2c094300" lower="0x7f2e2c087190"><column ptr="0x7f2e2c087190" next="(nil)" prev="(nil)" upper="0x7f2e2c0862e8" lower="0x7f2e2c094480"><body ptr="0x7f2e2c094480" next="(nil)" prev="(nil)" upper="0x7f2e2c087190" lower="0x7f2e2c089d18"><txt ptr="0x7f2e2c089d18" next="(nil)" prev="(nil)" upper="0x7f2e2c094480" lower="(nil)"><Finish/></txt></body></column></section><section ptr="0x7f2e2c0863e0" next="(nil)" prev="0x7f2e2c0862e8" upper="0x7f2e2c094300" lower="0x7f2e2c087258" follow="0x7f2e2c0861f0"><column ptr="0x7f2e2c087258" next="(nil)" prev="(nil)" upper="0x7f2e2c0863e0" lower="0x7f2e2c094600"><body ptr="0x7f2e2c094600" next="(nil)" prev="(nil)" upper="0x7f2e2c087258" lower="0x7f2e2c089e28"><txt ptr="0x7f2e2c089e28" next="0x7f2e2c08a280" prev="(nil)" upper="0x7f2e2c094600" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08a280" next="0x7f2e2c08a390" prev="0x7f2e2c089e28" upper="0x7f2e2c094600" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08a390" next="(nil)" prev="0x7f2e2c08a280" upper="0x7f2e2c094600" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099180" next="(nil)" prev="0x7f2e2c094300" upper="0x7f2e2c0922a0" lower="0x7f2e2c0856a8"><txt ptr="0x7f2e2c0856a8" next="(nil)" prev="(nil)" upper="0x7f2e2c099180" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c092380" next="0x7f2e2c092460" prev="0x7f2e2c0922a0" upper="0x1af44a0" lower="0x7f2e2c094540"><body ptr="0x7f2e2c094540" next="0x7f2e2c099240" prev="(nil)" upper="0x7f2e2c092380" lower="0x7f2e2c0861f0"><section ptr="0x7f2e2c0861f0" next="(nil)" prev="(nil)" upper="0x7f2e2c094540" lower="0x7f2e2c0870c8" follow="0x7f2e2c0864d8" precede="0x7f2e2c0863e0"><column ptr="0x7f2e2c0870c8" next="(nil)" prev="(nil)" upper="0x7f2e2c0861f0" lower="0x7f2e2c0943c0"><body ptr="0x7f2e2c0943c0" next="(nil)" prev="(nil)" upper="0x7f2e2c0870c8" lower="0x7f2e2c08a4a0"><txt ptr="0x7f2e2c08a4a0" next="0x7f2e2c08a6c0" prev="(nil)" upper="0x7f2e2c0943c0" lower="(nil)">Chapter 1: Introduction and background<Finish/></txt><txt ptr="0x7f2e2c08a6c0" next="0x7f2e2c08a7d0" prev="0x7f2e2c08a4a0" upper="0x7f2e2c0943c0" lower="(nil)">1.1 Networks and graphs<Finish/></txt><txt ptr="0x7f2e2c08a7d0" next="0x7f2e2c08a8e0" prev="0x7f2e2c08a6c0" upper="0x7f2e2c0943c0" lower="(nil)">A network is the outcome of interactions between a large number of entities such as humans, businesses, molecules, cells, proteins, and stocks. A network is represented by a graph: a set of nodes (vertices) connected by links (edges).<Finish/></txt><txt ptr="0x7f2e2c08a8e0" next="0x7f2e2c08a9f0" prev="0x7f2e2c08a7d0" upper="0x7f2e2c0943c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08a9f0" next="0x7f2e2c08ab00" prev="0x7f2e2c08a8e0" upper="0x7f2e2c0943c0" lower="(nil)">The Figure 1 shows a social network of 15 office workers and their associations. The nodes represent the office workers. The edges between nodes represent the association and frequent communication. This social network has been reported by Thurman (1979). He spent 16 months observing the interactions among employees in the overseas office of a large international corporation.<Finish/></txt><txt ptr="0x7f2e2c08ab00" next="0x7f2e2c08ac10" prev="0x7f2e2c08a9f0" upper="0x7f2e2c0943c0" lower="(nil)"><anchored><fly ptr="0x1af6fb0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1af8790"><txt ptr="0x1af8790" next="(nil)" prev="(nil)" upper="0x1af6fb0" lower="(nil)"/></fly></anchored>Figure 1: Example of Social Network, Thurman Office ((15 nodes, 33 edges) Thurman B. (1979). In the office: Networks and coalitions. Social Networks, 2, 47-63.)<Finish/></txt><txt ptr="0x7f2e2c08ac10" next="0x7f2e2c08ad20" prev="0x7f2e2c08ab00" upper="0x7f2e2c0943c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08ad20" next="0x7f2e2c08ae30" prev="0x7f2e2c08ac10" upper="0x7f2e2c0943c0" lower="(nil)">Networks are important because they allow us to model, detect and extract significant patterns or structures and useful information about the system. They are the result of interactions between a large number of entities and represent a quite wide large number of systems. We represent a network in a graph form: a set of nodes connected by edges. These edges or links could be directed and weighted. In our project we have restricted our algorithms to the undirected and unweighted graphs networks.<Finish/></txt><txt ptr="0x7f2e2c08ae30" next="0x7f2e2c08b068" prev="0x7f2e2c08ad20" upper="0x7f2e2c0943c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08b068" next="0x7f2e2c08b178" prev="0x7f2e2c08ae30" upper="0x7f2e2c0943c0" lower="(nil)">1.3 Properties and characteristics of prominent nodes<Finish/></txt><txt ptr="0x7f2e2c08b178" next="(nil)" prev="0x7f2e2c08b068" upper="0x7f2e2c0943c0" lower="(nil)">The importance of nodes is a vague concept, and the measures to identify these nodes are based on different aspects of properties, and often conflict with each other. <Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099240" next="(nil)" prev="0x7f2e2c094540" upper="0x7f2e2c092380" lower="0x7f2e2c08a5b0"><txt ptr="0x7f2e2c08a5b0" next="(nil)" prev="(nil)" upper="0x7f2e2c099240" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c092460" next="0x7f2e2c092540" prev="0x7f2e2c092380" upper="0x1af44a0" lower="0x7f2e2c0946c0"><body ptr="0x7f2e2c0946c0" next="0x7f2e2c099300" prev="(nil)" upper="0x7f2e2c092460" lower="0x7f2e2c0864d8"><section ptr="0x7f2e2c0864d8" next="(nil)" prev="(nil)" upper="0x7f2e2c0946c0" lower="0x7f2e2c087320" follow="0x7f2e2c0865d0" precede="0x7f2e2c0861f0"><column ptr="0x7f2e2c087320" next="(nil)" prev="(nil)" upper="0x7f2e2c0864d8" lower="0x7f2e2c094780"><body ptr="0x7f2e2c094780" next="(nil)" prev="(nil)" upper="0x7f2e2c087320" lower="0x7f2e2c08b288"><txt ptr="0x7f2e2c08b288" next="0x7f2e2c08b4a8" prev="(nil)" upper="0x7f2e2c094780" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08b4a8" next="0x7f2e2c08b5b8" prev="0x7f2e2c08b288" upper="0x7f2e2c094780" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08b5b8" next="0x7f2e2c08b6c8" prev="0x7f2e2c08b4a8" upper="0x7f2e2c094780" lower="(nil)">In social network, the importance of nodes was discussed as “centrality”, a characteristic of a node's position in a network. Three measure indicators [11] are often suggested for node centrality, namely, the degree, betweenness, and closeness.<Finish/></txt><txt ptr="0x7f2e2c08b6c8" next="0x7f2e2c08b7d8" prev="0x7f2e2c08b5b8" upper="0x7f2e2c094780" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08b7d8" next="0x7f2e2c08b8e8" prev="0x7f2e2c08b6c8" upper="0x7f2e2c094780" lower="(nil)">Intuitively, a prominent node should have a large number of edges (high degree) compared to a regular node. Indeed, in social networks, they have noticed that prominent nodes have on average 3 to 4 times as many friends as regular nodes. The degree of social networks often follow a power law: there are few nodes with an exceptionally high degree and many nodes with a lower degree.  However, we may have nodes in the network with many connections, that are not prominent, or vice versa, prominent node with a smaller number of connections.<Finish/></txt><txt ptr="0x7f2e2c08b8e8" next="0x7f2e2c08b9f8" prev="0x7f2e2c08b7d8" upper="0x7f2e2c094780" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08b9f8" next="0x7f2e2c08bb08" prev="0x7f2e2c08b8e8" upper="0x7f2e2c094780" lower="(nil)"><anchored><fly ptr="0x1af47e0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1af4a60"><txt ptr="0x1af4a60" next="(nil)" prev="(nil)" upper="0x1af47e0" lower="(nil)"/></fly></anchored>Figure 2: Example of node l with many edges on the periphery.<Finish/></txt><txt ptr="0x7f2e2c08bb08" next="0x7f2e2c08bc18" prev="0x7f2e2c08b9f8" upper="0x7f2e2c094780" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08bc18" next="0x7f2e2c08bd28" prev="0x7f2e2c08bb08" upper="0x7f2e2c094780" lower="(nil)">To illustrate this case, we can easily imagine a star network, on the periphery, connected to the rest of the network by just an edge. For example, in the Figure 2, the node l has six edges and is connected to the network by just one edge. Therefore the subgraph composed of the node l and its neighborhood is Isolated on the periphery and is not considered a prominent node.<Finish/></txt><txt ptr="0x7f2e2c08bd28" next="0x7f2e2c08be38" prev="0x7f2e2c08bc18" upper="0x7f2e2c094780" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08be38" next="0x7f2e2c08c070" prev="0x7f2e2c08bd28" upper="0x7f2e2c094780" lower="(nil)">In general, the high degree nodes function as a hubs, and are often grouped in a densely connected core, realizing the short pairwise distances (betweenness) between the more peripheral nodes. Therefore, we expect that the degree and betweenness measure of a node to play an important role in determining these prominent nodes.<Finish/></txt><txt ptr="0x7f2e2c08c070" next="0x7f2e2c08c180" prev="0x7f2e2c08be38" upper="0x7f2e2c094780" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08c180" next="0x7f2e2c08c290" prev="0x7f2e2c08c070" upper="0x7f2e2c094780" lower="(nil)">Finally, a third important characteristic of a prominent node often mentioned, is the closeness centrality which emphasizes the distance of a node to all other in the network. The closer one is to others in the network, the more favored is that node's position.<Finish/></txt><txt ptr="0x7f2e2c08c290" next="(nil)" prev="0x7f2e2c08c180" upper="0x7f2e2c094780" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099300" next="(nil)" prev="0x7f2e2c0946c0" upper="0x7f2e2c092460" lower="0x7f2e2c08b398"><txt ptr="0x7f2e2c08b398" next="(nil)" prev="(nil)" upper="0x7f2e2c099300" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c092540" next="0x7f2e2c092620" prev="0x7f2e2c092460" upper="0x1af44a0" lower="0x7f2e2c094840"><body ptr="0x7f2e2c094840" next="0x7f2e2c0993c0" prev="(nil)" upper="0x7f2e2c092540" lower="0x7f2e2c0865d0"><section ptr="0x7f2e2c0865d0" next="(nil)" prev="(nil)" upper="0x7f2e2c094840" lower="0x7f2e2c0873e8" follow="0x7f2e2c0866c8" precede="0x7f2e2c0864d8"><column ptr="0x7f2e2c0873e8" next="(nil)" prev="(nil)" upper="0x7f2e2c0865d0" lower="0x7f2e2c094900"><body ptr="0x7f2e2c094900" next="(nil)" prev="(nil)" upper="0x7f2e2c0873e8" lower="0x7f2e2c08c3a0"><txt ptr="0x7f2e2c08c3a0" next="0x7f2e2c08c5c0" prev="(nil)" upper="0x7f2e2c094900" lower="(nil)">1.4 Aims and objectives<Finish/></txt><txt ptr="0x7f2e2c08c5c0" next="0x7f2e2c08c6d0" prev="0x7f2e2c08c3a0" upper="0x7f2e2c094900" lower="(nil)">The aim of this master project is to devise a software tool to visualize and analyze networks, and more precisely to tackle and address the problem of identifying most prominent nodes in different networks. Therefore the application should offer to users a means to visualize and gather different statistics about their network. Secondly, the application should offer different algorithms to detect prominent nodes.<Finish/></txt><txt ptr="0x7f2e2c08c6d0" next="0x7f2e2c08c7e0" prev="0x7f2e2c08c5c0" upper="0x7f2e2c094900" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08c7e0" next="0x7f2e2c08c8f0" prev="0x7f2e2c08c6d0" upper="0x7f2e2c094900" lower="(nil)">1.5 Project type<Finish/></txt><txt ptr="0x7f2e2c08c8f0" next="0x7f2e2c08ca00" prev="0x7f2e2c08c7e0" upper="0x7f2e2c094900" lower="(nil)">The project type is a combination of Software and Research project. The software project part consists of devising a reliable robust online web-application using client-server architecture. <Finish/></txt><txt ptr="0x7f2e2c08ca00" next="0x7f2e2c08cb10" prev="0x7f2e2c08c8f0" upper="0x7f2e2c094900" lower="(nil)">On the other hand, the research project part implies implementing and using different algorithms to extract statistics and detect prominent nodes in the network.<Finish/></txt><txt ptr="0x7f2e2c08cb10" next="0x7f2e2c08cc20" prev="0x7f2e2c08ca00" upper="0x7f2e2c094900" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08cc20" next="0x7f2e2c08cd30" prev="0x7f2e2c08cb10" upper="0x7f2e2c094900" lower="(nil)">Chapter 2: Methodology and Algorithms<Finish/></txt><txt ptr="0x7f2e2c08cd30" next="0x7f2e2c08ce40" prev="0x7f2e2c08cc20" upper="0x7f2e2c094900" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08ce40" next="0x7f2e2c08d078" prev="0x7f2e2c08cd30" upper="0x7f2e2c094900" lower="(nil)">2.1 Methodology<Finish/></txt><txt ptr="0x7f2e2c08d078" next="0x7f2e2c08d188" prev="0x7f2e2c08ce40" upper="0x7f2e2c094900" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08d188" next="0x7f2e2c08d298" prev="0x7f2e2c08d078" upper="0x7f2e2c094900" lower="(nil)">We will consider various existing algorithms, different methods of determining the importance of a node in a network. We will apply these algorithms to four different networks where the prominent nodes are known. Then we will analyze the performance and precision of these detection methods. <Finish/></txt><txt ptr="0x7f2e2c08d298" next="0x7f2e2c08d3a8" prev="0x7f2e2c08d188" upper="0x7f2e2c094900" lower="(nil)">Also we will compare these algorithm to a simple baseline algorithm based on the closeness and degree measure to quantify any added value.<Finish/></txt><txt ptr="0x7f2e2c08d3a8" next="0x7f2e2c08d4b8" prev="0x7f2e2c08d298" upper="0x7f2e2c094900" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08d4b8" next="0x7f2e2c08d5c8" prev="0x7f2e2c08d3a8" upper="0x7f2e2c094900" lower="(nil)">2.2 Algorithms<Finish/></txt><txt ptr="0x7f2e2c08d5c8" next="0x7f2e2c08d6d8" prev="0x7f2e2c08d4b8" upper="0x7f2e2c094900" lower="(nil)">2.2.1 Network Statistics <Finish/></txt><txt ptr="0x7f2e2c08d6d8" next="0x7f2e2c08d7e8" prev="0x7f2e2c08d5c8" upper="0x7f2e2c094900" lower="(nil)">We offer to users a means to gather and collect statistics about their network prior to apply any algorithm. We have designed a specific tab where users can upload their networks and gather information such as:<Finish/></txt><txt ptr="0x7f2e2c08d7e8" next="0x7f2e2c08d8f8" prev="0x7f2e2c08d6d8" upper="0x7f2e2c094900" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08d8f8" next="0x7f2e2c08da08" prev="0x7f2e2c08d7e8" upper="0x7f2e2c094900" lower="(nil)">Network size:  Network graph G(V,E)<Finish/></txt><txt ptr="0x7f2e2c08da08" next="0x7f2e2c08db18" prev="0x7f2e2c08d8f8" upper="0x7f2e2c094900" lower="(nil)"><anchored><fly ptr="0x2004c00" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2004ed0"><txt ptr="0x2004ed0" next="(nil)" prev="(nil)" upper="0x2004c00" lower="(nil)"/></fly><fly ptr="0x2005030" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2005400"><txt ptr="0x2005400" next="(nil)" prev="(nil)" upper="0x2005030" lower="(nil)"/></fly><fly ptr="0x2005560" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2005930"><txt ptr="0x2005930" next="(nil)" prev="(nil)" upper="0x2005560" lower="(nil)"/></fly></anchored>Number of Nodes: *,  Number of Edges:  *,  Density:  * Maximum number of ties, links or edges for an undirected graph. <Finish/></txt><txt ptr="0x7f2e2c08db18" next="0x7f2e2c08dc28" prev="0x7f2e2c08da08" upper="0x7f2e2c094900" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08dc28" next="0x7f2e2c08dd38" prev="0x7f2e2c08db18" upper="0x7f2e2c094900" lower="(nil)">Characteristic path length: The average number of steps along the shortest paths for all possible pairs of network nodes. It measures the efficiency of information or mass transport on a network. Concretely, it measures for instance the number of people you will have to communicate on average, to contact a complete stranger, or the average number of clicks which will lead you from one website to another.<Finish/></txt><txt ptr="0x7f2e2c08dd38" next="0x7f2e2c08de48" prev="0x7f2e2c08dc28" upper="0x7f2e2c094900" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08de48" next="(nil)" prev="0x7f2e2c08dd38" upper="0x7f2e2c094900" lower="(nil)"><anchored><fly ptr="0x20093a0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2009920"><txt ptr="0x2009920" next="(nil)" prev="(nil)" upper="0x20093a0" lower="(nil)"/></fly></anchored>********(Equation 1)<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c0993c0" next="(nil)" prev="0x7f2e2c094840" upper="0x7f2e2c092540" lower="0x7f2e2c08c4b0"><txt ptr="0x7f2e2c08c4b0" next="(nil)" prev="(nil)" upper="0x7f2e2c0993c0" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c092620" next="0x7f2e2c092700" prev="0x7f2e2c092540" upper="0x1af44a0" lower="0x7f2e2c0949c0"><body ptr="0x7f2e2c0949c0" next="0x7f2e2c099480" prev="(nil)" upper="0x7f2e2c092620" lower="0x7f2e2c0866c8"><section ptr="0x7f2e2c0866c8" next="(nil)" prev="(nil)" upper="0x7f2e2c0949c0" lower="0x7f2e2c0874b0" follow="0x7f2e2c0867c0" precede="0x7f2e2c0865d0"><column ptr="0x7f2e2c0874b0" next="(nil)" prev="(nil)" upper="0x7f2e2c0866c8" lower="0x7f2e2c094a80"><body ptr="0x7f2e2c094a80" next="(nil)" prev="(nil)" upper="0x7f2e2c0874b0" lower="0x7f2e2c08e080"><txt ptr="0x7f2e2c08e080" next="0x7f2e2c08e2a0" prev="(nil)" upper="0x7f2e2c094a80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08e2a0" next="0x7f2e2c08e3b0" prev="0x7f2e2c08e080" upper="0x7f2e2c094a80" lower="(nil)"><anchored><fly ptr="0x200c0a0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x200c480"><txt ptr="0x200c480" next="(nil)" prev="(nil)" upper="0x200c0a0" lower="(nil)"/></fly><fly ptr="0x200c6b0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x200cbf0"><txt ptr="0x200cbf0" next="(nil)" prev="(nil)" upper="0x200c6b0" lower="(nil)"/></fly><fly ptr="0x200cd90" next="(nil)" prev="(nil)" upper="(nil)" lower="0x200d390"><txt ptr="0x200d390" next="(nil)" prev="(nil)" upper="0x200cd90" lower="(nil)"/></fly><fly ptr="0x200d150" next="(nil)" prev="(nil)" upper="(nil)" lower="0x200da30"><txt ptr="0x200da30" next="(nil)" prev="(nil)" upper="0x200d150" lower="(nil)"/></fly></anchored>where * and  * is the shortest distance between * and *<Finish/></txt><txt ptr="0x7f2e2c08e3b0" next="0x7f2e2c08e4c0" prev="0x7f2e2c08e2a0" upper="0x7f2e2c094a80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08e4c0" next="0x7f2e2c08e5d0" prev="0x7f2e2c08e3b0" upper="0x7f2e2c094a80" lower="(nil)">Diameter: the longest shortest path between any two nodes in the network.<Finish/></txt><txt ptr="0x7f2e2c08e5d0" next="0x7f2e2c08e6e0" prev="0x7f2e2c08e4c0" upper="0x7f2e2c094a80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08e6e0" next="0x7f2e2c08e7f0" prev="0x7f2e2c08e5d0" upper="0x7f2e2c094a80" lower="(nil)"><anchored><fly ptr="0x2010a60" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2011280"><txt ptr="0x2011280" next="(nil)" prev="(nil)" upper="0x2010a60" lower="(nil)"/></fly></anchored>***** **(Equation 2)<Finish/></txt><txt ptr="0x7f2e2c08e7f0" next="0x7f2e2c08e900" prev="0x7f2e2c08e6e0" upper="0x7f2e2c094a80" lower="(nil)"><anchored><fly ptr="0x2011e90" next="(nil)" prev="(nil)" upper="(nil)" lower="0x20125e0"><txt ptr="0x20125e0" next="(nil)" prev="(nil)" upper="0x2011e90" lower="(nil)"/></fly></anchored>Where * is the eccentricity of a vertex v, the greatest shortest distance between v and any other vertex.<Finish/></txt><txt ptr="0x7f2e2c08e900" next="0x7f2e2c08ea10" prev="0x7f2e2c08e7f0" upper="0x7f2e2c094a80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08ea10" next="0x7f2e2c08eb20" prev="0x7f2e2c08e900" upper="0x7f2e2c094a80" lower="(nil)">Degrees' distribution: <Finish/></txt><txt ptr="0x7f2e2c08eb20" next="0x7f2e2c08ec30" prev="0x7f2e2c08ea10" upper="0x7f2e2c094a80" lower="(nil)">The degree distribution is very important in studying both real network, such as the internet and social networks, and theoretical networks. The degree distribution is the probability distribution of the degrees, number of connections, over the whole network.<Finish/></txt><txt ptr="0x7f2e2c08ec30" next="0x7f2e2c08ed40" prev="0x7f2e2c08eb20" upper="0x7f2e2c094a80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08ed40" next="0x7f2e2c08ee50" prev="0x7f2e2c08ec30" upper="0x7f2e2c094a80" lower="(nil)">Centrality is a characteristic of a node's position in a network. It is a micro-level measure.<Finish/></txt><txt ptr="0x7f2e2c08ee50" next="0x7f2e2c08f088" prev="0x7f2e2c08ed40" upper="0x7f2e2c094a80" lower="(nil)">Degree centrality of a vertex is the number of connections a node has. This indicator does not take into account indirect ties an entity has.<Finish/></txt><txt ptr="0x7f2e2c08f088" next="0x7f2e2c08f198" prev="0x7f2e2c08ee50" upper="0x7f2e2c094a80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08f198" next="0x7f2e2c08f2a8" prev="0x7f2e2c08f088" upper="0x7f2e2c094a80" lower="(nil)">Closeness centrality emphasizes the distance of a node to all other in the network. The closer one is to others in the network, the more favored is that node's position.<Finish/></txt><txt ptr="0x7f2e2c08f2a8" next="0x7f2e2c08f3b8" prev="0x7f2e2c08f198" upper="0x7f2e2c094a80" lower="(nil)">Farness is the sum of the shortest (geodesic) distances from a particular node to all others in the network. Closeness is the reciprocal of farness.<Finish/></txt><txt ptr="0x7f2e2c08f3b8" next="0x7f2e2c08f4c8" prev="0x7f2e2c08f2a8" upper="0x7f2e2c094a80" lower="(nil)"><anchored><fly ptr="0x201a310" next="(nil)" prev="(nil)" upper="(nil)" lower="0x201a9d0"><txt ptr="0x201a9d0" next="(nil)" prev="(nil)" upper="0x201a310" lower="(nil)"/></fly></anchored>*******(Equation 3)<Finish/></txt><txt ptr="0x7f2e2c08f4c8" next="0x7f2e2c08f5d8" prev="0x7f2e2c08f3b8" upper="0x7f2e2c094a80" lower="(nil)">Degree centrality measures one's local position, while closeness centrality measures position globally.<Finish/></txt><txt ptr="0x7f2e2c08f5d8" next="0x7f2e2c08f6e8" prev="0x7f2e2c08f4c8" upper="0x7f2e2c094a80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08f6e8" next="0x7f2e2c08f7f8" prev="0x7f2e2c08f5d8" upper="0x7f2e2c094a80" lower="(nil)">Betweenness centrality is the extent to which a node falls on the geodesic paths between other pairs of nodes in the network. The more nodes depend on a node to make connections with others, the more power that node has.<Finish/></txt><txt ptr="0x7f2e2c08f7f8" next="0x7f2e2c08f908" prev="0x7f2e2c08f6e8" upper="0x7f2e2c094a80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08f908" next="0x7f2e2c08fa18" prev="0x7f2e2c08f7f8" upper="0x7f2e2c094a80" lower="(nil)">Centralization:  ia a measure at the macro level. There are as many centralization measures as centrality measures. It indicates how unequal the distribution of centrality is in a network or how much variance there is in the distribution of centrality network. Centralization is a characteristic of a network. <Finish/></txt><txt ptr="0x7f2e2c08fa18" next="0x7f2e2c08fb28" prev="0x7f2e2c08f908" upper="0x7f2e2c094a80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08fb28" next="0x7f2e2c08fc38" prev="0x7f2e2c08fa18" upper="0x7f2e2c094a80" lower="(nil)">Centrality measures have been popularized by social scientist in the 1970's as possible measures for the importance, or prestige as they call it in a social network [11]. Such measures assume that an entity that is central in the network, meaning that it is connected to a lot of other entities via some short path, is prominent. <Finish/></txt><txt ptr="0x7f2e2c08fc38" next="0x7f2e2c08fd48" prev="0x7f2e2c08fb28" upper="0x7f2e2c094a80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c08fd48" next="(nil)" prev="0x7f2e2c08fc38" upper="0x7f2e2c094a80" lower="(nil)">By far the simplest and most common measure in the case of social network, is the degree centrality. As we have seen previously, the number of edges is a good indicator but definitely not perfect. In the baseline algorithm, we use the closeness and degree measure to select the l most prominent nodes in a network. First we sort them by closeness measure and in case where some entities have the same value then we sort them by degree. This baseline algorithm will be compared to the other algorithms to quantify any added value.<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099480" next="(nil)" prev="0x7f2e2c0949c0" upper="0x7f2e2c092620" lower="0x7f2e2c08e190"><txt ptr="0x7f2e2c08e190" next="(nil)" prev="(nil)" upper="0x7f2e2c099480" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c092700" next="0x7f2e2c0927e0" prev="0x7f2e2c092620" upper="0x1af44a0" lower="0x7f2e2c094b40"><body ptr="0x7f2e2c094b40" next="0x7f2e2c099540" prev="(nil)" upper="0x7f2e2c092700" lower="0x7f2e2c0867c0"><section ptr="0x7f2e2c0867c0" next="(nil)" prev="(nil)" upper="0x7f2e2c094b40" lower="0x7f2e2c087578" follow="0x7f2e2c0868b8" precede="0x7f2e2c0866c8"><column ptr="0x7f2e2c087578" next="(nil)" prev="(nil)" upper="0x7f2e2c0867c0" lower="0x7f2e2c094c00"><body ptr="0x7f2e2c094c00" next="(nil)" prev="(nil)" upper="0x7f2e2c087578" lower="0x7f2e2c08fe58"><txt ptr="0x7f2e2c08fe58" next="0x7f2e2c0701a0" prev="(nil)" upper="0x7f2e2c094c00" lower="(nil)">2.2.3 K-Core decomposition<Finish/></txt><txt ptr="0x7f2e2c0701a0" next="0x7f2e2c0702b0" prev="0x7f2e2c08fe58" upper="0x7f2e2c094c00" lower="(nil)">K-Core (or core of order k) decomposition is a widely used method aimed at partitioning a network graph G=(V,E) in layers, from the external to the more central ones. K-cores are subsets of a network whose cohesion increases as k increases. For small values of k, the k-cores tend to be large, diminishing in size as k increases. Therefore the k-cores are used to define the core collapse sequence of a network.<Finish/></txt><txt ptr="0x7f2e2c0702b0" next="0x7f2e2c0703c0" prev="0x7f2e2c0701a0" upper="0x7f2e2c094c00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0703c0" next="0x7f2e2c0704d0" prev="0x7f2e2c0702b0" upper="0x7f2e2c094c00" lower="(nil)">To fully understand the k-core decomposition, it is worth to introduce some important definitions and concepts.<Finish/></txt><txt ptr="0x7f2e2c0704d0" next="0x7f2e2c0705e0" prev="0x7f2e2c0703c0" upper="0x7f2e2c094c00" lower="(nil)"><anchored><fly ptr="0x2026380" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2026b50"><txt ptr="0x2026b50" next="(nil)" prev="(nil)" upper="0x2026380" lower="(nil)"/></fly><fly ptr="0x2027760" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2027f60"><txt ptr="0x2027f60" next="(nil)" prev="(nil)" upper="0x2027760" lower="(nil)"/></fly><fly ptr="0x2028100" next="(nil)" prev="(nil)" upper="(nil)" lower="0x20285f0"><txt ptr="0x20285f0" next="(nil)" prev="(nil)" upper="0x2028100" lower="(nil)"/></fly><fly ptr="0x20287c0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x20295f0"><txt ptr="0x20295f0" next="(nil)" prev="(nil)" upper="0x20287c0" lower="(nil)"/></fly><fly ptr="0x202a190" next="(nil)" prev="(nil)" upper="(nil)" lower="0x202a8a0"><txt ptr="0x202a8a0" next="(nil)" prev="(nil)" upper="0x202a190" lower="(nil)"/></fly><fly ptr="0x202a600" next="(nil)" prev="(nil)" upper="(nil)" lower="0x202afe0"><txt ptr="0x202afe0" next="(nil)" prev="(nil)" upper="0x202a600" lower="(nil)"/></fly><fly ptr="0x202ad40" next="(nil)" prev="(nil)" upper="(nil)" lower="0x202b670"><txt ptr="0x202b670" next="(nil)" prev="(nil)" upper="0x202ad40" lower="(nil)"/></fly><fly ptr="0x202b3d0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x202bd00"><txt ptr="0x202bd00" next="(nil)" prev="(nil)" upper="0x202b3d0" lower="(nil)"/></fly><fly ptr="0x202ba60" next="(nil)" prev="(nil)" upper="(nil)" lower="0x202c3f0"><txt ptr="0x202c3f0" next="(nil)" prev="(nil)" upper="0x202ba60" lower="(nil)"/></fly><fly ptr="0x202c180" next="(nil)" prev="(nil)" upper="(nil)" lower="0x202cb70"><txt ptr="0x202cb70" next="(nil)" prev="(nil)" upper="0x202c180" lower="(nil)"/></fly><fly ptr="0x202ccf0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x202d3b0"><txt ptr="0x202d3b0" next="(nil)" prev="(nil)" upper="0x202ccf0" lower="(nil)"/></fly><fly ptr="0x202d100" next="(nil)" prev="(nil)" upper="(nil)" lower="0x202dae0"><txt ptr="0x202dae0" next="(nil)" prev="(nil)" upper="0x202d100" lower="(nil)"/></fly><fly ptr="0x202d800" next="(nil)" prev="(nil)" upper="(nil)" lower="0x202e130"><txt ptr="0x202e130" next="(nil)" prev="(nil)" upper="0x202d800" lower="(nil)"/></fly><fly ptr="0x202de90" next="(nil)" prev="(nil)" upper="(nil)" lower="0x202e7c0"><txt ptr="0x202e7c0" next="(nil)" prev="(nil)" upper="0x202de90" lower="(nil)"/></fly></anchored>A subgraph H=(C,E|C) induced by the set * is a k-core if and only if the degree of every node *induced in H is greater or equal than k (**), and H is the maximum subgraph with this property. A vertex i has shell index k if it belongs to the k-core but not to (k+1)-core. A k-shell * is composed by all the vertices whose shell index is k. The maximum value k such that*is not empty is denoted kmax. The k-core is thus the union of all shells*with *. Each connected set of vertices having the same shell index c is a cluster *, where the corresponding set of edges are those connecting vertices of the cluster. Each shell*is thus composed by clusters *, such that*, where* is the number of clusters in*. The k-core decomposition therefore identifies progressively internal cores and decomposes the networks layer by layer, revealing the structure of the different k-shells from the outmost one to the most internal one, as shown bellow with our software framework in the Figure 3.<Finish/></txt><txt ptr="0x7f2e2c0705e0" next="0x7f2e2c0706f0" prev="0x7f2e2c0704d0" upper="0x7f2e2c094c00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0706f0" next="0x7f2e2c070800" prev="0x7f2e2c0705e0" upper="0x7f2e2c094c00" lower="(nil)"><anchored><fly ptr="0x1af4bd0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1af96a0"><txt ptr="0x1af96a0" next="(nil)" prev="(nil)" upper="0x1af4bd0" lower="(nil)"/></fly></anchored>Figure 3: Sketch of the k-core decomposition for a small graph. The color on the vertices distinguish different k-shells.<Finish/></txt><txt ptr="0x7f2e2c070800" next="0x7f2e2c070910" prev="0x7f2e2c0706f0" upper="0x7f2e2c094c00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c070910" next="(nil)" prev="0x7f2e2c070800" upper="0x7f2e2c094c00" lower="(nil)" follow="0x7f2e2c070a20">To sum up, the k-core decomposition consists in identifying particular subsets of the network, called k-cores, each one obtained by a recursive pruning strategy. In other words, the k-core is obtained by recursively removing all the vertices of degree less than k, until all vertices in the remaining graph have at least degree k. The k-core decomposition therefore provides a probe to study the hierarchical properties of large scale networks, focusing on the network's regions of increasing centrality and connectedness properties.<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099540" next="(nil)" prev="0x7f2e2c094b40" upper="0x7f2e2c092700" lower="0x7f2e2c070090"><txt ptr="0x7f2e2c070090" next="(nil)" prev="(nil)" upper="0x7f2e2c099540" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c0927e0" next="0x7f2e2c0928c0" prev="0x7f2e2c092700" upper="0x1af44a0" lower="0x7f2e2c094cc0"><body ptr="0x7f2e2c094cc0" next="0x7f2e2c099600" prev="(nil)" upper="0x7f2e2c0927e0" lower="0x7f2e2c0868b8"><section ptr="0x7f2e2c0868b8" next="(nil)" prev="(nil)" upper="0x7f2e2c094cc0" lower="0x7f2e2c087640" follow="0x7f2e2c0869b0" precede="0x7f2e2c0867c0"><column ptr="0x7f2e2c087640" next="(nil)" prev="(nil)" upper="0x7f2e2c0868b8" lower="0x7f2e2c094d80"><body ptr="0x7f2e2c094d80" next="(nil)" prev="(nil)" upper="0x7f2e2c087640" lower="0x7f2e2c070a20"><txt ptr="0x7f2e2c070a20" next="0x7f2e2c070c40" prev="(nil)" upper="0x7f2e2c094d80" lower="(nil)" precede="0x7f2e2c070910">To sum up, the k-core decomposition consists in identifying particular subsets of the network, called k-cores, each one obtained by a recursive pruning strategy. In other words, the k-core is obtained by recursively removing all the vertices of degree less than k, until all vertices in the remaining graph have at least degree k. The k-core decomposition therefore provides a probe to study the hierarchical properties of large scale networks, focusing on the network's regions of increasing centrality and connectedness properties.<Finish/></txt><txt ptr="0x7f2e2c070c40" next="0x7f2e2c070d50" prev="0x7f2e2c070a20" upper="0x7f2e2c094d80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c070d50" next="0x7f2e2c070e60" prev="0x7f2e2c070c40" upper="0x7f2e2c094d80" lower="(nil)">2.2.4 Identifying prominent nodes using biased random walks<Finish/></txt><txt ptr="0x7f2e2c070e60" next="0x7f2e2c071098" prev="0x7f2e2c070d50" upper="0x7f2e2c094d80" lower="(nil)">The classic Random Walk Algorithm generally traverses the graph, moving to a random neighbor with probability 1-p, and jumping to a random node with probability p.<Finish/></txt><txt ptr="0x7f2e2c071098" next="0x7f2e2c0711a8" prev="0x7f2e2c070e60" upper="0x7f2e2c094d80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0711a8" next="0x7f2e2c0712b8" prev="0x7f2e2c071098" upper="0x7f2e2c094d80" lower="(nil)">The simplest intuition about prominent entities in a network is that they have a large number of connections. Therefore we expect the degree of a node to play an major role in determining the importance of a node.<Finish/></txt><txt ptr="0x7f2e2c0712b8" next="0x7f2e2c0713c8" prev="0x7f2e2c0711a8" upper="0x7f2e2c094d80" lower="(nil)">A good first indication of importance could be the degree centrality: <Finish/></txt><txt ptr="0x7f2e2c0713c8" next="0x7f2e2c0714d8" prev="0x7f2e2c0712b8" upper="0x7f2e2c094d80" lower="(nil)"><anchored><fly ptr="0x20381d0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x20389d0"><txt ptr="0x20389d0" next="(nil)" prev="(nil)" upper="0x20381d0" lower="(nil)"/></fly></anchored>****  *** (Equation 1)<Finish/></txt><txt ptr="0x7f2e2c0714d8" next="0x7f2e2c0715e8" prev="0x7f2e2c0713c8" upper="0x7f2e2c094d80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0715e8" next="0x7f2e2c0716f8" prev="0x7f2e2c0714d8" upper="0x7f2e2c094d80" lower="(nil)">However, as we stated previously, there may be some entities in the network with many connections, that are not important, and the inverse could also be true. <Finish/></txt><txt ptr="0x7f2e2c0716f8" next="0x7f2e2c071808" prev="0x7f2e2c0715e8" upper="0x7f2e2c094d80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c071808" next="0x7f2e2c071918" prev="0x7f2e2c0716f8" upper="0x7f2e2c094d80" lower="(nil)">In their work Takes and Kosters [1] introduced the concept of a node's neighborhood density, based on the notion of triadic closure. The concept of triadic closure states that the majority of all friendships formed within a network takes place between two people who have at least one friend in common[8]. The probability increases with the number of common acquaintances as well as with the degree of a node. This phenomenon also known as a preferential attachment.<Finish/></txt><txt ptr="0x7f2e2c071918" next="0x7f2e2c071a28" prev="0x7f2e2c071808" upper="0x7f2e2c094d80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c071a28" next="0x7f2e2c071b38" prev="0x7f2e2c071918" upper="0x7f2e2c094d80" lower="(nil)">More generally, Takes and Kosters [1] argue that the friends of prominent nodes have more connections in common than regular nodes. They call this concept a node's neighborhood density (nd):<Finish/></txt><txt ptr="0x7f2e2c071b38" next="0x7f2e2c071c48" prev="0x7f2e2c071a28" upper="0x7f2e2c094d80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c071c48" next="0x7f2e2c071d58" prev="0x7f2e2c071b38" upper="0x7f2e2c094d80" lower="(nil)"><anchored><fly ptr="0x203eb90" next="(nil)" prev="(nil)" upper="(nil)" lower="0x203f350"><txt ptr="0x203f350" next="(nil)" prev="(nil)" upper="0x203eb90" lower="(nil)"/></fly></anchored>******   (Equation 2)<Finish/></txt><txt ptr="0x7f2e2c071d58" next="0x7f2e2c071e68" prev="0x7f2e2c071c48" upper="0x7f2e2c094d80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c071e68" next="0x7f2e2c0720a0" prev="0x7f2e2c071d58" upper="0x7f2e2c094d80" lower="(nil)">The numerator in the equation 2 defines the number of common connections, whereas the denominator normalizes the result so that it is independent of the degree of node v or the degree of node w. <Finish/></txt><txt ptr="0x7f2e2c0720a0" next="0x7f2e2c0721b0" prev="0x7f2e2c071e68" upper="0x7f2e2c094d80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0721b0" next="0x7f2e2c0722c0" prev="0x7f2e2c0720a0" upper="0x7f2e2c094d80" lower="(nil)"><anchored><fly ptr="0x2040be0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2042c50"><txt ptr="0x2042c50" next="(nil)" prev="(nil)" upper="0x2040be0" lower="(nil)"/></fly></anchored>Frank Takes and Walter Kosters believe that a combination of the two measures above, may be able to efficiently identify the various prominent nodes. Therefore, given a current node v, they define the probability P(w) of selecting a node w in the neighborhood * is equal to: <Finish/></txt><txt ptr="0x7f2e2c0722c0" next="0x7f2e2c0723d0" prev="0x7f2e2c0721b0" upper="0x7f2e2c094d80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0723d0" next="0x7f2e2c0724e0" prev="0x7f2e2c0722c0" upper="0x7f2e2c094d80" lower="(nil)"><anchored><fly ptr="0x2044360" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2044b80"><txt ptr="0x2044b80" next="(nil)" prev="(nil)" upper="0x2044360" lower="(nil)"/></fly></anchored>******   (Equation 3)<Finish/></txt><txt ptr="0x7f2e2c0724e0" next="0x7f2e2c0725f0" prev="0x7f2e2c0723d0" upper="0x7f2e2c094d80" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0725f0" next="(nil)" prev="0x7f2e2c0724e0" upper="0x7f2e2c094d80" lower="(nil)" follow="0x7f2e2c08a060"><anchored><fly ptr="0x2046410" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2046be0"><txt ptr="0x2046be0" next="(nil)" prev="(nil)" upper="0x2046410" lower="(nil)"/></fly></anchored>The Biased Random Walk takes as input an unweighted graph G(V,E) and parameters N, p, and *, and outputs a scalar value for each node v in V in the graph, representing its importance. N represent the number of steps in the random walk algorithm, p is the jumping probability, and *is used as a weight to focus either on the degree centrality and the neighborhood density.<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099600" next="(nil)" prev="0x7f2e2c094cc0" upper="0x7f2e2c0927e0" lower="0x7f2e2c070b30"><txt ptr="0x7f2e2c070b30" next="(nil)" prev="(nil)" upper="0x7f2e2c099600" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c0928c0" next="0x7f2e2c0929a0" prev="0x7f2e2c0927e0" upper="0x1af44a0" lower="0x7f2e2c094e40"><body ptr="0x7f2e2c094e40" next="0x7f2e2c0996c0" prev="(nil)" upper="0x7f2e2c0928c0" lower="0x7f2e2c0869b0"><section ptr="0x7f2e2c0869b0" next="(nil)" prev="(nil)" upper="0x7f2e2c094e40" lower="0x7f2e2c087708" follow="0x7f2e2c086aa8" precede="0x7f2e2c0868b8"><column ptr="0x7f2e2c087708" next="(nil)" prev="(nil)" upper="0x7f2e2c0869b0" lower="0x7f2e2c094f00"><body ptr="0x7f2e2c094f00" next="(nil)" prev="(nil)" upper="0x7f2e2c087708" lower="0x7f2e2c08a060"><txt ptr="0x7f2e2c08a060" next="0x7f2e2c072920" prev="(nil)" upper="0x7f2e2c094f00" lower="(nil)" precede="0x7f2e2c0725f0"><anchored><fly ptr="0x20468d0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2047370"><txt ptr="0x2047370" next="(nil)" prev="(nil)" upper="0x20468d0" lower="(nil)"/></fly></anchored>The Biased Random Walk takes as input an unweighted graph G(V,E) and parameters N, p, and *, and outputs a scalar value for each node v in V in the graph, representing its importance. N represent the number of steps in the random walk algorithm, p is the jumping probability, and *is used as a weight to focus either on the degree centrality and the neighborhood density.<Finish/></txt><txt ptr="0x7f2e2c072920" next="0x7f2e2c072a30" prev="0x7f2e2c08a060" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c072a30" next="0x7f2e2c072b40" prev="0x7f2e2c072920" upper="0x7f2e2c094f00" lower="(nil)"><anchored><fly ptr="0x204aa10" next="(nil)" prev="(nil)" upper="(nil)" lower="0x204a390"><txt ptr="0x204a390" next="(nil)" prev="(nil)" upper="0x204aa10" lower="(nil)"/></fly></anchored>Setting the value of * to 1 is roughly the same result as degree centrality, whereas a value of 0 turned out to give 0% success. This is because the degree plays a significant role in identifying a node's prominence, and very low degree nodes can still get a high neighborhood density score.<Finish/></txt><txt ptr="0x7f2e2c072b40" next="0x7f2e2c072c50" prev="0x7f2e2c072a30" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c072c50" next="0x7f2e2c072d60" prev="0x7f2e2c072b40" upper="0x7f2e2c094f00" lower="(nil)"><anchored><fly ptr="0x204c440" next="(nil)" prev="(nil)" upper="(nil)" lower="0x204ca90"><txt ptr="0x204ca90" next="(nil)" prev="(nil)" upper="0x204c440" lower="(nil)"/></fly><fly ptr="0x204c7b0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x204d080"><txt ptr="0x204d080" next="(nil)" prev="(nil)" upper="0x204c7b0" lower="(nil)"/></fly></anchored>In our experiments, we follow the advice given by Takes and Kosters [1] where they set *, and *, and the number of iterations N should be significantly larger than the number of nodes n by at least a factor 10 or 100. <Finish/></txt><txt ptr="0x7f2e2c072d60" next="0x7f2e2c072e70" prev="0x7f2e2c072c50" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c072e70" next="0x7f2e2c0730a8" prev="0x7f2e2c072d60" upper="0x7f2e2c094f00" lower="(nil)">Pseudo-Code Biased Random Walks<Finish/></txt><txt ptr="0x7f2e2c0730a8" next="0x7f2e2c0731b8" prev="0x7f2e2c072e70" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0731b8" next="0x7f2e2c0732c8" prev="0x7f2e2c0730a8" upper="0x7f2e2c094f00" lower="(nil)"><anchored><fly ptr="0x2050fb0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x20516a0"><txt ptr="0x20516a0" next="(nil)" prev="(nil)" upper="0x2050fb0" lower="(nil)"/></fly></anchored>1: Input: Graph G(V,E), N, p,*<Finish/></txt><txt ptr="0x7f2e2c0732c8" next="0x7f2e2c0733d8" prev="0x7f2e2c0731b8" upper="0x7f2e2c094f00" lower="(nil)"><anchored><fly ptr="0x2052260" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2052980"><txt ptr="0x2052980" next="(nil)" prev="(nil)" upper="0x2052260" lower="(nil)"/></fly></anchored>2: Output f[ ], containing the importance value f[v] for each node*<Finish/></txt><txt ptr="0x7f2e2c0733d8" next="0x7f2e2c0734e8" prev="0x7f2e2c0732c8" upper="0x7f2e2c094f00" lower="(nil)"><anchored><fly ptr="0x2053540" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2053c60"><txt ptr="0x2053c60" next="(nil)" prev="(nil)" upper="0x2053540" lower="(nil)"/></fly></anchored>3: *for* do<Finish/></txt><txt ptr="0x7f2e2c0734e8" next="0x7f2e2c0735f8" prev="0x7f2e2c0733d8" upper="0x7f2e2c094f00" lower="(nil)">4: **f[v] ← 0<Finish/></txt><txt ptr="0x7f2e2c0735f8" next="0x7f2e2c073708" prev="0x7f2e2c0734e8" upper="0x7f2e2c094f00" lower="(nil)">5: *end for<Finish/></txt><txt ptr="0x7f2e2c073708" next="0x7f2e2c073818" prev="0x7f2e2c0735f8" upper="0x7f2e2c094f00" lower="(nil)">6: *i ← 0<Finish/></txt><txt ptr="0x7f2e2c073818" next="0x7f2e2c073928" prev="0x7f2e2c073708" upper="0x7f2e2c094f00" lower="(nil)">7: *v ← RandomNodeFrom(V)<Finish/></txt><txt ptr="0x7f2e2c073928" next="0x7f2e2c073a38" prev="0x7f2e2c073818" upper="0x7f2e2c094f00" lower="(nil)">8: *While ( i &lt; N ) do<Finish/></txt><txt ptr="0x7f2e2c073a38" next="0x7f2e2c073b48" prev="0x7f2e2c073928" upper="0x7f2e2c094f00" lower="(nil)">9: **f[v] ← f[v] + 1/N<Finish/></txt><txt ptr="0x7f2e2c073b48" next="0x7f2e2c073c58" prev="0x7f2e2c073a38" upper="0x7f2e2c094f00" lower="(nil)">10:**if( rand(0,1) &gt; p ) then<Finish/></txt><txt ptr="0x7f2e2c073c58" next="0x7f2e2c073d68" prev="0x7f2e2c073b48" upper="0x7f2e2c094f00" lower="(nil)"><anchored><fly ptr="0x205ae60" next="(nil)" prev="(nil)" upper="(nil)" lower="0x205b600"><txt ptr="0x205b600" next="(nil)" prev="(nil)" upper="0x205ae60" lower="(nil)"/></fly></anchored>11:***v ← BiasedSelectFrom( N(v),*)<Finish/></txt><txt ptr="0x7f2e2c073d68" next="0x7f2e2c073e78" prev="0x7f2e2c073c58" upper="0x7f2e2c094f00" lower="(nil)">12: **else<Finish/></txt><txt ptr="0x7f2e2c073e78" next="0x7f2e2c0740b0" prev="0x7f2e2c073d68" upper="0x7f2e2c094f00" lower="(nil)">13:***v ← RandomNodeFrom( V )<Finish/></txt><txt ptr="0x7f2e2c0740b0" next="0x7f2e2c0741c0" prev="0x7f2e2c073e78" upper="0x7f2e2c094f00" lower="(nil)">14:**end if<Finish/></txt><txt ptr="0x7f2e2c0741c0" next="0x7f2e2c0742d0" prev="0x7f2e2c0740b0" upper="0x7f2e2c094f00" lower="(nil)">15:**i ← i + 1<Finish/></txt><txt ptr="0x7f2e2c0742d0" next="0x7f2e2c0743e0" prev="0x7f2e2c0741c0" upper="0x7f2e2c094f00" lower="(nil)">16: *end While<Finish/></txt><txt ptr="0x7f2e2c0743e0" next="0x7f2e2c0744f0" prev="0x7f2e2c0742d0" upper="0x7f2e2c094f00" lower="(nil)">17: return f[ ]<Finish/></txt><txt ptr="0x7f2e2c0744f0" next="0x7f2e2c074600" prev="0x7f2e2c0743e0" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c074600" next="0x7f2e2c074710" prev="0x7f2e2c0744f0" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c074710" next="0x7f2e2c074820" prev="0x7f2e2c074600" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c074820" next="0x7f2e2c074930" prev="0x7f2e2c074710" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c074930" next="0x7f2e2c074a40" prev="0x7f2e2c074820" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c074a40" next="0x7f2e2c074b50" prev="0x7f2e2c074930" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c074b50" next="0x7f2e2c074c60" prev="0x7f2e2c074a40" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c074c60" next="0x7f2e2c074d70" prev="0x7f2e2c074b50" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c074d70" next="0x7f2e2c074e80" prev="0x7f2e2c074c60" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c074e80" next="(nil)" prev="0x7f2e2c074d70" upper="0x7f2e2c094f00" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c0996c0" next="(nil)" prev="0x7f2e2c094e40" upper="0x7f2e2c0928c0" lower="0x7f2e2c072810"><txt ptr="0x7f2e2c072810" next="(nil)" prev="(nil)" upper="0x7f2e2c0996c0" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c0929a0" next="0x7f2e2c092a80" prev="0x7f2e2c0928c0" upper="0x1af44a0" lower="0x7f2e2c076008"><body ptr="0x7f2e2c076008" next="0x7f2e2c099780" prev="(nil)" upper="0x7f2e2c0929a0" lower="0x7f2e2c086aa8"><section ptr="0x7f2e2c086aa8" next="(nil)" prev="(nil)" upper="0x7f2e2c076008" lower="0x7f2e2c0877d0" follow="0x7f2e2c086ba0" precede="0x7f2e2c0869b0"><column ptr="0x7f2e2c0877d0" next="(nil)" prev="(nil)" upper="0x7f2e2c086aa8" lower="0x7f2e2c0760c8"><body ptr="0x7f2e2c0760c8" next="(nil)" prev="(nil)" upper="0x7f2e2c0877d0" lower="0x7f2e2c0750b8"><txt ptr="0x7f2e2c0750b8" next="0x7f2e2c0752d8" prev="(nil)" upper="0x7f2e2c0760c8" lower="(nil)">2.2.5 Profiling core periphery structure by random walkers<Finish/></txt><txt ptr="0x7f2e2c0752d8" next="0x7f2e2c0753e8" prev="0x7f2e2c0750b8" upper="0x7f2e2c0760c8" lower="(nil)"><anchored><fly ptr="0x204cc50" next="(nil)" prev="(nil)" upper="(nil)" lower="0x206a3f0"><txt ptr="0x206a3f0" next="(nil)" prev="(nil)" upper="0x204cc50" lower="(nil)"/></fly><fly ptr="0x206a630" next="(nil)" prev="(nil)" upper="(nil)" lower="0x206abf0"><txt ptr="0x206abf0" next="(nil)" prev="(nil)" upper="0x206a630" lower="(nil)"/></fly></anchored>The core-periphery profile algorithm provides a topological portrait of a network graph G(V,E) where * is the number of nodes, and * is the number of edges. <Finish/></txt><txt ptr="0x7f2e2c0753e8" next="0x7f2e2c0754f8" prev="0x7f2e2c0752d8" upper="0x7f2e2c0760c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0754f8" next="0x7f2e2c075608" prev="0x7f2e2c0753e8" upper="0x7f2e2c0760c8" lower="(nil)"><anchored><fly ptr="0x206c3f0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x206ca30"><txt ptr="0x206ca30" next="(nil)" prev="(nil)" upper="0x206c3f0" lower="(nil)"/></fly></anchored>A numerical indicator, the coreness *, k=1,2,...,n, is attributed to each node, which for an undirected network is defined by the algorithm bellow. This coreness value highlights the node rank and role, and provides both a global network portrait as well as an individual characterization of each node.<Finish/></txt><txt ptr="0x7f2e2c075608" next="0x7f2e2c075718" prev="0x7f2e2c0754f8" upper="0x7f2e2c0760c8" lower="(nil)"><anchored><fly ptr="0x206dd20" next="(nil)" prev="(nil)" upper="(nil)" lower="0x206e3b0"><txt ptr="0x206e3b0" next="(nil)" prev="(nil)" upper="0x206dd20" lower="(nil)"/></fly></anchored>*******(Equation 1)<Finish/></txt><txt ptr="0x7f2e2c075718" next="0x7f2e2c075828" prev="0x7f2e2c075608" upper="0x7f2e2c0760c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c075828" next="0x7f2e2c075938" prev="0x7f2e2c075718" upper="0x7f2e2c0760c8" lower="(nil)">This numerical indicator of core-periphery separation, is based on the fact that core nodes have large closeness centrality, in other words a small average distance from the rest of the network. Therefore, this profile indicator is particularly adapted to networks with dense cores and a sparsely connected periphery. In other words, this method is aimed at revealing whether there exists a central core through which most of the network flow passes. It quantifies to what extent an actual centralization exists. By grouping all nodes with coreness below a prescribed threshold, we obtain the periphery. Moreover, it can reveal the peculiar role of some specific nodes. The core-periphery paradigm models the network as the union of a dense core with a sparsely connected periphery, highlighting the role of each node on the basis of its topological position. <Finish/></txt><txt ptr="0x7f2e2c075938" next="0x7f2e2c075a48" prev="0x7f2e2c075828" upper="0x7f2e2c0760c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c075a48" next="0x7f2e2c075b58" prev="0x7f2e2c075938" upper="0x7f2e2c0760c8" lower="(nil)">In their paper, Rossa, Dercole and Piccardi [4] have derived the core-periphery profile, by an iterative algorithm, a standard random walk model which provides the information to effectively asses the profile.<Finish/></txt><txt ptr="0x7f2e2c075b58" next="0x7f2e2c075c68" prev="0x7f2e2c075a48" upper="0x7f2e2c0760c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c075c68" next="0x7f2e2c075d78" prev="0x7f2e2c075b58" upper="0x7f2e2c0760c8" lower="(nil)">For an undirected network, they have defined the strength of a node i as<Finish/></txt><txt ptr="0x7f2e2c075d78" next="0x7f2e2c075e88" prev="0x7f2e2c075c68" upper="0x7f2e2c0760c8" lower="(nil)"><anchored><fly ptr="0x2073680" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2073d70"><txt ptr="0x2073d70" next="(nil)" prev="(nil)" upper="0x2073680" lower="(nil)"/></fly><fly ptr="0x2073f30" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2074590"><txt ptr="0x2074590" next="(nil)" prev="(nil)" upper="0x2073f30" lower="(nil)"/></fly></anchored>*****(Equation 2)   where*is the weight between nodes i and j.<Finish/></txt><txt ptr="0x7f2e2c075e88" next="0x7f2e2c0770c0" prev="0x7f2e2c075d78" upper="0x7f2e2c0760c8" lower="(nil)">The persistence probability as the fraction of weight emanating from the nodes of S remaining within S. <Finish/></txt><txt ptr="0x7f2e2c0770c0" next="0x7f2e2c0771d0" prev="0x7f2e2c075e88" upper="0x7f2e2c0760c8" lower="(nil)"><anchored><fly ptr="0x2075c70" next="(nil)" prev="(nil)" upper="(nil)" lower="0x20763f0"><txt ptr="0x20763f0" next="(nil)" prev="(nil)" upper="0x2075c70" lower="(nil)"/></fly></anchored>*******(Equation 3)<Finish/></txt><txt ptr="0x7f2e2c0771d0" next="0x7f2e2c0772e0" prev="0x7f2e2c0770c0" upper="0x7f2e2c0760c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0772e0" next="0x7f2e2c0773f0" prev="0x7f2e2c0771d0" upper="0x7f2e2c0760c8" lower="(nil)">Pseudo-Code algorithm used to implement the algorithm:<Finish/></txt><txt ptr="0x7f2e2c0773f0" next="0x7f2e2c077500" prev="0x7f2e2c0772e0" upper="0x7f2e2c0760c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c077500" next="0x7f2e2c077610" prev="0x7f2e2c0773f0" upper="0x7f2e2c0760c8" lower="(nil)">Step 1: Select a random node i among those with minimal strength.<Finish/></txt><txt ptr="0x7f2e2c077610" next="0x7f2e2c077720" prev="0x7f2e2c077500" upper="0x7f2e2c0760c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c077720" next="0x7f2e2c077830" prev="0x7f2e2c077610" upper="0x7f2e2c0760c8" lower="(nil)">Step 2: k = 2,3, …, n: Select the node that minimize the persistence probability.<Finish/></txt><txt ptr="0x7f2e2c077830" next="0x7f2e2c077940" prev="0x7f2e2c077720" upper="0x7f2e2c0760c8" lower="(nil)"><anchored><fly ptr="0x207aa80" next="(nil)" prev="(nil)" upper="(nil)" lower="0x207bfe0"><txt ptr="0x207bfe0" next="(nil)" prev="(nil)" upper="0x207aa80" lower="(nil)"/></fly></anchored>If it is not unique, select at random one of the node with minimal strength * among those attaining the minimum. <Finish/></txt><txt ptr="0x7f2e2c077940" next="0x7f2e2c077a50" prev="0x7f2e2c077830" upper="0x7f2e2c0760c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c077a50" next="0x7f2e2c077b60" prev="0x7f2e2c077940" upper="0x7f2e2c0760c8" lower="(nil)"><anchored><fly ptr="0x207d800" next="(nil)" prev="(nil)" upper="(nil)" lower="0x207e3e0"><txt ptr="0x207e3e0" next="(nil)" prev="(nil)" upper="0x207d800" lower="(nil)"/></fly></anchored>****   ***(Equation 4)<Finish/></txt><txt ptr="0x7f2e2c077b60" next="0x7f2e2c077c70" prev="0x7f2e2c077a50" upper="0x7f2e2c0760c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c077c70" next="0x7f2e2c077d80" prev="0x7f2e2c077b60" upper="0x7f2e2c0760c8" lower="(nil)">Intuitively, we start from the least connected node because peripheral nodes have less connections than core nodes. Then we grow our periphery set S by adding one node at a time. We use the persistence probability to quantify this. The inclusion of the most connected nodes are typically left at the end.<Finish/></txt><txt ptr="0x7f2e2c077d80" next="(nil)" prev="0x7f2e2c077c70" upper="0x7f2e2c0760c8" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099780" next="(nil)" prev="0x7f2e2c076008" upper="0x7f2e2c0929a0" lower="0x7f2e2c0751c8"><txt ptr="0x7f2e2c0751c8" next="(nil)" prev="(nil)" upper="0x7f2e2c099780" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c092a80" next="0x7f2e2c092b60" prev="0x7f2e2c0929a0" upper="0x1af44a0" lower="0x7f2e2c076188"><body ptr="0x7f2e2c076188" next="0x7f2e2c099840" prev="(nil)" upper="0x7f2e2c092a80" lower="0x7f2e2c086ba0"><section ptr="0x7f2e2c086ba0" next="(nil)" prev="(nil)" upper="0x7f2e2c076188" lower="0x7f2e2c087898" follow="0x7f2e2c086c98" precede="0x7f2e2c086aa8"><column ptr="0x7f2e2c087898" next="(nil)" prev="(nil)" upper="0x7f2e2c086ba0" lower="0x7f2e2c076248"><body ptr="0x7f2e2c076248" next="(nil)" prev="(nil)" upper="0x7f2e2c087898" lower="0x7f2e2c077e90"><txt ptr="0x7f2e2c077e90" next="0x7f2e2c0781d8" prev="(nil)" upper="0x7f2e2c076248" lower="(nil)">Chapter 3: Requirements, design and implementation<Finish/></txt><txt ptr="0x7f2e2c0781d8" next="0x7f2e2c0782e8" prev="0x7f2e2c077e90" upper="0x7f2e2c076248" lower="(nil)">3.1 Requirements definition<Finish/></txt><txt ptr="0x7f2e2c0782e8" next="0x7f2e2c0783f8" prev="0x7f2e2c0781d8" upper="0x7f2e2c076248" lower="(nil)">In this section, I will list the requirements for our software system and describe what the system should do, the services that it provides and the constraints. Small scenarios to describe the different functional and non-functional requirements. Prior to the use cases diagrams and prior to the use cases scenarios development phases.<Finish/></txt><txt ptr="0x7f2e2c0783f8" next="0x7f2e2c078508" prev="0x7f2e2c0782e8" upper="0x7f2e2c076248" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c078508" next="0x7f2e2c078618" prev="0x7f2e2c0783f8" upper="0x7f2e2c076248" lower="(nil)">Requirement 1: The Software application should offer an online-service in the form of a web application using browsers and client-server architecture. The application should simultaneously handle multiple users and be responsive and robust.<Finish/></txt><txt ptr="0x7f2e2c078618" next="0x7f2e2c078728" prev="0x7f2e2c078508" upper="0x7f2e2c076248" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c078728" next="0x7f2e2c078838" prev="0x7f2e2c078618" upper="0x7f2e2c076248" lower="(nil)">Requirement 2: The user should be able to create its own network using a simple text editor, in the .txt format. The format should be intuitive and easy to understand, close to the concept of edge-list graph notation. Something like follow: [Source_Node][Space_Character ][Destination_Node] for each line in the document network file. The user should be able to enter any comments prefixing them by # character if necessary and specify the prominent nodes if they are known prefixing them by the @ character.<Finish/></txt><txt ptr="0x7f2e2c078838" next="0x7f2e2c078948" prev="0x7f2e2c078728" upper="0x7f2e2c076248" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c078948" next="0x7f2e2c078a58" prev="0x7f2e2c078838" upper="0x7f2e2c076248" lower="(nil)"># Network Graph<Finish/></txt><txt ptr="0x7f2e2c078a58" next="0x7f2e2c078b68" prev="0x7f2e2c078948" upper="0x7f2e2c076248" lower="(nil)"># Simple Star Network (6 nodes, 5 edges)<Finish/></txt><txt ptr="0x7f2e2c078b68" next="0x7f2e2c078c78" prev="0x7f2e2c078a58" upper="0x7f2e2c076248" lower="(nil)">node1 node2<Finish/></txt><txt ptr="0x7f2e2c078c78" next="0x7f2e2c078d88" prev="0x7f2e2c078b68" upper="0x7f2e2c076248" lower="(nil)">node1 node3<Finish/></txt><txt ptr="0x7f2e2c078d88" next="0x7f2e2c078e98" prev="0x7f2e2c078c78" upper="0x7f2e2c076248" lower="(nil)">node1 node4<Finish/></txt><txt ptr="0x7f2e2c078e98" next="0x7f2e2c0790d0" prev="0x7f2e2c078d88" upper="0x7f2e2c076248" lower="(nil)">node1 node5<Finish/></txt><txt ptr="0x7f2e2c0790d0" next="0x7f2e2c0791e0" prev="0x7f2e2c078e98" upper="0x7f2e2c076248" lower="(nil)">node1 node6<Finish/></txt><txt ptr="0x7f2e2c0791e0" next="0x7f2e2c0792f0" prev="0x7f2e2c0790d0" upper="0x7f2e2c076248" lower="(nil)">@knownProminentNodes<Finish/></txt><txt ptr="0x7f2e2c0792f0" next="0x7f2e2c079400" prev="0x7f2e2c0791e0" upper="0x7f2e2c076248" lower="(nil)">node1<Finish/></txt><txt ptr="0x7f2e2c079400" next="0x7f2e2c079510" prev="0x7f2e2c0792f0" upper="0x7f2e2c076248" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c079510" next="0x7f2e2c079620" prev="0x7f2e2c079400" upper="0x7f2e2c076248" lower="(nil)">Requirement 3: The client should be able to visualize its network using different layouts, and gather statistics and metrics such as the size (number of nodes, edges), average path, density in percentage, diameter, centralization measures (degree, closeness, ...).These indicators should be grouped and presented cleanly in table with a label in front of each value. Also, the degree distribution of the network should be displayed in a bar char graphic coupled with a curve form to offer a global view and reveal any obvious hiding statistical distribution, such as Poisson, logarithmic, exponential.<Finish/></txt><txt ptr="0x7f2e2c079620" next="0x7f2e2c079730" prev="0x7f2e2c079510" upper="0x7f2e2c076248" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c079730" next="0x7f2e2c079840" prev="0x7f2e2c079620" upper="0x7f2e2c076248" lower="(nil)">Requirement 4:<Finish/></txt><txt ptr="0x7f2e2c079840" next="0x7f2e2c079950" prev="0x7f2e2c079730" upper="0x7f2e2c076248" lower="(nil)">Algorithms detection<Finish/></txt><txt ptr="0x7f2e2c079950" next="0x7f2e2c079a60" prev="0x7f2e2c079840" upper="0x7f2e2c076248" lower="(nil)">The application should offer to the user different algorithms to detect patterns and structures and identify prominent nodes. If these prominent nodes in the network are known then the web application should list indicators about the performance and precision obtained by each algorithm such as the percentage of prominent nodes found.<Finish/></txt><txt ptr="0x7f2e2c079a60" next="0x7f2e2c079b70" prev="0x7f2e2c079950" upper="0x7f2e2c076248" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c079b70" next="0x7f2e2c079c80" prev="0x7f2e2c079a60" upper="0x7f2e2c076248" lower="(nil)">Requirement 5:<Finish/></txt><txt ptr="0x7f2e2c079c80" next="(nil)" prev="0x7f2e2c079b70" upper="0x7f2e2c076248" lower="(nil)">The interaction with the application should be intuitive and easy to use. The user should find the same feel and touch as a desktop application while using a any simple browser.<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099840" next="(nil)" prev="0x7f2e2c076188" upper="0x7f2e2c092a80" lower="0x7f2e2c0780c8"><txt ptr="0x7f2e2c0780c8" next="(nil)" prev="(nil)" upper="0x7f2e2c099840" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c092b60" next="0x7f2e2c092c40" prev="0x7f2e2c092a80" upper="0x1af44a0" lower="0x7f2e2c076308"><body ptr="0x7f2e2c076308" next="0x7f2e2c099900" prev="(nil)" upper="0x7f2e2c092b60" lower="0x7f2e2c086c98"><section ptr="0x7f2e2c086c98" next="(nil)" prev="(nil)" upper="0x7f2e2c076308" lower="0x7f2e2c087960" follow="0x7f2e2c086d90" precede="0x7f2e2c086ba0"><column ptr="0x7f2e2c087960" next="(nil)" prev="(nil)" upper="0x7f2e2c086c98" lower="0x7f2e2c0763c8"><body ptr="0x7f2e2c0763c8" next="(nil)" prev="(nil)" upper="0x7f2e2c087960" lower="0x7f2e2c079d90"><txt ptr="0x7f2e2c079d90" next="0x7f2e2c07a0d8" prev="(nil)" upper="0x7f2e2c0763c8" lower="(nil)">3.1 Client-Server Web Architecture<Finish/></txt><txt ptr="0x7f2e2c07a0d8" next="0x7f2e2c07a1e8" prev="0x7f2e2c079d90" upper="0x7f2e2c0763c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07a1e8" next="0x7f2e2c07a2f8" prev="0x7f2e2c07a0d8" upper="0x7f2e2c0763c8" lower="(nil)">Our web application is a collection of web components that work together to provide specific functionalities on a web. We use the Java EE Enterprise Edition built on the Java SE Standard Edition, and our web components are either a Servlet or a Java Server Page (JSP) page. <Finish/></txt><txt ptr="0x7f2e2c07a2f8" next="0x7f2e2c07a408" prev="0x7f2e2c07a1e8" upper="0x7f2e2c0763c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07a408" next="0x7f2e2c07a518" prev="0x7f2e2c07a2f8" upper="0x7f2e2c0763c8" lower="(nil)">The web application and its constituent components are managed and executed inside the web container, also called a servlet container, which provides additional features to the web application such as security. We have chosen the Tomcat7 container which also serves the role of the web server.<Finish/></txt><txt ptr="0x7f2e2c07a518" next="0x7f2e2c07a628" prev="0x7f2e2c07a408" upper="0x7f2e2c0763c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07a628" next="0x7f2e2c07a738" prev="0x7f2e2c07a518" upper="0x7f2e2c0763c8" lower="(nil)">When our web server Tomcat7 gets a request for specific functionality that a particular web component (such as a servlet/bean or a JSP page) can provide, our web server forwards the request to the servlet container in which the web component resides. That is, all requests to our web component that is responsible for processing data and generating the dynamic content are mediated by the Tomcat7 servlet container, as shown in Figure 4.<Finish/></txt><txt ptr="0x7f2e2c07a738" next="0x7f2e2c07a848" prev="0x7f2e2c07a628" upper="0x7f2e2c0763c8" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a08290"/><SwAnchoredDrawObject ptr="0x1a29640"/><SwAnchoredDrawObject ptr="0x1a2b070"/><SwAnchoredDrawObject ptr="0x1a33da0"/><SwAnchoredDrawObject ptr="0x1a38b50"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07a848" next="0x7f2e2c07a958" prev="0x7f2e2c07a738" upper="0x7f2e2c0763c8" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x18f9f30"/><SwAnchoredDrawObject ptr="0x1a2bfc0"/><SwAnchoredDrawObject ptr="0x1a2b9f0"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07a958" next="0x7f2e2c07aa68" prev="0x7f2e2c07a848" upper="0x7f2e2c0763c8" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a18850"/><SwAnchoredDrawObject ptr="0x1a28160"/><SwAnchoredDrawObject ptr="0x1a01040"/><SwAnchoredDrawObject ptr="0x1a44c40"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07aa68" next="0x7f2e2c07ab78" prev="0x7f2e2c07a958" upper="0x7f2e2c0763c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07ab78" next="0x7f2e2c07ac88" prev="0x7f2e2c07aa68" upper="0x7f2e2c0763c8" lower="(nil)">Figure 4: Request for a dynamic content.<Finish/></txt><txt ptr="0x7f2e2c07ac88" next="0x7f2e2c07ad98" prev="0x7f2e2c07ab78" upper="0x7f2e2c0763c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07ad98" next="0x7f2e2c07aea8" prev="0x7f2e2c07ac88" upper="0x7f2e2c0763c8" lower="(nil)">The Java EE Servlet and JSP specification describe the service contract that a servlet container must provide and specify how a servlet should use those services. In terms of implementation, a servlet is a Java class that acts as a dynamic web resource.<Finish/></txt><txt ptr="0x7f2e2c07aea8" next="0x7f2e2c07b0e0" prev="0x7f2e2c07ad98" upper="0x7f2e2c0763c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07b0e0" next="0x7f2e2c07b1f0" prev="0x7f2e2c07aea8" upper="0x7f2e2c0763c8" lower="(nil)">When the client (web browser) makes a request, the web server (Tomcat) sees the resource path and determines that the resource requested by the user is not a static page and so forwards the request to the container (Tomcat).<Finish/></txt><txt ptr="0x7f2e2c07b1f0" next="0x7f2e2c07b300" prev="0x7f2e2c07b0e0" upper="0x7f2e2c0763c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07b300" next="0x7f2e2c07b410" prev="0x7f2e2c07b1f0" upper="0x7f2e2c0763c8" lower="(nil)">The web container loads the corresponding servlet class and instantiates it. Only a single instance of the servlet is created, and concurrent requests to the servlet are executed on the same instance. Every client request generates a new pair of request and response objects. The container runs multiple threads to process multiple requests to a single instance of the servlet.<Finish/></txt><txt ptr="0x7f2e2c07b410" next="0x7f2e2c07b520" prev="0x7f2e2c07b300" upper="0x7f2e2c0763c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07b520" next="0x7f2e2c07b630" prev="0x7f2e2c07b410" upper="0x7f2e2c0763c8" lower="(nil)">3.2 Model View Controller Pattern<Finish/></txt><txt ptr="0x7f2e2c07b630" next="0x7f2e2c07b740" prev="0x7f2e2c07b520" upper="0x7f2e2c0763c8" lower="(nil)">The Model-View-Controller (MVC) architecture was developed in the 1970's in the smalltalk group. In our design we use the MVC architecture to clearly separate applications, both logically and physically, into three parts. <Finish/></txt><txt ptr="0x7f2e2c07b740" next="0x7f2e2c07b850" prev="0x7f2e2c07b630" upper="0x7f2e2c0763c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07b850" next="0x7f2e2c07b960" prev="0x7f2e2c07b740" upper="0x7f2e2c0763c8" lower="(nil)">The Model is not only the data, but any enforced constraints on the data. Our model has been implemented as a collection of servlets/beans to perform different algorithm calculations.<Finish/></txt><txt ptr="0x7f2e2c07b960" next="0x7f2e2c07ba70" prev="0x7f2e2c07b850" upper="0x7f2e2c0763c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07ba70" next="0x7f2e2c07bb80" prev="0x7f2e2c07b960" upper="0x7f2e2c0763c8" lower="(nil)">The View part of the application that prepares and presents results to the user has been mainly accomplished by means of a JSP, JavaScript and CSS.<Finish/></txt><txt ptr="0x7f2e2c07bb80" next="0x7f2e2c07bc90" prev="0x7f2e2c07ba70" upper="0x7f2e2c0763c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07bc90" next="(nil)" prev="0x7f2e2c07bb80" upper="0x7f2e2c0763c8" lower="(nil)" follow="0x7f2e2c08a170">The Controller controls the interaction between the user and the application. The controller has been achieved by means of a special servlet, a subclass that extends extends the abstract HttpServlet interface. This servlet accepts requests and implements the business logic.<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099900" next="(nil)" prev="0x7f2e2c076308" upper="0x7f2e2c092b60" lower="0x7f2e2c079ea0"><txt ptr="0x7f2e2c079ea0" next="(nil)" prev="(nil)" upper="0x7f2e2c099900" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c092c40" next="0x7f2e2c092d20" prev="0x7f2e2c092b60" upper="0x1af44a0" lower="0x7f2e2c076488"><body ptr="0x7f2e2c076488" next="0x7f2e2c0999c0" prev="(nil)" upper="0x7f2e2c092c40" lower="0x7f2e2c086d90"><section ptr="0x7f2e2c086d90" next="(nil)" prev="(nil)" upper="0x7f2e2c076488" lower="0x7f2e2c087a28" follow="0x7f2e2c086e88" precede="0x7f2e2c086c98"><column ptr="0x7f2e2c087a28" next="(nil)" prev="(nil)" upper="0x7f2e2c086d90" lower="0x7f2e2c076548"><body ptr="0x7f2e2c076548" next="(nil)" prev="(nil)" upper="0x7f2e2c087a28" lower="0x7f2e2c08a170"><txt ptr="0x7f2e2c08a170" next="0x7f2e2c07c0e8" prev="(nil)" upper="0x7f2e2c076548" lower="(nil)" precede="0x7f2e2c07bc90">The Controller controls the interaction between the user and the application. The controller has been achieved by means of a special servlet, a subclass that extends extends the abstract HttpServlet interface. This servlet accepts requests and implements the business logic.<Finish/></txt><txt ptr="0x7f2e2c07c0e8" next="0x7f2e2c07c1f8" prev="0x7f2e2c08a170" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07c1f8" next="0x7f2e2c07c308" prev="0x7f2e2c07c0e8" upper="0x7f2e2c076548" lower="(nil)">The intent use of MVC pattern is to reduce the coupling among the three parts of an application, making our application easier to develop and maintain.<Finish/></txt><txt ptr="0x7f2e2c07c308" next="0x7f2e2c07c418" prev="0x7f2e2c07c1f8" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07c418" next="0x7f2e2c07c528" prev="0x7f2e2c07c308" upper="0x7f2e2c076548" lower="(nil)">In an MVC Web application, a browser submits requests to the controller, which consults the model (which in turn stores and fetches the data and performs the calculation). Next, the model reports results to the controller and, indirectly, to the view. The controller then instructs the view to produce a result document, which is transmitted to the client for display.<Finish/></txt><txt ptr="0x7f2e2c07c528" next="0x7f2e2c07c638" prev="0x7f2e2c07c418" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07c638" next="0x7f2e2c07c748" prev="0x7f2e2c07c528" upper="0x7f2e2c076548" lower="(nil)">To provide our web-application with rich user interfaces and responsiveness similar to those of desktop applications, we use the Ajax technology. Ajax is meant to significantly increase the speed of user requests that update only a small part of the displayed document. It does this by having the server provide only a relative small part of the document, the part that must change. This shortens the transmission time because the document being transmitted and rendered is much smaller. It provides great improvements in the richness of the web user experience, with applications that have frequent browser-server interactions.<Finish/></txt><txt ptr="0x7f2e2c07c748" next="0x7f2e2c07c858" prev="0x7f2e2c07c638" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07c858" next="0x7f2e2c07c968" prev="0x7f2e2c07c748" upper="0x7f2e2c076548" lower="(nil)">The request from the browser to the server are asynchronous as shown in the Figure 5. This means that when a browser requests a new part of its displayed document from the server, it does not need to lock while it waits for the response. Both the user and the browser can continue to do something useful during the time it takes to fetch and render the new document part.<Finish/></txt><txt ptr="0x7f2e2c07c968" next="0x7f2e2c07ca78" prev="0x7f2e2c07c858" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a4d740"/><SwAnchoredDrawObject ptr="0x17e6090"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07ca78" next="0x7f2e2c07cb88" prev="0x7f2e2c07c968" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a4ca50"/><SwAnchoredDrawObject ptr="0x1a5fb20"/><SwAnchoredDrawObject ptr="0x1a64e20"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07cb88" next="0x7f2e2c07cc98" prev="0x7f2e2c07ca78" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07cc98" next="0x7f2e2c07cda8" prev="0x7f2e2c07cb88" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07cda8" next="0x7f2e2c07ceb8" prev="0x7f2e2c07cc98" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07ceb8" next="0x7f2e2c07d0f0" prev="0x7f2e2c07cda8" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a642e0"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07d0f0" next="0x7f2e2c07d200" prev="0x7f2e2c07ceb8" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a58ee0"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07d200" next="0x7f2e2c07d310" prev="0x7f2e2c07d0f0" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a5e950"/><SwAnchoredDrawObject ptr="0x1a62d90"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07d310" next="0x7f2e2c07d420" prev="0x7f2e2c07d200" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a624d0"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07d420" next="0x7f2e2c07d530" prev="0x7f2e2c07d310" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a18450"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07d530" next="0x7f2e2c07d640" prev="0x7f2e2c07d420" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07d640" next="0x7f2e2c07d750" prev="0x7f2e2c07d530" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07d750" next="0x7f2e2c07d860" prev="0x7f2e2c07d640" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07d860" next="0x7f2e2c07d970" prev="0x7f2e2c07d750" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07d970" next="0x7f2e2c07da80" prev="0x7f2e2c07d860" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a427b0"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07da80" next="0x7f2e2c07db90" prev="0x7f2e2c07d970" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a6bc60"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07db90" next="0x7f2e2c07dca0" prev="0x7f2e2c07da80" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a713c0"/><SwAnchoredDrawObject ptr="0x1a62350"/><SwAnchoredDrawObject ptr="0x1a6dbf0"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07dca0" next="0x7f2e2c07ddb0" prev="0x7f2e2c07db90" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07ddb0" next="0x7f2e2c07dec0" prev="0x7f2e2c07dca0" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07dec0" next="0x7f2e2c07e000" prev="0x7f2e2c07ddb0" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a6b620"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07e000" next="0x7f2e2c07e110" prev="0x7f2e2c07dec0" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07e110" next="0x7f2e2c07e220" prev="0x7f2e2c07e000" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x159f720"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07e220" next="0x7f2e2c07e330" prev="0x7f2e2c07e110" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07e330" next="0x7f2e2c07e440" prev="0x7f2e2c07e220" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a66c30"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07e440" next="0x7f2e2c07e550" prev="0x7f2e2c07e330" upper="0x7f2e2c076548" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a65180"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07e550" next="0x7f2e2c07e660" prev="0x7f2e2c07e440" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07e660" next="0x7f2e2c07e770" prev="0x7f2e2c07e550" upper="0x7f2e2c076548" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07e770" next="(nil)" prev="0x7f2e2c07e660" upper="0x7f2e2c076548" lower="(nil)">Figure 5: Ajax browser-server interactions<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c0999c0" next="(nil)" prev="0x7f2e2c076488" upper="0x7f2e2c092c40" lower="0x7f2e2c07beb0"><txt ptr="0x7f2e2c07beb0" next="(nil)" prev="(nil)" upper="0x7f2e2c0999c0" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c092d20" next="0x7f2e2c092e00" prev="0x7f2e2c092c40" upper="0x1af44a0" lower="0x7f2e2c076608"><body ptr="0x7f2e2c076608" next="0x7f2e2c099a80" prev="(nil)" upper="0x7f2e2c092d20" lower="0x7f2e2c086e88"><section ptr="0x7f2e2c086e88" next="(nil)" prev="(nil)" upper="0x7f2e2c076608" lower="0x7f2e2c087af0" follow="0x7f2e2c062008" precede="0x7f2e2c086d90"><column ptr="0x7f2e2c087af0" next="(nil)" prev="(nil)" upper="0x7f2e2c086e88" lower="0x7f2e2c0766c8"><body ptr="0x7f2e2c0766c8" next="(nil)" prev="(nil)" upper="0x7f2e2c087af0" lower="0x7f2e2c07e880"><txt ptr="0x7f2e2c07e880" next="0x7f2e2c07eaa0" prev="(nil)" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07eaa0" next="0x7f2e2c07ebb0" prev="0x7f2e2c07e880" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07ebb0" next="0x7f2e2c07ecc0" prev="0x7f2e2c07eaa0" upper="0x7f2e2c0766c8" lower="(nil)">Through its name, Ajax uses JavaScript (JQuery) as its primary programming language. The x in Ajax represents XML. Usually, an Ajax request results in the server returning the requested data in an XML form. However other forms of data also are often returned. In our web-application, we exchange JSON object. JSON stands for JavaScript Object Notation. It is self-describing and easy to use. This notation is in a text format that can be read by any programming language.<Finish/></txt><txt ptr="0x7f2e2c07ecc0" next="0x7f2e2c07edd0" prev="0x7f2e2c07ebb0" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07edd0" next="0x7f2e2c07f008" prev="0x7f2e2c07ecc0" upper="0x7f2e2c0766c8" lower="(nil)">To summarize, our design has one main JSP page (620 lines) with JavaScript (1800 lines) and CSS (140 lines) which implement the View part in the MVC model. The view (JSP) is composed of five tabs, where each tab offer a functionality. This main page is fully loaded the first time a request is made to the server and then partially updated for each request using the AJAX technology and JSON objects. This makes the web application more responsive, similar to those of desktop applications as the request is handled asynchronously and only few parts of the page are updated.<Finish/></txt><txt ptr="0x7f2e2c07f008" next="0x7f2e2c07f118" prev="0x7f2e2c07edd0" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07f118" next="0x7f2e2c07f228" prev="0x7f2e2c07f008" upper="0x7f2e2c0766c8" lower="(nil)">Each algorithm is grouped in a separate package with its own servlet(s). Therefore we ended with 6 packages and 8 servlets, namely, <Finish/></txt><txt ptr="0x7f2e2c07f228" next="0x7f2e2c07f338" prev="0x7f2e2c07f118" upper="0x7f2e2c0766c8" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a777c0"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07f338" next="0x7f2e2c07f448" prev="0x7f2e2c07f228" upper="0x7f2e2c0766c8" lower="(nil)">Controller (1 servlet 200 lines)           (Controller in the MVC)<Finish/></txt><txt ptr="0x7f2e2c07f448" next="0x7f2e2c07f558" prev="0x7f2e2c07f338" upper="0x7f2e2c0766c8" lower="(nil)"><anchored><SwAnchoredDrawObject ptr="0x1a6fad0"/></anchored><Finish/></txt><txt ptr="0x7f2e2c07f558" next="0x7f2e2c07f668" prev="0x7f2e2c07f448" upper="0x7f2e2c0766c8" lower="(nil)">Metrics and Statistics (1 servlet, 230 lines)<Finish/></txt><txt ptr="0x7f2e2c07f668" next="0x7f2e2c07f778" prev="0x7f2e2c07f558" upper="0x7f2e2c0766c8" lower="(nil)">Closeness and Degree Algorithm (1 servlet, 300 lines)<Finish/></txt><txt ptr="0x7f2e2c07f778" next="0x7f2e2c07f888" prev="0x7f2e2c07f668" upper="0x7f2e2c0766c8" lower="(nil)">K-Core Algorithm (3 servlets, 400 lines)                                                  (Model in the MVC)<Finish/></txt><txt ptr="0x7f2e2c07f888" next="0x7f2e2c07f998" prev="0x7f2e2c07f778" upper="0x7f2e2c0766c8" lower="(nil)">BRW Biased Random Walk Algorithm (1 servlet, 500 lines)<Finish/></txt><txt ptr="0x7f2e2c07f998" next="0x7f2e2c07faa8" prev="0x7f2e2c07f888" upper="0x7f2e2c0766c8" lower="(nil)">PCP Profile Core Periphery Algorithm (1 servlet, 650 lines)<Finish/></txt><txt ptr="0x7f2e2c07faa8" next="0x7f2e2c07fbb8" prev="0x7f2e2c07f998" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c07fbb8" next="0x7f2e2c07fcc8" prev="0x7f2e2c07faa8" upper="0x7f2e2c0766c8" lower="(nil)">The class Controller is indeed a very special servlet as it implements the Controller in our MVC model. This subclass extends the abstract HttpServlet interface and therefore overrides the doPost method, to handle HTTP POST requests. The HTTP POST method allows the client to send data of unlimited length to the web server a single time.<Finish/></txt><txt ptr="0x7f2e2c07fcc8" next="0x7f2e2c07fdd8" prev="0x7f2e2c07fbb8" upper="0x7f2e2c0766c8" lower="(nil)">Basically, the Controller class receives the user request data, in a JSON object form, identifies the request nature, forwards it to the adequate algorithm (Bean(s)) to perform the calculation, retrieve the results and then sends them back to the user.<Finish/></txt><txt ptr="0x7f2e2c07fdd8" next="0x7f2e2c060010" prev="0x7f2e2c07fcc8" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c060010" next="0x7f2e2c060120" prev="0x7f2e2c07fdd8" upper="0x7f2e2c0766c8" lower="(nil)">See Appendix 2, for more details about the UML design and implementation.<Finish/></txt><txt ptr="0x7f2e2c060120" next="0x7f2e2c060230" prev="0x7f2e2c060010" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c060230" next="0x7f2e2c060340" prev="0x7f2e2c060120" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c060340" next="0x7f2e2c060450" prev="0x7f2e2c060230" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c060450" next="0x7f2e2c060560" prev="0x7f2e2c060340" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c060560" next="0x7f2e2c060670" prev="0x7f2e2c060450" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c060670" next="0x7f2e2c060780" prev="0x7f2e2c060560" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c060780" next="0x7f2e2c060890" prev="0x7f2e2c060670" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c060890" next="0x7f2e2c0609a0" prev="0x7f2e2c060780" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0609a0" next="0x7f2e2c060ab0" prev="0x7f2e2c060890" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c060ab0" next="0x7f2e2c060bc0" prev="0x7f2e2c0609a0" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c060bc0" next="0x7f2e2c060cd0" prev="0x7f2e2c060ab0" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c060cd0" next="0x7f2e2c060de0" prev="0x7f2e2c060bc0" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c060de0" next="0x7f2e2c061018" prev="0x7f2e2c060cd0" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c061018" next="0x7f2e2c061128" prev="0x7f2e2c060de0" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c061128" next="(nil)" prev="0x7f2e2c061018" upper="0x7f2e2c0766c8" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099a80" next="(nil)" prev="0x7f2e2c076608" upper="0x7f2e2c092d20" lower="0x7f2e2c07e990"><txt ptr="0x7f2e2c07e990" next="(nil)" prev="(nil)" upper="0x7f2e2c099a80" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c092e00" next="0x7f2e2c092ee0" prev="0x7f2e2c092d20" upper="0x1af44a0" lower="0x7f2e2c076788"><body ptr="0x7f2e2c076788" next="0x7f2e2c099b40" prev="(nil)" upper="0x7f2e2c092e00" lower="0x7f2e2c062008"><section ptr="0x7f2e2c062008" next="(nil)" prev="(nil)" upper="0x7f2e2c076788" lower="0x7f2e2c087bb8" follow="0x7f2e2c062100" precede="0x7f2e2c086e88"><column ptr="0x7f2e2c087bb8" next="(nil)" prev="(nil)" upper="0x7f2e2c062008" lower="0x7f2e2c076848"><body ptr="0x7f2e2c076848" next="(nil)" prev="(nil)" upper="0x7f2e2c087bb8" lower="0x7f2e2c061238"><txt ptr="0x7f2e2c061238" next="0x7f2e2c061458" prev="(nil)" upper="0x7f2e2c076848" lower="(nil)">Chapter 4: Validation and verification<Finish/></txt><txt ptr="0x7f2e2c061458" next="0x7f2e2c061568" prev="0x7f2e2c061238" upper="0x7f2e2c076848" lower="(nil)">Testing can only show the presence of errors, not their absence. [Edsger Dijkstra]<Finish/></txt><txt ptr="0x7f2e2c061568" next="0x7f2e2c061678" prev="0x7f2e2c061458" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c061678" next="0x7f2e2c061788" prev="0x7f2e2c061568" upper="0x7f2e2c076848" lower="(nil)">During the whole development, I adopted the Test-Driven Development (TDD) approach to develop the program in which I interleave testing and code development. Essentially, I develop the code incrementally, along with a test for that increment. I do not move to the next increment until the code that I have developed passes its test. Once all tests run successfully, then I move on implementing the next chunk of functionality.<Finish/></txt><txt ptr="0x7f2e2c061788" next="0x7f2e2c061898" prev="0x7f2e2c061678" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c061898" next="0x7f2e2c0619a8" prev="0x7f2e2c061788" upper="0x7f2e2c076848" lower="(nil)">These development testing phases are carried out at different levels of granularity. For instance, if I code a new feature, then I start by carrying out a Unit testing of that feature (class, method ).<Finish/></txt><txt ptr="0x7f2e2c0619a8" next="0x7f2e2c061ab8" prev="0x7f2e2c061898" upper="0x7f2e2c076848" lower="(nil)">Now this new feature added belongs to a component, therefore it is important to carry out a component testing, where I focus on testing component interfaces. Finally, the system as whole is tested (system testing), to ensure that some or all the components in the system are integrated and interact properly.<Finish/></txt><txt ptr="0x7f2e2c061ab8" next="0x7f2e2c061bc8" prev="0x7f2e2c0619a8" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c061bc8" next="0x7f2e2c061cd8" prev="0x7f2e2c061ab8" upper="0x7f2e2c076848" lower="(nil)">Also whenever possible, I involved users to test the software system to gather input and advice on the system. It is practically impossible for me as a developer to replicate the system's working environment, as tests in the developer's environment are inevitably artificial.<Finish/></txt><txt ptr="0x7f2e2c061cd8" next="0x7f2e2c061de8" prev="0x7f2e2c061bc8" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c061de8" next="0x7f2e2c063020" prev="0x7f2e2c061cd8" upper="0x7f2e2c076848" lower="(nil)">During development, there are two major concerns that require constant testing as features are implemented and added to the initial application. The primer is to ensure that new features, algorithms will not potentially destabilize the initial software by behaving in an unexpected way (stability). The second is to make sure that the results returned are indeed correct and in the range and precision required and defined by the requirements (correctness).<Finish/></txt><txt ptr="0x7f2e2c063020" next="0x7f2e2c063130" prev="0x7f2e2c061de8" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c063130" next="0x7f2e2c063240" prev="0x7f2e2c063020" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c063240" next="0x7f2e2c063350" prev="0x7f2e2c063130" upper="0x7f2e2c076848" lower="(nil)">4.1 Stability<Finish/></txt><txt ptr="0x7f2e2c063350" next="0x7f2e2c063460" prev="0x7f2e2c063240" upper="0x7f2e2c076848" lower="(nil)">Important to test thoroughly each function for unexpected inputs and boundary-cases, and anticipate the misbehavior of certain users. A number of these were achieved through the use of test-cases, included in appendix 1: Test Cases, JUnits.<Finish/></txt><txt ptr="0x7f2e2c063460" next="0x7f2e2c063570" prev="0x7f2e2c063350" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c063570" next="0x7f2e2c063680" prev="0x7f2e2c063460" upper="0x7f2e2c076848" lower="(nil)">4.2 Correctness<Finish/></txt><txt ptr="0x7f2e2c063680" next="0x7f2e2c063790" prev="0x7f2e2c063570" upper="0x7f2e2c076848" lower="(nil)">To ensure the algorithm return the correct result, deliberate input networks were used with the web-application, and the outcome was compared with the expected result. (See appendix 1)<Finish/></txt><txt ptr="0x7f2e2c063790" next="0x7f2e2c0638a0" prev="0x7f2e2c063680" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0638a0" next="0x7f2e2c0639b0" prev="0x7f2e2c063790" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0639b0" next="0x7f2e2c063ac0" prev="0x7f2e2c0638a0" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c063ac0" next="0x7f2e2c063bd0" prev="0x7f2e2c0639b0" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c063bd0" next="0x7f2e2c063ce0" prev="0x7f2e2c063ac0" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c063ce0" next="0x7f2e2c063df0" prev="0x7f2e2c063bd0" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c063df0" next="0x7f2e2c064028" prev="0x7f2e2c063ce0" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c064028" next="0x7f2e2c064138" prev="0x7f2e2c063df0" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c064138" next="0x7f2e2c064248" prev="0x7f2e2c064028" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c064248" next="0x7f2e2c064358" prev="0x7f2e2c064138" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c064358" next="(nil)" prev="0x7f2e2c064248" upper="0x7f2e2c076848" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099b40" next="(nil)" prev="0x7f2e2c076788" upper="0x7f2e2c092e00" lower="0x7f2e2c061348"><txt ptr="0x7f2e2c061348" next="(nil)" prev="(nil)" upper="0x7f2e2c099b40" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c092ee0" next="0x7f2e2c067008" prev="0x7f2e2c092e00" upper="0x1af44a0" lower="0x7f2e2c076908"><body ptr="0x7f2e2c076908" next="0x7f2e2c099c00" prev="(nil)" upper="0x7f2e2c092ee0" lower="0x7f2e2c062100"><section ptr="0x7f2e2c062100" next="(nil)" prev="(nil)" upper="0x7f2e2c076908" lower="0x7f2e2c087c80" follow="0x7f2e2c0621f8" precede="0x7f2e2c062008"><column ptr="0x7f2e2c087c80" next="(nil)" prev="(nil)" upper="0x7f2e2c062100" lower="0x7f2e2c0769c8"><body ptr="0x7f2e2c0769c8" next="(nil)" prev="(nil)" upper="0x7f2e2c087c80" lower="0x7f2e2c064468"><txt ptr="0x7f2e2c064468" next="0x7f2e2c064688" prev="(nil)" upper="0x7f2e2c0769c8" lower="(nil)">Chapter 5: Algorithms' evaluation<Finish/></txt><txt ptr="0x7f2e2c064688" next="0x7f2e2c064798" prev="0x7f2e2c064468" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c064798" next="0x7f2e2c0648a8" prev="0x7f2e2c064688" upper="0x7f2e2c0769c8" lower="(nil)"><anchored><fly ptr="0x20992a0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x20adb80"><txt ptr="0x20adb80" next="(nil)" prev="(nil)" upper="0x20992a0" lower="(nil)"/></fly><fly ptr="0x20ad050" next="(nil)" prev="(nil)" upper="(nil)" lower="0x20af5f0"><txt ptr="0x20af5f0" next="(nil)" prev="(nil)" upper="0x20ad050" lower="(nil)"/></fly><fly ptr="0x2084420" next="(nil)" prev="(nil)" upper="(nil)" lower="0x2084850"><txt ptr="0x2084850" next="(nil)" prev="(nil)" upper="0x2084420" lower="(nil)"/></fly><fly ptr="0x20ce4f0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x20ce990"><txt ptr="0x20ce990" next="(nil)" prev="(nil)" upper="0x20ce4f0" lower="(nil)"/></fly></anchored>Comparing with the Ground-Truth prominent nodes in a network G(V,E), where *the number of nodes. This evaluation implies that we know exactly who are the prominent nodes in the datasets used. Let's assume that amongst the nodes in the network, there is a set * ,of size *, which contains the nodes that are considered to be prominent. Naturally, *, k is a lot smaller than n, as only a small portion of the nodes is typically considered to be prominent.<Finish/></txt><txt ptr="0x7f2e2c0648a8" next="0x7f2e2c0649b8" prev="0x7f2e2c064798" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0649b8" next="0x7f2e2c064ac8" prev="0x7f2e2c0648a8" upper="0x7f2e2c0769c8" lower="(nil)">In order to determine the importance of an algorithm, we sort the list of nodes by their importance value/criteria in descending order, and retrieve the subset I to be the top l nodes of the sorted list outputted by each algorithm.<Finish/></txt><txt ptr="0x7f2e2c064ac8" next="0x7f2e2c064bd8" prev="0x7f2e2c0649b8" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c064bd8" next="0x7f2e2c064ce8" prev="0x7f2e2c064ac8" upper="0x7f2e2c0769c8" lower="(nil)">Next, we define the following criteria: <Finish/></txt><txt ptr="0x7f2e2c064ce8" next="0x7f2e2c064df8" prev="0x7f2e2c064bd8" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c064df8" next="0x7f2e2c065030" prev="0x7f2e2c064ce8" upper="0x7f2e2c0769c8" lower="(nil)">Precision:<Finish/></txt><txt ptr="0x7f2e2c065030" next="0x7f2e2c065140" prev="0x7f2e2c064df8" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c065140" next="0x7f2e2c065250" prev="0x7f2e2c065030" upper="0x7f2e2c0769c8" lower="(nil)"><anchored><fly ptr="0x2084fb0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x20cefd0"><txt ptr="0x20cefd0" next="(nil)" prev="(nil)" upper="0x2084fb0" lower="(nil)"/></fly></anchored>****  ***   (Equation 1)<Finish/></txt><txt ptr="0x7f2e2c065250" next="0x7f2e2c065360" prev="0x7f2e2c065140" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c065360" next="0x7f2e2c065470" prev="0x7f2e2c065250" upper="0x7f2e2c0769c8" lower="(nil)">Recall:<Finish/></txt><txt ptr="0x7f2e2c065470" next="0x7f2e2c065580" prev="0x7f2e2c065360" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c065580" next="0x7f2e2c065690" prev="0x7f2e2c065470" upper="0x7f2e2c0769c8" lower="(nil)"><anchored><fly ptr="0x20cf230" next="(nil)" prev="(nil)" upper="(nil)" lower="0x20cf810"><txt ptr="0x20cf810" next="(nil)" prev="(nil)" upper="0x20cf230" lower="(nil)"/></fly></anchored>****  *** (Equation 2)<Finish/></txt><txt ptr="0x7f2e2c065690" next="0x7f2e2c0657a0" prev="0x7f2e2c065580" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0657a0" next="0x7f2e2c0658b0" prev="0x7f2e2c065690" upper="0x7f2e2c0769c8" lower="(nil)">F-measure:<Finish/></txt><txt ptr="0x7f2e2c0658b0" next="0x7f2e2c0659c0" prev="0x7f2e2c0657a0" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0659c0" next="0x7f2e2c065ad0" prev="0x7f2e2c0658b0" upper="0x7f2e2c0769c8" lower="(nil)"><anchored><fly ptr="0x20cfa50" next="(nil)" prev="(nil)" upper="(nil)" lower="0x20cfff0"><txt ptr="0x20cfff0" next="(nil)" prev="(nil)" upper="0x20cfa50" lower="(nil)"/></fly></anchored>****  *** (Equation 3)<Finish/></txt><txt ptr="0x7f2e2c065ad0" next="0x7f2e2c065be0" prev="0x7f2e2c0659c0" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c065be0" next="0x7f2e2c065cf0" prev="0x7f2e2c065ad0" upper="0x7f2e2c0769c8" lower="(nil)"><anchored><fly ptr="0x20d01d0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x20d06c0"><txt ptr="0x20d06c0" next="(nil)" prev="(nil)" upper="0x20d01d0" lower="(nil)"/></fly></anchored>F-measure measures the balance between the two. Notice that if *, precision, recall and F-measure are equal.<Finish/></txt><txt ptr="0x7f2e2c065cf0" next="0x7f2e2c065e00" prev="0x7f2e2c065be0" upper="0x7f2e2c0769c8" lower="(nil)">Within the application we provide different networks datasets, (undirected and unweighted graph) varied in their nature and size. For some of these networks, the prominent nodes are exactly known, allowing us to verify and evaluate the precision and performance of the algorithms against this ground truth. The other datasets can be used to demonstrate the capability and pedagogy of the software tool developed.<Finish/></txt><txt ptr="0x7f2e2c065e00" next="0x7f2e2c066038" prev="0x7f2e2c065cf0" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c066038" next="0x7f2e2c066148" prev="0x7f2e2c065e00" upper="0x7f2e2c0769c8" lower="(nil)">We will start by describing and visualizing each of these data set, and if the prominent nodes are known, then a comparison of the algorithms are carried out.<Finish/></txt><txt ptr="0x7f2e2c066148" next="0x7f2e2c066258" prev="0x7f2e2c066038" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c066258" next="0x7f2e2c066368" prev="0x7f2e2c066148" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c066368" next="0x7f2e2c066478" prev="0x7f2e2c066258" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c066478" next="0x7f2e2c066588" prev="0x7f2e2c066368" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c066588" next="0x7f2e2c066698" prev="0x7f2e2c066478" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c066698" next="0x7f2e2c0667a8" prev="0x7f2e2c066588" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0667a8" next="0x7f2e2c0668b8" prev="0x7f2e2c066698" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0668b8" next="0x7f2e2c0669c8" prev="0x7f2e2c0667a8" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0669c8" next="(nil)" prev="0x7f2e2c0668b8" upper="0x7f2e2c0769c8" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099c00" next="(nil)" prev="0x7f2e2c076908" upper="0x7f2e2c092ee0" lower="0x7f2e2c064578"><txt ptr="0x7f2e2c064578" next="(nil)" prev="(nil)" upper="0x7f2e2c099c00" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c067008" next="0x7f2e2c0670e8" prev="0x7f2e2c092ee0" upper="0x1af44a0" lower="0x7f2e2c076a88"><body ptr="0x7f2e2c076a88" next="0x7f2e2c099cc0" prev="(nil)" upper="0x7f2e2c067008" lower="0x7f2e2c0621f8"><section ptr="0x7f2e2c0621f8" next="(nil)" prev="(nil)" upper="0x7f2e2c076a88" lower="0x7f2e2c087d48" follow="0x7f2e2c0627c8" precede="0x7f2e2c062100"><column ptr="0x7f2e2c087d48" next="(nil)" prev="(nil)" upper="0x7f2e2c0621f8" lower="0x7f2e2c076b48"><body ptr="0x7f2e2c076b48" next="(nil)" prev="(nil)" upper="0x7f2e2c087d48" lower="0x7f2e2c066ad8"><txt ptr="0x7f2e2c066ad8" next="0x7f2e2c066cf8" prev="(nil)" upper="0x7f2e2c076b48" lower="(nil)">5.1 First dataset: Zachary's karate club<Finish/></txt><txt ptr="0x7f2e2c066cf8" next="0x7f2e2c066e08" prev="0x7f2e2c066ad8" upper="0x7f2e2c076b48" lower="(nil)">Zachary's karate club: A social network of friendships between 34 members of a karate club at a US university, as described by Wayne Zachary in the 1970's. At the beginning of the study there was an incident conflict between the club president, John A., and Mr. Hi over the price of karate lessons. Mr. Hi, who wished to raise prices, claimed the authority to set his own lessons fees, since he was the instructor. John A., who wished to stabilize prices, claimed the authority to set the lesson fees since he was the club's chief administrator. As time passed the entire club became divided over this issue, which has led to a fission of the club as shown in the Figure 6.<Finish/></txt><txt ptr="0x7f2e2c066e08" next="0x7f2e2c068040" prev="0x7f2e2c066cf8" upper="0x7f2e2c076b48" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c068040" next="0x7f2e2c068150" prev="0x7f2e2c066e08" upper="0x7f2e2c076b48" lower="(nil)"><anchored><fly ptr="0x1af9a10" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1af95b0"><txt ptr="0x1af95b0" next="(nil)" prev="(nil)" upper="0x1af9a10" lower="(nil)"/></fly></anchored>Figure 6: Network visualization and Statistics of the Zachary's karate club.<Finish/></txt><txt ptr="0x7f2e2c068150" next="0x7f2e2c068260" prev="0x7f2e2c068040" upper="0x7f2e2c076b48" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c068260" next="0x7f2e2c068370" prev="0x7f2e2c068150" upper="0x7f2e2c076b48" lower="(nil)">Knowing the important major prominent actor in each group, namely, Mr. John A. and Mr. Hi, we have used this dataset to evaluate the algorithms. <Finish/></txt><txt ptr="0x7f2e2c068370" next="0x7f2e2c068480" prev="0x7f2e2c068260" upper="0x7f2e2c076b48" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c068480" next="0x7f2e2c068590" prev="0x7f2e2c068370" upper="0x7f2e2c076b48" lower="(nil)">First, let's consider the K-Core algorithm. In the clustered view of the k-core algorithm in the Figure 7, we only show the cores and edges between them, The size of the core is proportional to the number of nodes that belong to it and the width of the edge is proportional to the number of edges between cores. We can notice that the two prominent nodes in the karate-club, Mr Hi and JohnA belong to the highest k-core.<Finish/></txt><txt ptr="0x7f2e2c068590" next="0x7f2e2c0686a0" prev="0x7f2e2c068480" upper="0x7f2e2c076b48" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0686a0" next="(nil)" prev="0x7f2e2c068590" upper="0x7f2e2c076b48" lower="(nil)">Figure 8 is similar to Figure 7 as it represents the outcome of the K-Core algorithm applied to the Zachary Karate network but using the all node representation.<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099cc0" next="(nil)" prev="0x7f2e2c076a88" upper="0x7f2e2c067008" lower="0x7f2e2c066be8"><txt ptr="0x7f2e2c066be8" next="(nil)" prev="(nil)" upper="0x7f2e2c099cc0" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c0670e8" next="0x7f2e2c0671c8" prev="0x7f2e2c067008" upper="0x1af44a0" lower="0x7f2e2c076c08"><body ptr="0x7f2e2c076c08" next="0x7f2e2c099d80" prev="(nil)" upper="0x7f2e2c0670e8" lower="0x7f2e2c0627c8"><section ptr="0x7f2e2c0627c8" next="(nil)" prev="(nil)" upper="0x7f2e2c076c08" lower="0x7f2e2c06b260" follow="0x7f2e2c0629b8" precede="0x7f2e2c0621f8"><column ptr="0x7f2e2c06b260" next="(nil)" prev="(nil)" upper="0x7f2e2c0627c8" lower="0x7f2e2c06c490"><body ptr="0x7f2e2c06c490" next="(nil)" prev="(nil)" upper="0x7f2e2c06b260" lower="0x7f2e2c0687b0"><txt ptr="0x7f2e2c0687b0" next="0x7f2e2c0689d0" prev="(nil)" upper="0x7f2e2c06c490" lower="(nil)"><anchored><fly ptr="0x1af9e10" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afa1b0"><txt ptr="0x1afa1b0" next="(nil)" prev="(nil)" upper="0x1af9e10" lower="(nil)"/></fly></anchored>Figure 7: K-Core algorithm applied to the Zachary Karate club network (Core representation)<Finish/></txt><txt ptr="0x7f2e2c0689d0" next="0x7f2e2c068ae0" prev="0x7f2e2c0687b0" upper="0x7f2e2c06c490" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c068ae0" next="0x7f2e2c068bf0" prev="0x7f2e2c0689d0" upper="0x7f2e2c06c490" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c068bf0" next="0x7f2e2c068d00" prev="0x7f2e2c068ae0" upper="0x7f2e2c06c490" lower="(nil)"><anchored><fly ptr="0x1afa320" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afa6c0"><txt ptr="0x1afa6c0" next="(nil)" prev="(nil)" upper="0x1afa320" lower="(nil)"/></fly></anchored>Figure 8: K-Core algorithm applied to the Zachary Karate club network (All nodes representation) <Finish/></txt><txt ptr="0x7f2e2c068d00" next="0x7f2e2c068e10" prev="0x7f2e2c068bf0" upper="0x7f2e2c06c490" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c068e10" next="0x7f2e2c069048" prev="0x7f2e2c068d00" upper="0x7f2e2c06c490" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c069048" next="0x7f2e2c069158" prev="0x7f2e2c068e10" upper="0x7f2e2c06c490" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c069158" next="0x7f2e2c069268" prev="0x7f2e2c069048" upper="0x7f2e2c06c490" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c069268" next="(nil)" prev="0x7f2e2c069158" upper="0x7f2e2c06c490" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099d80" next="(nil)" prev="0x7f2e2c076c08" upper="0x7f2e2c0670e8" lower="0x7f2e2c0688c0"><txt ptr="0x7f2e2c0688c0" next="(nil)" prev="(nil)" upper="0x7f2e2c099d80" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c0671c8" next="0x7f2e2c0672a8" prev="0x7f2e2c0670e8" upper="0x1af44a0" lower="0x7f2e2c076d88"><body ptr="0x7f2e2c076d88" next="0x7f2e2c099e40" prev="(nil)" upper="0x7f2e2c0671c8" lower="0x7f2e2c0629b8"><section ptr="0x7f2e2c0629b8" next="(nil)" prev="(nil)" upper="0x7f2e2c076d88" lower="0x7f2e2c06b3f0" follow="0x7f2e2c062ab0" precede="0x7f2e2c0627c8"><column ptr="0x7f2e2c06b3f0" next="(nil)" prev="(nil)" upper="0x7f2e2c0629b8" lower="0x7f2e2c06c790"><body ptr="0x7f2e2c06c790" next="(nil)" prev="(nil)" upper="0x7f2e2c06b3f0" lower="0x7f2e2c069378"><txt ptr="0x7f2e2c069378" next="0x7f2e2c069598" prev="(nil)" upper="0x7f2e2c06c790" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c069598" next="0x7f2e2c0696a8" prev="0x7f2e2c069378" upper="0x7f2e2c06c790" lower="(nil)">The second algorithm applied is the Profiling Core-Periphery algorithm. We retrieve the two most prominent nodes and compare them to the ground-truth. Both are indeed correct (Precision 100%).<Finish/></txt><txt ptr="0x7f2e2c0696a8" next="0x7f2e2c0697b8" prev="0x7f2e2c069598" upper="0x7f2e2c06c790" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0697b8" next="0x7f2e2c0698c8" prev="0x7f2e2c0696a8" upper="0x7f2e2c06c790" lower="(nil)"><anchored><fly ptr="0x1afa810" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afab90"><txt ptr="0x1afab90" next="(nil)" prev="(nil)" upper="0x1afa810" lower="(nil)"/></fly></anchored>Figure 9: Profiling Core-Periphery algorithm applied to the Zachary Karate club network.<Finish/></txt><txt ptr="0x7f2e2c0698c8" next="0x7f2e2c0699d8" prev="0x7f2e2c0697b8" upper="0x7f2e2c06c790" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0699d8" next="0x7f2e2c069ae8" prev="0x7f2e2c0698c8" upper="0x7f2e2c06c790" lower="(nil)">The third algorithm applied is the Biased Random walk algorithm (Figure 10). Unfortunately, only one is correct (Precision 50%).<Finish/></txt><txt ptr="0x7f2e2c069ae8" next="0x7f2e2c069bf8" prev="0x7f2e2c0699d8" upper="0x7f2e2c06c790" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c069bf8" next="(nil)" prev="0x7f2e2c069ae8" upper="0x7f2e2c06c790" lower="(nil)"><anchored><fly ptr="0x1afad00" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afb0a0"><txt ptr="0x1afb0a0" next="(nil)" prev="(nil)" upper="0x1afad00" lower="(nil)"/></fly></anchored>Figure 10: Biased Random Walk algorithm applied to the Zachary Karate club network.<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099e40" next="(nil)" prev="0x7f2e2c076d88" upper="0x7f2e2c0671c8" lower="0x7f2e2c069488"><txt ptr="0x7f2e2c069488" next="(nil)" prev="(nil)" upper="0x7f2e2c099e40" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c0672a8" next="0x7f2e2c067388" prev="0x7f2e2c0671c8" upper="0x1af44a0" lower="0x7f2e2c076f08"><body ptr="0x7f2e2c076f08" next="0x7f2e2c099f00" prev="(nil)" upper="0x7f2e2c0672a8" lower="0x7f2e2c062ab0"><section ptr="0x7f2e2c062ab0" next="(nil)" prev="(nil)" upper="0x7f2e2c076f08" lower="0x7f2e2c06b4b8" follow="0x7f2e2c062ba8" precede="0x7f2e2c0629b8"><column ptr="0x7f2e2c06b4b8" next="(nil)" prev="(nil)" upper="0x7f2e2c062ab0" lower="0x7f2e2c06c910"><body ptr="0x7f2e2c06c910" next="(nil)" prev="(nil)" upper="0x7f2e2c06b4b8" lower="0x7f2e2c069d08"><txt ptr="0x7f2e2c069d08" next="0x7f2e2c06d050" prev="(nil)" upper="0x7f2e2c06c910" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c06d050" next="0x7f2e2c06d160" prev="0x7f2e2c069d08" upper="0x7f2e2c06c910" lower="(nil)">All the previous experiments have been summarized in the following Table 1.<Finish/></txt><txt ptr="0x7f2e2c06d160" next="0x7f2e2c06d270" prev="0x7f2e2c06d050" upper="0x7f2e2c06c910" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c06d270" next="0x7f2e2c06d380" prev="0x7f2e2c06d160" upper="0x7f2e2c06c910" lower="(nil)"><anchored><fly ptr="0x1afb1f0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afb570"><txt ptr="0x1afb570" next="(nil)" prev="(nil)" upper="0x1afb1f0" lower="(nil)"/></fly></anchored>Table 1: Summary of all the algorithms' outcome carried out on the Zachary Karate club.<Finish/></txt><txt ptr="0x7f2e2c06d380" next="0x7f2e2c06d490" prev="0x7f2e2c06d270" upper="0x7f2e2c06c910" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c06d490" next="0x7f2e2c06d5a0" prev="0x7f2e2c06d380" upper="0x7f2e2c06c910" lower="(nil)"><anchored><fly ptr="0x58017e0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x5801a30"><txt ptr="0x5801a30" next="(nil)" prev="(nil)" upper="0x58017e0" lower="(nil)"/></fly></anchored>Notice that the random walk algorithm is obtained by simply setting the p=0.5 and*, where we neglect the effect of neighborhood density effect and retain only the degree of centrality effect.<Finish/></txt><txt ptr="0x7f2e2c06d5a0" next="0x7f2e2c06d6b0" prev="0x7f2e2c06d490" upper="0x7f2e2c06c910" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c06d6b0" next="0x7f2e2c06d7c0" prev="0x7f2e2c06d5a0" upper="0x7f2e2c06c910" lower="(nil)">A visual histogram chart representation in the Figure 11 summarizes all the algorithms' performance. <Finish/></txt><txt ptr="0x7f2e2c06d7c0" next="0x7f2e2c06d8d0" prev="0x7f2e2c06d6b0" upper="0x7f2e2c06c910" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c06d8d0" next="0x7f2e2c06d9e0" prev="0x7f2e2c06d7c0" upper="0x7f2e2c06c910" lower="(nil)"><anchored><fly ptr="0x1afb6e0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afba80"><txt ptr="0x1afba80" next="(nil)" prev="(nil)" upper="0x1afb6e0" lower="(nil)"/></fly></anchored>Figure 11: Histogram Chart Algorithms' Performance (Zachary Karate Club Network)<Finish/></txt><txt ptr="0x7f2e2c06d9e0" next="0x7f2e2c06daf0" prev="0x7f2e2c06d8d0" upper="0x7f2e2c06c910" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c06daf0" next="0x7f2e2c06dc00" prev="0x7f2e2c06d9e0" upper="0x7f2e2c06c910" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c06dc00" next="0x7f2e2c06dd10" prev="0x7f2e2c06daf0" upper="0x7f2e2c06c910" lower="(nil)">From the algorithm results applied to the Zachary Karate Club, we found that the Profiling Core-Periphery algorithm outperforms the other methods and retrieves 100 % of the prominent nodes (l=k=2).<Finish/></txt><txt ptr="0x7f2e2c06dd10" next="0x7f2e2c06de20" prev="0x7f2e2c06dc00" upper="0x7f2e2c06c910" lower="(nil)">However the maximum reached par the random walk is 80% of the prominent nodes with l=k=3.<Finish/></txt><txt ptr="0x7f2e2c06de20" next="0x7f2e2c06e058" prev="0x7f2e2c06dd10" upper="0x7f2e2c06c910" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c06e058" next="(nil)" prev="0x7f2e2c06de20" upper="0x7f2e2c06c910" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c099f00" next="(nil)" prev="0x7f2e2c076f08" upper="0x7f2e2c0672a8" lower="0x7f2e2c069e18"><txt ptr="0x7f2e2c069e18" next="(nil)" prev="(nil)" upper="0x7f2e2c099f00" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c067388" next="0x7f2e2c067468" prev="0x7f2e2c0672a8" upper="0x1af44a0" lower="0x7f2e2c06c0d0"><body ptr="0x7f2e2c06c0d0" next="0x7f2e2c06f008" prev="(nil)" upper="0x7f2e2c067388" lower="0x7f2e2c062ba8"><section ptr="0x7f2e2c062ba8" next="(nil)" prev="(nil)" upper="0x7f2e2c06c0d0" lower="0x7f2e2c06b580" follow="0x7f2e2c062ca0" precede="0x7f2e2c062ab0"><column ptr="0x7f2e2c06b580" next="(nil)" prev="(nil)" upper="0x7f2e2c062ba8" lower="0x7f2e2c06ca90"><body ptr="0x7f2e2c06ca90" next="(nil)" prev="(nil)" upper="0x7f2e2c06b580" lower="0x7f2e2c06e168"><txt ptr="0x7f2e2c06e168" next="0x7f2e2c06e388" prev="(nil)" upper="0x7f2e2c06ca90" lower="(nil)">5.2 Second dataset: Thurman office<Finish/></txt><txt ptr="0x7f2e2c06e388" next="0x7f2e2c06e498" prev="0x7f2e2c06e168" upper="0x7f2e2c06ca90" lower="(nil)">Thurman spent 16 months observing the interactions among employees in the overseas office of a large international corporation. During this time, two major disputes erupted in a subgroup of fifteen people. Thurman analyzed the outcome of these disputes in terms of the network of formal and informal associations among those involved. This social network of the 15 office workers reported by Thurman (1979) is used to evaluate the algorithms. The network is shown in Figure 12.<Finish/></txt><txt ptr="0x7f2e2c06e498" next="0x7f2e2c06e5a8" prev="0x7f2e2c06e388" upper="0x7f2e2c06ca90" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c06e5a8" next="0x7f2e2c06e6b8" prev="0x7f2e2c06e498" upper="0x7f2e2c06ca90" lower="(nil)"><anchored><fly ptr="0x1afbbd0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afbf50"><txt ptr="0x1afbf50" next="(nil)" prev="(nil)" upper="0x1afbbd0" lower="(nil)"/></fly></anchored>Figure 12: Network visualization and Statistics of the Thurman office.<Finish/></txt><txt ptr="0x7f2e2c06e6b8" next="0x7f2e2c06e7c8" prev="0x7f2e2c06e5a8" upper="0x7f2e2c06ca90" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c06e7c8" next="0x7f2e2c06e8d8" prev="0x7f2e2c06e6b8" upper="0x7f2e2c06ca90" lower="(nil)">According to Thurman (1979), Pete and Emma are characterized as the center of their social circle. Therefore, Pete and Emma will be our prominent nodes to evaluate different algorithms. By applying different algorithms to this social network with l=13, 10, 5, 3 top nodes, we obtain the following results summarized in Table 2 <Finish/></txt><txt ptr="0x7f2e2c06e8d8" next="0x7f2e2c06e9e8" prev="0x7f2e2c06e7c8" upper="0x7f2e2c06ca90" lower="(nil)"><anchored><fly ptr="0x1afc0c0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afc460"><txt ptr="0x1afc460" next="(nil)" prev="(nil)" upper="0x1afc0c0" lower="(nil)"/></fly></anchored><Finish/></txt><txt ptr="0x7f2e2c06e9e8" next="(nil)" prev="0x7f2e2c06e8d8" upper="0x7f2e2c06ca90" lower="(nil)">Table 2: Summary of all the algorithms' outcomes carried out on the Thurman Office.<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06f008" next="(nil)" prev="0x7f2e2c06c0d0" upper="0x7f2e2c067388" lower="0x7f2e2c06e278"><txt ptr="0x7f2e2c06e278" next="(nil)" prev="(nil)" upper="0x7f2e2c06f008" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c067468" next="0x7f2e2c067548" prev="0x7f2e2c067388" upper="0x1af44a0" lower="0x7f2e2c06c250"><body ptr="0x7f2e2c06c250" next="0x7f2e2c06f0c8" prev="(nil)" upper="0x7f2e2c067468" lower="0x7f2e2c062ca0"><section ptr="0x7f2e2c062ca0" next="(nil)" prev="(nil)" upper="0x7f2e2c06c250" lower="0x7f2e2c06b648" follow="0x7f2e2c058108" precede="0x7f2e2c062ba8"><column ptr="0x7f2e2c06b648" next="(nil)" prev="(nil)" upper="0x7f2e2c062ca0" lower="0x7f2e2c06cc10"><body ptr="0x7f2e2c06cc10" next="(nil)" prev="(nil)" upper="0x7f2e2c06b648" lower="0x7f2e2c06eaf8"><txt ptr="0x7f2e2c06eaf8" next="0x7f2e2c06ed18" prev="(nil)" upper="0x7f2e2c06cc10" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c06ed18" next="0x7f2e2c06ee28" prev="0x7f2e2c06eaf8" upper="0x7f2e2c06cc10" lower="(nil)"><anchored><fly ptr="0x1afc5b0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afc930"><txt ptr="0x1afc930" next="(nil)" prev="(nil)" upper="0x1afc5b0" lower="(nil)"/></fly></anchored>Figure 13: K-Core algorithm applied to the Thurman Office network (Core representation)<Finish/></txt><txt ptr="0x7f2e2c06ee28" next="0x7f2e2c050060" prev="0x7f2e2c06ed18" upper="0x7f2e2c06cc10" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c050060" next="0x7f2e2c050170" prev="0x7f2e2c06ee28" upper="0x7f2e2c06cc10" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c050170" next="0x7f2e2c050280" prev="0x7f2e2c050060" upper="0x7f2e2c06cc10" lower="(nil)"><anchored><fly ptr="0x1afcaa0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afce40"><txt ptr="0x1afce40" next="(nil)" prev="(nil)" upper="0x1afcaa0" lower="(nil)"/></fly></anchored>Figure 14: K-Core algorithm applied to the Thurman Office network (All nodes representation) <Finish/></txt><txt ptr="0x7f2e2c050280" next="(nil)" prev="0x7f2e2c050170" upper="0x7f2e2c06cc10" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06f0c8" next="(nil)" prev="0x7f2e2c06c250" upper="0x7f2e2c067468" lower="0x7f2e2c06ec08"><txt ptr="0x7f2e2c06ec08" next="(nil)" prev="(nil)" upper="0x7f2e2c06f0c8" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c067548" next="0x7f2e2c067628" prev="0x7f2e2c067468" upper="0x1af44a0" lower="0x7f2e2c06c3d0"><body ptr="0x7f2e2c06c3d0" next="0x7f2e2c06f188" prev="(nil)" upper="0x7f2e2c067548" lower="0x7f2e2c058108"><section ptr="0x7f2e2c058108" next="(nil)" prev="(nil)" upper="0x7f2e2c06c3d0" lower="0x7f2e2c06b968" follow="0x7f2e2c058010" precede="0x7f2e2c062ca0"><column ptr="0x7f2e2c06b968" next="(nil)" prev="(nil)" upper="0x7f2e2c058108" lower="0x7f2e2c057240"><body ptr="0x7f2e2c057240" next="(nil)" prev="(nil)" upper="0x7f2e2c06b968" lower="0x7f2e2c050390"><txt ptr="0x7f2e2c050390" next="0x7f2e2c0505b0" prev="(nil)" upper="0x7f2e2c057240" lower="(nil)"><anchored><fly ptr="0x1afcf90" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afd310"><txt ptr="0x1afd310" next="(nil)" prev="(nil)" upper="0x1afcf90" lower="(nil)"/></fly></anchored>Figure 15: Profiling Core-Periphery algorithm applied to the Thurman Office network.<Finish/></txt><txt ptr="0x7f2e2c0505b0" next="0x7f2e2c0506c0" prev="0x7f2e2c050390" upper="0x7f2e2c057240" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0506c0" next="0x7f2e2c0507d0" prev="0x7f2e2c0505b0" upper="0x7f2e2c057240" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0507d0" next="(nil)" prev="0x7f2e2c0506c0" upper="0x7f2e2c057240" lower="(nil)"><anchored><fly ptr="0x1afd480" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afd820"><txt ptr="0x1afd820" next="(nil)" prev="(nil)" upper="0x1afd480" lower="(nil)"/></fly></anchored>Figure 16: Biased Random Walk algorithm applied to the Thurman Office network.<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06f188" next="(nil)" prev="0x7f2e2c06c3d0" upper="0x7f2e2c067548" lower="0x7f2e2c0504a0"><txt ptr="0x7f2e2c0504a0" next="(nil)" prev="(nil)" upper="0x7f2e2c06f188" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c067628" next="0x7f2e2c067708" prev="0x7f2e2c067548" upper="0x1af44a0" lower="0x7f2e2c06c550"><body ptr="0x7f2e2c06c550" next="0x7f2e2c06f248" prev="(nil)" upper="0x7f2e2c067628" lower="0x7f2e2c058010"><section ptr="0x7f2e2c058010" next="(nil)" prev="(nil)" upper="0x7f2e2c06c550" lower="0x7f2e2c06b8a0" follow="0x7f2e2c062e90" precede="0x7f2e2c058108"><column ptr="0x7f2e2c06b8a0" next="(nil)" prev="(nil)" upper="0x7f2e2c058010" lower="0x7f2e2c0570c0"><body ptr="0x7f2e2c0570c0" next="(nil)" prev="(nil)" upper="0x7f2e2c06b8a0" lower="0x7f2e2c0508e0"><txt ptr="0x7f2e2c0508e0" next="0x7f2e2c050b00" prev="(nil)" upper="0x7f2e2c0570c0" lower="(nil)"><anchored><fly ptr="0x1afd970" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afdcf0"><txt ptr="0x1afdcf0" next="(nil)" prev="(nil)" upper="0x1afd970" lower="(nil)"/></fly></anchored>Figure 17: Histogram Chart Algorithms' Performance l=k=2 ( Thurman Office Network)<Finish/></txt><txt ptr="0x7f2e2c050b00" next="0x7f2e2c050c10" prev="0x7f2e2c0508e0" upper="0x7f2e2c0570c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c050c10" next="0x7f2e2c050d20" prev="0x7f2e2c050b00" upper="0x7f2e2c0570c0" lower="(nil)"><anchored><fly ptr="0x1afde60" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afe200"><txt ptr="0x1afe200" next="(nil)" prev="(nil)" upper="0x1afde60" lower="(nil)"/></fly></anchored>Figure 18: Histogram Chart Algorithms' Performance l=3, k=2 ( Thurman Office Network)<Finish/></txt><txt ptr="0x7f2e2c050d20" next="0x7f2e2c050e30" prev="0x7f2e2c050c10" upper="0x7f2e2c0570c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c050e30" next="(nil)" prev="0x7f2e2c050d20" upper="0x7f2e2c0570c0" lower="(nil)">Here again, the Profiling Core-Periphery outperforms by far the other methods. The PCP method reaches 80% of the prominent nodes, where the Biased Random Walks method struggles to barely reach 40%.<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06f248" next="(nil)" prev="0x7f2e2c06c550" upper="0x7f2e2c067628" lower="0x7f2e2c0509f0"><txt ptr="0x7f2e2c0509f0" next="(nil)" prev="(nil)" upper="0x7f2e2c06f248" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c067708" next="0x7f2e2c0677e8" prev="0x7f2e2c067628" upper="0x1af44a0" lower="0x7f2e2c06c6d0"><body ptr="0x7f2e2c06c6d0" next="0x7f2e2c06f308" prev="(nil)" upper="0x7f2e2c067708" lower="0x7f2e2c062e90"><section ptr="0x7f2e2c062e90" next="(nil)" prev="(nil)" upper="0x7f2e2c06c6d0" lower="0x7f2e2c06b7d8" follow="0x7f2e2c062d98" precede="0x7f2e2c058010"><column ptr="0x7f2e2c06b7d8" next="(nil)" prev="(nil)" upper="0x7f2e2c062e90" lower="0x7f2e2c06cf10"><body ptr="0x7f2e2c06cf10" next="(nil)" prev="(nil)" upper="0x7f2e2c06b7d8" lower="0x7f2e2c051068"><txt ptr="0x7f2e2c051068" next="0x7f2e2c051288" prev="(nil)" upper="0x7f2e2c06cf10" lower="(nil)">5.3 Third dataset: Social network of bottlenose dolphin<Finish/></txt><txt ptr="0x7f2e2c051288" next="0x7f2e2c051398" prev="0x7f2e2c051068" upper="0x7f2e2c06cf10" lower="(nil)">Social network of bottlenose dolphin living in Doubtful Sound, New Zealand.<Finish/></txt><txt ptr="0x7f2e2c051398" next="0x7f2e2c0514a8" prev="0x7f2e2c051288" upper="0x7f2e2c06cf10" lower="(nil)">This dolphin dataset was collected by DL, Olivier J. Boisseau for the long-term research program of the University of Otago-Marine Mamma Research Group. In their research they have identified communities and subcommunities within the dolphin population. More interesting, they have also identified brokers who act as links between subcommunities and who appear to be crucial to the social cohesion of the population as a whole. These brokers with highest betweenness fall, not surprisingly, on the boundary between the communities in the network and will represent the prominent nodes that our algorithms should identify.<Finish/></txt><txt ptr="0x7f2e2c0514a8" next="0x7f2e2c0515b8" prev="0x7f2e2c051398" upper="0x7f2e2c06cf10" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0515b8" next="0x7f2e2c0516c8" prev="0x7f2e2c0514a8" upper="0x7f2e2c06cf10" lower="(nil)"><anchored><fly ptr="0x1afe350" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afe6d0"><txt ptr="0x1afe6d0" next="(nil)" prev="(nil)" upper="0x1afe350" lower="(nil)"/></fly></anchored>Figure 19: Network visualization and Statistics of the bottlenose dolphins network.<Finish/></txt><txt ptr="0x7f2e2c0516c8" next="0x7f2e2c0517d8" prev="0x7f2e2c0515b8" upper="0x7f2e2c06cf10" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0517d8" next="(nil)" prev="0x7f2e2c0516c8" upper="0x7f2e2c06cf10" lower="(nil)"><anchored><fly ptr="0x1afe840" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afebe0"><txt ptr="0x1afebe0" next="(nil)" prev="(nil)" upper="0x1afe840" lower="(nil)"/></fly></anchored>Figure 20: Profiling Core-Periphery algorithm applied to the bottlenose dolphins network.<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06f308" next="(nil)" prev="0x7f2e2c06c6d0" upper="0x7f2e2c067708" lower="0x7f2e2c051178"><txt ptr="0x7f2e2c051178" next="(nil)" prev="(nil)" upper="0x7f2e2c06f308" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c0677e8" next="0x7f2e2c0678c8" prev="0x7f2e2c067708" upper="0x1af44a0" lower="0x7f2e2c06c850"><body ptr="0x7f2e2c06c850" next="0x7f2e2c06f3c8" prev="(nil)" upper="0x7f2e2c0677e8" lower="0x7f2e2c062d98"><section ptr="0x7f2e2c062d98" next="(nil)" prev="(nil)" upper="0x7f2e2c06c850" lower="0x7f2e2c06b710" follow="0x7f2e2c058200" precede="0x7f2e2c062e90"><column ptr="0x7f2e2c06b710" next="(nil)" prev="(nil)" upper="0x7f2e2c062d98" lower="0x7f2e2c06cd90"><body ptr="0x7f2e2c06cd90" next="(nil)" prev="(nil)" upper="0x7f2e2c06b710" lower="0x7f2e2c0518e8"><txt ptr="0x7f2e2c0518e8" next="0x7f2e2c051b08" prev="(nil)" upper="0x7f2e2c06cd90" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c051b08" next="0x7f2e2c051c18" prev="0x7f2e2c0518e8" upper="0x7f2e2c06cd90" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c051c18" next="0x7f2e2c051d28" prev="0x7f2e2c051b08" upper="0x7f2e2c06cd90" lower="(nil)"><anchored><fly ptr="0x1afed30" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1aff0b0"><txt ptr="0x1aff0b0" next="(nil)" prev="(nil)" upper="0x1afed30" lower="(nil)"/></fly></anchored>Figure 21: Biased Random Walk algorithm applied to the bottlenose dolphins network.<Finish/></txt><txt ptr="0x7f2e2c051d28" next="0x7f2e2c051e38" prev="0x7f2e2c051c18" upper="0x7f2e2c06cd90" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c051e38" next="0x7f2e2c052070" prev="0x7f2e2c051d28" upper="0x7f2e2c06cd90" lower="(nil)">Using this dataset to evaluate different algorithms, I obtain the following results: Table 3 <Finish/></txt><txt ptr="0x7f2e2c052070" next="0x7f2e2c052180" prev="0x7f2e2c051e38" upper="0x7f2e2c06cd90" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c052180" next="0x7f2e2c052290" prev="0x7f2e2c052070" upper="0x7f2e2c06cd90" lower="(nil)"><anchored><fly ptr="0x1aff220" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1aff5c0"><txt ptr="0x1aff5c0" next="(nil)" prev="(nil)" upper="0x1aff220" lower="(nil)"/></fly></anchored><Finish/></txt><txt ptr="0x7f2e2c052290" next="0x7f2e2c0523a0" prev="0x7f2e2c052180" upper="0x7f2e2c06cd90" lower="(nil)">Table 3: Summary of all the algorithms' results carried out on the bottlenose dolphins network.<Finish/></txt><txt ptr="0x7f2e2c0523a0" next="0x7f2e2c0524b0" prev="0x7f2e2c052290" upper="0x7f2e2c06cd90" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0524b0" next="0x7f2e2c0525c0" prev="0x7f2e2c0523a0" upper="0x7f2e2c06cd90" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0525c0" next="0x7f2e2c0526d0" prev="0x7f2e2c0524b0" upper="0x7f2e2c06cd90" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0526d0" next="0x7f2e2c0527e0" prev="0x7f2e2c0525c0" upper="0x7f2e2c06cd90" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0527e0" next="(nil)" prev="0x7f2e2c0526d0" upper="0x7f2e2c06cd90" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06f3c8" next="(nil)" prev="0x7f2e2c06c850" upper="0x7f2e2c0677e8" lower="0x7f2e2c0519f8"><txt ptr="0x7f2e2c0519f8" next="(nil)" prev="(nil)" upper="0x7f2e2c06f3c8" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c0678c8" next="0x7f2e2c0679a8" prev="0x7f2e2c0677e8" upper="0x1af44a0" lower="0x7f2e2c06c9d0"><body ptr="0x7f2e2c06c9d0" next="0x7f2e2c06f488" prev="(nil)" upper="0x7f2e2c0678c8" lower="0x7f2e2c058200"><section ptr="0x7f2e2c058200" next="(nil)" prev="(nil)" upper="0x7f2e2c06c9d0" lower="0x7f2e2c06ba30" follow="0x7f2e2c0582f8" precede="0x7f2e2c062d98"><column ptr="0x7f2e2c06ba30" next="(nil)" prev="(nil)" upper="0x7f2e2c058200" lower="0x7f2e2c0573c0"><body ptr="0x7f2e2c0573c0" next="(nil)" prev="(nil)" upper="0x7f2e2c06ba30" lower="0x7f2e2c0528f0"><txt ptr="0x7f2e2c0528f0" next="0x7f2e2c052b10" prev="(nil)" upper="0x7f2e2c0573c0" lower="(nil)"><anchored><fly ptr="0x1aff710" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1affa90"><txt ptr="0x1affa90" next="(nil)" prev="(nil)" upper="0x1aff710" lower="(nil)"/></fly></anchored>Figure 22: Algorithms' Performance l=k=9 ( bottlenose dolphins network)<Finish/></txt><txt ptr="0x7f2e2c052b10" next="0x7f2e2c052c20" prev="0x7f2e2c0528f0" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c052c20" next="0x7f2e2c052d30" prev="0x7f2e2c052b10" upper="0x7f2e2c0573c0" lower="(nil)">Here again, the Profiling Core-Periphery outperforms by far the other methods. The PCP method reaches almost 60% of the prominent nodes, where as the Biased Random Walks method struggles to hardly reach 12%.<Finish/></txt><txt ptr="0x7f2e2c052d30" next="0x7f2e2c052e40" prev="0x7f2e2c052c20" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c052e40" next="0x7f2e2c053078" prev="0x7f2e2c052d30" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c053078" next="0x7f2e2c053188" prev="0x7f2e2c052e40" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c053188" next="0x7f2e2c053298" prev="0x7f2e2c053078" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c053298" next="0x7f2e2c0533a8" prev="0x7f2e2c053188" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0533a8" next="0x7f2e2c0534b8" prev="0x7f2e2c053298" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0534b8" next="0x7f2e2c0535c8" prev="0x7f2e2c0533a8" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0535c8" next="0x7f2e2c0536d8" prev="0x7f2e2c0534b8" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0536d8" next="0x7f2e2c0537e8" prev="0x7f2e2c0535c8" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0537e8" next="0x7f2e2c0538f8" prev="0x7f2e2c0536d8" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0538f8" next="0x7f2e2c053a08" prev="0x7f2e2c0537e8" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c053a08" next="0x7f2e2c053b18" prev="0x7f2e2c0538f8" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c053b18" next="0x7f2e2c053c28" prev="0x7f2e2c053a08" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c053c28" next="0x7f2e2c053d38" prev="0x7f2e2c053b18" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c053d38" next="0x7f2e2c053e48" prev="0x7f2e2c053c28" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c053e48" next="0x7f2e2c054080" prev="0x7f2e2c053d38" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c054080" next="0x7f2e2c054190" prev="0x7f2e2c053e48" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c054190" next="0x7f2e2c0542a0" prev="0x7f2e2c054080" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0542a0" next="(nil)" prev="0x7f2e2c054190" upper="0x7f2e2c0573c0" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06f488" next="(nil)" prev="0x7f2e2c06c9d0" upper="0x7f2e2c0678c8" lower="0x7f2e2c052a00"><txt ptr="0x7f2e2c052a00" next="(nil)" prev="(nil)" upper="0x7f2e2c06f488" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c0679a8" next="0x7f2e2c067a88" prev="0x7f2e2c0678c8" upper="0x1af44a0" lower="0x7f2e2c06cb50"><body ptr="0x7f2e2c06cb50" next="0x7f2e2c06f548" prev="(nil)" upper="0x7f2e2c0679a8" lower="0x7f2e2c0582f8"><section ptr="0x7f2e2c0582f8" next="(nil)" prev="(nil)" upper="0x7f2e2c06cb50" lower="0x7f2e2c06baf8" follow="0x7f2e2c0583f0" precede="0x7f2e2c058200"><column ptr="0x7f2e2c06baf8" next="(nil)" prev="(nil)" upper="0x7f2e2c0582f8" lower="0x7f2e2c057540"><body ptr="0x7f2e2c057540" next="(nil)" prev="(nil)" upper="0x7f2e2c06baf8" lower="0x7f2e2c0543b0"><txt ptr="0x7f2e2c0543b0" next="0x7f2e2c0545d0" prev="(nil)" upper="0x7f2e2c057540" lower="(nil)">5.4 Fourth dataset: Books from Amazon 2004.<Finish/></txt><txt ptr="0x7f2e2c0545d0" next="0x7f2e2c0546e0" prev="0x7f2e2c0543b0" upper="0x7f2e2c057540" lower="(nil)">Books about US politics: A network of books about US politics published around the time of the 2004 presidential election and sold by the online bookseller Amazon.com. Edges between books represent frequent copurchasing of books by the same buyers. The network was compiled by V. Krebs and is unpublished, but can found on Krebs' web site. http://www.orgnet.com/<Finish/></txt><txt ptr="0x7f2e2c0546e0" next="0x7f2e2c0547f0" prev="0x7f2e2c0545d0" upper="0x7f2e2c057540" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0547f0" next="0x7f2e2c054900" prev="0x7f2e2c0546e0" upper="0x7f2e2c057540" lower="(nil)"><anchored><fly ptr="0x1affc00" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1afffa0"><txt ptr="0x1afffa0" next="(nil)" prev="(nil)" upper="0x1affc00" lower="(nil)"/></fly></anchored>Figure 23: Network visualization and Statistics of the US books network.<Finish/></txt><txt ptr="0x7f2e2c054900" next="0x7f2e2c054a10" prev="0x7f2e2c0547f0" upper="0x7f2e2c057540" lower="(nil)"><anchored><fly ptr="0x1b00110" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1b004b0"><txt ptr="0x1b004b0" next="(nil)" prev="(nil)" upper="0x1b00110" lower="(nil)"/></fly></anchored><Finish/></txt><txt ptr="0x7f2e2c054a10" next="(nil)" prev="0x7f2e2c054900" upper="0x7f2e2c057540" lower="(nil)">Figure 24: K-Core algorithm applied to the US books network (Core representation)<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06f548" next="(nil)" prev="0x7f2e2c06cb50" upper="0x7f2e2c0679a8" lower="0x7f2e2c0544c0"><txt ptr="0x7f2e2c0544c0" next="(nil)" prev="(nil)" upper="0x7f2e2c06f548" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c067a88" next="0x7f2e2c067b68" prev="0x7f2e2c0679a8" upper="0x1af44a0" lower="0x7f2e2c06ccd0"><body ptr="0x7f2e2c06ccd0" next="0x7f2e2c06f608" prev="(nil)" upper="0x7f2e2c067a88" lower="0x7f2e2c0583f0"><section ptr="0x7f2e2c0583f0" next="(nil)" prev="(nil)" upper="0x7f2e2c06ccd0" lower="0x7f2e2c06bbc0" follow="0x7f2e2c0584e8" precede="0x7f2e2c0582f8"><column ptr="0x7f2e2c06bbc0" next="(nil)" prev="(nil)" upper="0x7f2e2c0583f0" lower="0x7f2e2c0576c0"><body ptr="0x7f2e2c0576c0" next="(nil)" prev="(nil)" upper="0x7f2e2c06bbc0" lower="0x7f2e2c054b20"><txt ptr="0x7f2e2c054b20" next="0x7f2e2c054d40" prev="(nil)" upper="0x7f2e2c0576c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c054d40" next="0x7f2e2c054e50" prev="0x7f2e2c054b20" upper="0x7f2e2c0576c0" lower="(nil)"><anchored><fly ptr="0x1b00600" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1b00980"><txt ptr="0x1b00980" next="(nil)" prev="(nil)" upper="0x1b00600" lower="(nil)"/></fly></anchored>Figure 25: Profiling Core-Periphery algorithm applied to the US books network.<Finish/></txt><txt ptr="0x7f2e2c054e50" next="0x7f2e2c055088" prev="0x7f2e2c054d40" upper="0x7f2e2c0576c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c055088" next="0x7f2e2c055198" prev="0x7f2e2c054e50" upper="0x7f2e2c0576c0" lower="(nil)"><anchored><fly ptr="0x1b00af0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1b00e90"><txt ptr="0x1b00e90" next="(nil)" prev="(nil)" upper="0x1b00af0" lower="(nil)"/></fly></anchored>Table 4: Summary of all the algorithms' outcomes carried out on the US books network.<Finish/></txt><txt ptr="0x7f2e2c055198" next="0x7f2e2c0552a8" prev="0x7f2e2c055088" upper="0x7f2e2c0576c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0552a8" next="0x7f2e2c0553b8" prev="0x7f2e2c055198" upper="0x7f2e2c0576c0" lower="(nil)"><anchored><fly ptr="0x1b00fe0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1b01360"><txt ptr="0x1b01360" next="(nil)" prev="(nil)" upper="0x1b00fe0" lower="(nil)"/></fly></anchored>Figure 26: Histogram Chart Algorithms' Performance l=k=14 ( US books network)<Finish/></txt><txt ptr="0x7f2e2c0553b8" next="0x7f2e2c0554c8" prev="0x7f2e2c0552a8" upper="0x7f2e2c0576c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0554c8" next="(nil)" prev="0x7f2e2c0553b8" upper="0x7f2e2c0576c0" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06f608" next="(nil)" prev="0x7f2e2c06ccd0" upper="0x7f2e2c067a88" lower="0x7f2e2c054c30"><txt ptr="0x7f2e2c054c30" next="(nil)" prev="(nil)" upper="0x7f2e2c06f608" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c067b68" next="0x7f2e2c067c48" prev="0x7f2e2c067a88" upper="0x1af44a0" lower="0x7f2e2c06ce50"><body ptr="0x7f2e2c06ce50" next="0x7f2e2c06f6c8" prev="(nil)" upper="0x7f2e2c067b68" lower="0x7f2e2c0584e8"><section ptr="0x7f2e2c0584e8" next="(nil)" prev="(nil)" upper="0x7f2e2c06ce50" lower="0x7f2e2c06bc88" follow="0x7f2e2c0585e0" precede="0x7f2e2c0583f0"><column ptr="0x7f2e2c06bc88" next="(nil)" prev="(nil)" upper="0x7f2e2c0584e8" lower="0x7f2e2c057840"><body ptr="0x7f2e2c057840" next="(nil)" prev="(nil)" upper="0x7f2e2c06bc88" lower="0x7f2e2c0555d8"><txt ptr="0x7f2e2c0555d8" next="0x7f2e2c0557f8" prev="(nil)" upper="0x7f2e2c057840" lower="(nil)">To obtain the prominent books, I had to first gather the Amazon Best Sellers Rank for each Book, and then sort the whole list of books based on the rank criterion to take only the top 14.<Finish/></txt><txt ptr="0x7f2e2c0557f8" next="0x7f2e2c055908" prev="0x7f2e2c0555d8" upper="0x7f2e2c057840" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c055908" next="0x7f2e2c055a18" prev="0x7f2e2c0557f8" upper="0x7f2e2c057840" lower="(nil)">5.5 Fifth dataset: Jazz musicians bands network<Finish/></txt><txt ptr="0x7f2e2c055a18" next="0x7f2e2c055b28" prev="0x7f2e2c055908" upper="0x7f2e2c057840" lower="(nil)">The data was obtained from the Red Hot Archive digital database. The network dataset include 198 bands that performed between 1912 and 1940, with most of the band in 1920's.<Finish/></txt><txt ptr="0x7f2e2c055b28" next="0x7f2e2c055c38" prev="0x7f2e2c055a18" upper="0x7f2e2c057840" lower="(nil)">We consider the collaboration between bands, where two bands are connected if they have a musician in common. We do not know the prominent nodes in this network, however , if we sort the bands by their degrees, in the descending order, we notice that the first four nodes are the outlying nodes with noticeably higher degrees. These nodes could represent bands that had great notoriety among the jazz community, bands that existed during the entire 28 years period, or possibly bands that had high turnover of musicians.<Finish/></txt><txt ptr="0x7f2e2c055c38" next="0x7f2e2c055d48" prev="0x7f2e2c055b28" upper="0x7f2e2c057840" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c055d48" next="0x7f2e2c055e58" prev="0x7f2e2c055c38" upper="0x7f2e2c057840" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c055e58" next="0x7f2e2c056090" prev="0x7f2e2c055d48" upper="0x7f2e2c057840" lower="(nil)"><anchored><fly ptr="0x1b014c0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1b01840"><txt ptr="0x1b01840" next="(nil)" prev="(nil)" upper="0x1b014c0" lower="(nil)"/></fly></anchored>Figure 27: K-Core algorithm applied to the Jazz band musicians network (Core representation)<Finish/></txt><txt ptr="0x7f2e2c056090" next="0x7f2e2c0561a0" prev="0x7f2e2c055e58" upper="0x7f2e2c057840" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0561a0" next="0x7f2e2c0562b0" prev="0x7f2e2c056090" upper="0x7f2e2c057840" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0562b0" next="0x7f2e2c0563c0" prev="0x7f2e2c0561a0" upper="0x7f2e2c057840" lower="(nil)">Not surprising at all, if we apply the k-core decomposition to this Jazz network, these outlying Jazz bands belong to the highest cores. As shown in Figure 27, three quarter (75%) of these highly connected bands belong to the core 58 and one quarter(25%) to the core 42.<Finish/></txt><txt ptr="0x7f2e2c0563c0" next="0x7f2e2c0564d0" prev="0x7f2e2c0562b0" upper="0x7f2e2c057840" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0564d0" next="0x7f2e2c0565e0" prev="0x7f2e2c0563c0" upper="0x7f2e2c057840" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0565e0" next="0x7f2e2c0566f0" prev="0x7f2e2c0564d0" upper="0x7f2e2c057840" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0566f0" next="0x7f2e2c056800" prev="0x7f2e2c0565e0" upper="0x7f2e2c057840" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c056800" next="(nil)" prev="0x7f2e2c0566f0" upper="0x7f2e2c057840" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06f6c8" next="(nil)" prev="0x7f2e2c06ce50" upper="0x7f2e2c067b68" lower="0x7f2e2c0556e8"><txt ptr="0x7f2e2c0556e8" next="(nil)" prev="(nil)" upper="0x7f2e2c06f6c8" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c067c48" next="0x7f2e2c067d28" prev="0x7f2e2c067b68" upper="0x1af44a0" lower="0x7f2e2c057000"><body ptr="0x7f2e2c057000" next="0x7f2e2c06f788" prev="(nil)" upper="0x7f2e2c067c48" lower="0x7f2e2c0585e0"><section ptr="0x7f2e2c0585e0" next="(nil)" prev="(nil)" upper="0x7f2e2c057000" lower="0x7f2e2c06bd50" follow="0x7f2e2c0586d8" precede="0x7f2e2c0584e8"><column ptr="0x7f2e2c06bd50" next="(nil)" prev="(nil)" upper="0x7f2e2c0585e0" lower="0x7f2e2c0579c0"><body ptr="0x7f2e2c0579c0" next="(nil)" prev="(nil)" upper="0x7f2e2c06bd50" lower="0x7f2e2c056910"><txt ptr="0x7f2e2c056910" next="0x7f2e2c056b30" prev="(nil)" upper="0x7f2e2c0579c0" lower="(nil)">Chapter 6: Conclusion<Finish/></txt><txt ptr="0x7f2e2c056b30" next="0x7f2e2c056c40" prev="0x7f2e2c056910" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c056c40" next="0x7f2e2c056d50" prev="0x7f2e2c056b30" upper="0x7f2e2c0579c0" lower="(nil)">In this project, we have developed an online web application, a service to users interested in visualizing, analyzing, and detecting prominent nodes in their networks. The user can connect to the server using any browser, gather statistics and visualize their network in different layouts. The network uploaded into the server is a simple text file, using an intuitive and simplified edges list graph notation. <Finish/></txt><txt ptr="0x7f2e2c056d50" next="0x7f2e2c056e60" prev="0x7f2e2c056c40" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c056e60" next="0x7f2e2c059098" prev="0x7f2e2c056d50" upper="0x7f2e2c0579c0" lower="(nil)">From the four data sets tested, in detecting most prominent nodes, we found that the complex algorithms do not add a significant value to the simple closeness and degree selection algorithm.<Finish/></txt><txt ptr="0x7f2e2c059098" next="0x7f2e2c0591a8" prev="0x7f2e2c056e60" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0591a8" next="0x7f2e2c0592b8" prev="0x7f2e2c059098" upper="0x7f2e2c0579c0" lower="(nil)"><anchored><fly ptr="0x584eea0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x58c22b0"><txt ptr="0x58c22b0" next="(nil)" prev="(nil)" upper="0x584eea0" lower="(nil)"/></fly></anchored>In general the Profiling Core-Periphery algorithm outperforms the Biased Random Walk and we obtain almost the same performance between the Profiling Core-Periphery and a simple closeness/degree algorithm. However, we have observed that the closeness centralization measure is more costly in time due to the fact that we need to calculate the sum of the geodesic distances from ego to all others in the network. The complexity of calculating centrality measures such as the closeness centrality is in the order of O(mn) or worse [10] (*) where m is the number of edges and n the number of nodes. Therefore the time complexity directly depends on the density of the network, in other words, how sparse is the network. On the other hand, the time complexity of a simple degree selection algorithm is of the n order O(n) but does not take into account the neighborhood effect and could select a peripheral node with high degree.<Finish/></txt><txt ptr="0x7f2e2c0592b8" next="0x7f2e2c0593c8" prev="0x7f2e2c0591a8" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0593c8" next="0x7f2e2c0594d8" prev="0x7f2e2c0592b8" upper="0x7f2e2c0579c0" lower="(nil)">In the bias random walk algorithm, it is worth repeating that in our experiments, we have followed the article's recommendation [1] for the parameter values. However, it is very likely that these parameters need to be adapted to the context and environment.<Finish/></txt><txt ptr="0x7f2e2c0594d8" next="0x7f2e2c0595e8" prev="0x7f2e2c0593c8" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0595e8" next="0x7f2e2c0596f8" prev="0x7f2e2c0594d8" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0596f8" next="0x7f2e2c059808" prev="0x7f2e2c0595e8" upper="0x7f2e2c0579c0" lower="(nil)"><anchored><fly ptr="0x209e770" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1fd5310"><txt ptr="0x1fd5310" next="(nil)" prev="(nil)" upper="0x209e770" lower="(nil)"/></fly><fly ptr="0x599c890" next="(nil)" prev="(nil)" upper="(nil)" lower="0x57de8f0"><txt ptr="0x57de8f0" next="(nil)" prev="(nil)" upper="0x599c890" lower="(nil)"/></fly></anchored>To sum up, in all the experiments carried out, the biased random walks and profiling core periphery algorithm were faster due to my design and implementation (*worst case) than the baseline algorithm (closeness/degree criterion*). Therefore the Profiling Core-Periphery offer a good compromise between performance/precision and time execution/search of the prominent nodes.<Finish/></txt><txt ptr="0x7f2e2c059808" next="0x7f2e2c059918" prev="0x7f2e2c0596f8" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c059918" next="0x7f2e2c059a28" prev="0x7f2e2c059808" upper="0x7f2e2c0579c0" lower="(nil)">This study is only a start, and should not be generalized as only four data sets have been evaluated. Plus the statistical significance of these data sets is discutable. Also, the algorithms are actually restricted to the unweighted and undirected graphs. Therefore, we should first extend the algorithms to allow numerous and various kind of networks to be tested and evaluated, in order to obtain more accurate and significant statistical results.<Finish/></txt><txt ptr="0x7f2e2c059a28" next="0x7f2e2c059b38" prev="0x7f2e2c059918" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c059b38" next="0x7f2e2c059c48" prev="0x7f2e2c059a28" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c059c48" next="0x7f2e2c059d58" prev="0x7f2e2c059b38" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c059d58" next="0x7f2e2c059e68" prev="0x7f2e2c059c48" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c059e68" next="0x7f2e2c05a0a0" prev="0x7f2e2c059d58" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05a0a0" next="0x7f2e2c05a1b0" prev="0x7f2e2c059e68" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05a1b0" next="0x7f2e2c05a2c0" prev="0x7f2e2c05a0a0" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05a2c0" next="0x7f2e2c05a3d0" prev="0x7f2e2c05a1b0" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05a3d0" next="0x7f2e2c05a4e0" prev="0x7f2e2c05a2c0" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05a4e0" next="0x7f2e2c05a5f0" prev="0x7f2e2c05a3d0" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05a5f0" next="(nil)" prev="0x7f2e2c05a4e0" upper="0x7f2e2c0579c0" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06f788" next="(nil)" prev="0x7f2e2c057000" upper="0x7f2e2c067c48" lower="0x7f2e2c056a20"><txt ptr="0x7f2e2c056a20" next="(nil)" prev="(nil)" upper="0x7f2e2c06f788" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c067d28" next="0x7f2e2c067e08" prev="0x7f2e2c067c48" upper="0x1af44a0" lower="0x7f2e2c057180"><body ptr="0x7f2e2c057180" next="0x7f2e2c06f848" prev="(nil)" upper="0x7f2e2c067d28" lower="0x7f2e2c0586d8"><section ptr="0x7f2e2c0586d8" next="(nil)" prev="(nil)" upper="0x7f2e2c057180" lower="0x7f2e2c06be18" follow="0x7f2e2c0587d0" precede="0x7f2e2c0585e0"><column ptr="0x7f2e2c06be18" next="(nil)" prev="(nil)" upper="0x7f2e2c0586d8" lower="0x7f2e2c057b40"><body ptr="0x7f2e2c057b40" next="(nil)" prev="(nil)" upper="0x7f2e2c06be18" lower="0x7f2e2c05a700"><txt ptr="0x7f2e2c05a700" next="0x7f2e2c05a920" prev="(nil)" upper="0x7f2e2c057b40" lower="(nil)">Appendix 0: Contents of CD<Finish/></txt><txt ptr="0x7f2e2c05a920" next="0x7f2e2c05aa30" prev="0x7f2e2c05a700" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05aa30" next="0x7f2e2c05ab40" prev="0x7f2e2c05a920" upper="0x7f2e2c057b40" lower="(nil)">README.txt<Finish/></txt><txt ptr="0x7f2e2c05ab40" next="0x7f2e2c05ac50" prev="0x7f2e2c05aa30" upper="0x7f2e2c057b40" lower="(nil)">Presentation PowerPoints Slides: *MSc_Project_Presentation_08_2014.odp<Finish/></txt><txt ptr="0x7f2e2c05ac50" next="0x7f2e2c05ad60" prev="0x7f2e2c05ab40" upper="0x7f2e2c057b40" lower="(nil)">Articles/References:***Article_References/<Finish/></txt><txt ptr="0x7f2e2c05ad60" next="0x7f2e2c05ae70" prev="0x7f2e2c05ac50" upper="0x7f2e2c057b40" lower="(nil)">PDF Final Report: ***MSc_Project_Report_amtir_09_2014.pdf<Finish/></txt><txt ptr="0x7f2e2c05ae70" next="0x7f2e2c05b0a8" prev="0x7f2e2c05ad60" upper="0x7f2e2c057b40" lower="(nil)">DOC Format Final Report: **MSc_Project_Report_amtir_09_2014.doc<Finish/></txt><txt ptr="0x7f2e2c05b0a8" next="0x7f2e2c05b1b8" prev="0x7f2e2c05ae70" upper="0x7f2e2c057b40" lower="(nil)">WAR Web Application ARchive: *MSc_Project_JavaEE_amtir_09_2014.war<Finish/></txt><txt ptr="0x7f2e2c05b1b8" next="0x7f2e2c05b2c8" prev="0x7f2e2c05b0a8" upper="0x7f2e2c057b40" lower="(nil)">JAVA Code Documentation:**JavaDoc/<Finish/></txt><txt ptr="0x7f2e2c05b2c8" next="0x7f2e2c05b3d8" prev="0x7f2e2c05b1b8" upper="0x7f2e2c057b40" lower="(nil)">Networks Samples:***Data_Samples_Networks/<Finish/></txt><txt ptr="0x7f2e2c05b3d8" next="0x7f2e2c05b4e8" prev="0x7f2e2c05b2c8" upper="0x7f2e2c057b40" lower="(nil)">Eternal libraries:***External_Libraries/<Finish/></txt><txt ptr="0x7f2e2c05b4e8" next="0x7f2e2c05b5f8" prev="0x7f2e2c05b3d8" upper="0x7f2e2c057b40" lower="(nil)">Unit/Suite/Cases/Test:**Unit_Cases_Suite_Tests/<Finish/></txt><txt ptr="0x7f2e2c05b5f8" next="0x7f2e2c05b708" prev="0x7f2e2c05b4e8" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05b708" next="0x7f2e2c05b818" prev="0x7f2e2c05b5f8" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05b818" next="0x7f2e2c05b928" prev="0x7f2e2c05b708" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05b928" next="0x7f2e2c05ba38" prev="0x7f2e2c05b818" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05ba38" next="0x7f2e2c05bb48" prev="0x7f2e2c05b928" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05bb48" next="0x7f2e2c05bc58" prev="0x7f2e2c05ba38" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05bc58" next="0x7f2e2c05bd68" prev="0x7f2e2c05bb48" upper="0x7f2e2c057b40" lower="(nil)">Versioning Control System<Finish/></txt><txt ptr="0x7f2e2c05bd68" next="0x7f2e2c05be78" prev="0x7f2e2c05bc58" upper="0x7f2e2c057b40" lower="(nil)">The code has been regularly save under Subversion, a versioning control system, that is very similar and compatible to Concurrent Versions System (CVS). As a developer I used SVN Subversion to maintain current and historical version of files such as source code, web pages, and documentation.<Finish/></txt><txt ptr="0x7f2e2c05be78" next="0x7f2e2c05c0b0" prev="0x7f2e2c05bd68" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05c0b0" next="0x7f2e2c05c1c0" prev="0x7f2e2c05be78" upper="0x7f2e2c057b40" lower="(nil)">The school provides a subversion service that acts as a server SVN, that is available to staff and students. A copy of my work could be found under the following link:<Finish/></txt><txt ptr="0x7f2e2c05c1c0" next="0x7f2e2c05c2d0" prev="0x7f2e2c05c0b0" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05c2d0" next="0x7f2e2c05c3e0" prev="0x7f2e2c05c1c0" upper="0x7f2e2c057b40" lower="(nil)">https://codex.cs.bham.ac.uk/svn/axm1064/MScProject2014/<Finish/></txt><txt ptr="0x7f2e2c05c3e0" next="0x7f2e2c05c4f0" prev="0x7f2e2c05c2d0" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05c4f0" next="0x7f2e2c05c600" prev="0x7f2e2c05c3e0" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05c600" next="0x7f2e2c05c710" prev="0x7f2e2c05c4f0" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c05c710" next="0x7f2e2c05c820" prev="0x7f2e2c05c600" upper="0x7f2e2c057b40" lower="(nil)">NLOC Number Lines Of Code<Finish/></txt><txt ptr="0x7f2e2c05c820" next="0x7f2e2c05d000" prev="0x7f2e2c05c710" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><tab ptr="0x7f2e2c05d000" next="0x7f2e2c0404f8" prev="0x7f2e2c05c820" upper="0x7f2e2c057b40" lower="0x7f2e2c05e000"><row ptr="0x7f2e2c05e000" next="0x7f2e2c05e0e0" prev="(nil)" upper="0x7f2e2c05d000" lower="0x7f2e2c05f000"><cell ptr="0x7f2e2c05f000" next="0x7f2e2c05f0c8" prev="(nil)" upper="0x7f2e2c05e000" lower="0x7f2e2c05c930"><txt ptr="0x7f2e2c05c930" next="(nil)" prev="(nil)" upper="0x7f2e2c05f000" lower="(nil)">LANGUAGE<Finish/></txt></cell><cell ptr="0x7f2e2c05f0c8" next="(nil)" prev="0x7f2e2c05f000" upper="0x7f2e2c05e000" lower="0x7f2e2c05ca40"><txt ptr="0x7f2e2c05ca40" next="(nil)" prev="(nil)" upper="0x7f2e2c05f0c8" lower="(nil)">NLOC<Finish/></txt></cell></row><row ptr="0x7f2e2c05e0e0" next="0x7f2e2c05e1c0" prev="0x7f2e2c05e000" upper="0x7f2e2c05d000" lower="0x7f2e2c05f190"><cell ptr="0x7f2e2c05f190" next="0x7f2e2c05f258" prev="(nil)" upper="0x7f2e2c05e0e0" lower="0x7f2e2c05cb50"><txt ptr="0x7f2e2c05cb50" next="(nil)" prev="(nil)" upper="0x7f2e2c05f190" lower="(nil)">Java-Script<Finish/></txt></cell><cell ptr="0x7f2e2c05f258" next="(nil)" prev="0x7f2e2c05f190" upper="0x7f2e2c05e0e0" lower="0x7f2e2c05cc60"><txt ptr="0x7f2e2c05cc60" next="(nil)" prev="(nil)" upper="0x7f2e2c05f258" lower="(nil)">1500<Finish/></txt></cell></row><row ptr="0x7f2e2c05e1c0" next="0x7f2e2c05e2a0" prev="0x7f2e2c05e0e0" upper="0x7f2e2c05d000" lower="0x7f2e2c05f320"><cell ptr="0x7f2e2c05f320" next="0x7f2e2c05f3e8" prev="(nil)" upper="0x7f2e2c05e1c0" lower="0x7f2e2c05cd70"><txt ptr="0x7f2e2c05cd70" next="(nil)" prev="(nil)" upper="0x7f2e2c05f320" lower="(nil)">Java<Finish/></txt></cell><cell ptr="0x7f2e2c05f3e8" next="(nil)" prev="0x7f2e2c05f320" upper="0x7f2e2c05e1c0" lower="0x7f2e2c05ce80"><txt ptr="0x7f2e2c05ce80" next="(nil)" prev="(nil)" upper="0x7f2e2c05f3e8" lower="(nil)">2000<Finish/></txt></cell></row><row ptr="0x7f2e2c05e2a0" next="0x7f2e2c05e380" prev="0x7f2e2c05e1c0" upper="0x7f2e2c05d000" lower="0x7f2e2c05f4b0"><cell ptr="0x7f2e2c05f4b0" next="0x7f2e2c05f578" prev="(nil)" upper="0x7f2e2c05e2a0" lower="0x7f2e2c0400b8"><txt ptr="0x7f2e2c0400b8" next="(nil)" prev="(nil)" upper="0x7f2e2c05f4b0" lower="(nil)">HTML, JSP<Finish/></txt></cell><cell ptr="0x7f2e2c05f578" next="(nil)" prev="0x7f2e2c05f4b0" upper="0x7f2e2c05e2a0" lower="0x7f2e2c0401c8"><txt ptr="0x7f2e2c0401c8" next="(nil)" prev="(nil)" upper="0x7f2e2c05f578" lower="(nil)">500<Finish/></txt></cell></row><row ptr="0x7f2e2c05e380" next="(nil)" prev="0x7f2e2c05e2a0" upper="0x7f2e2c05d000" lower="0x7f2e2c05f640"><cell ptr="0x7f2e2c05f640" next="0x7f2e2c05f708" prev="(nil)" upper="0x7f2e2c05e380" lower="0x7f2e2c0402d8"><txt ptr="0x7f2e2c0402d8" next="(nil)" prev="(nil)" upper="0x7f2e2c05f640" lower="(nil)">CSS<Finish/></txt></cell><cell ptr="0x7f2e2c05f708" next="(nil)" prev="0x7f2e2c05f640" upper="0x7f2e2c05e380" lower="0x7f2e2c0403e8"><txt ptr="0x7f2e2c0403e8" next="(nil)" prev="(nil)" upper="0x7f2e2c05f708" lower="(nil)">600<Finish/></txt></cell></row></tab><txt ptr="0x7f2e2c0404f8" next="0x7f2e2c040608" prev="0x7f2e2c05d000" upper="0x7f2e2c057b40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c040608" next="0x7f2e2c040718" prev="0x7f2e2c0404f8" upper="0x7f2e2c057b40" lower="(nil)">Reasons for choosing Java language<Finish/></txt><txt ptr="0x7f2e2c040718" next="0x7f2e2c040828" prev="0x7f2e2c040608" upper="0x7f2e2c057b40" lower="(nil)">Extensive standardized APIs (Application Programming Interfaces)<Finish/></txt><txt ptr="0x7f2e2c040828" next="0x7f2e2c040938" prev="0x7f2e2c040718" upper="0x7f2e2c057b40" lower="(nil)">Better portability than other languages across operating systems<Finish/></txt><txt ptr="0x7f2e2c040938" next="0x7f2e2c040a48" prev="0x7f2e2c040828" upper="0x7f2e2c057b40" lower="(nil)">Supports web based applications (Servlet, JSP), distributed applications (sockets, RMI) and network protocols (HTTP)<Finish/></txt><txt ptr="0x7f2e2c040a48" next="0x7f2e2c040b58" prev="0x7f2e2c040938" upper="0x7f2e2c057b40" lower="(nil)">Object Oriented programming OOP<Finish/></txt><txt ptr="0x7f2e2c040b58" next="(nil)" prev="0x7f2e2c040a48" upper="0x7f2e2c057b40" lower="(nil)">Built-in support for multi-threading, socket communication, and memory management (automatic garbage collection).<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06f848" next="(nil)" prev="0x7f2e2c057180" upper="0x7f2e2c067d28" lower="0x7f2e2c05a810"><txt ptr="0x7f2e2c05a810" next="(nil)" prev="(nil)" upper="0x7f2e2c06f848" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c067e08" next="0x7f2e2c067ee8" prev="0x7f2e2c067d28" upper="0x1af44a0" lower="0x7f2e2c057300"><body ptr="0x7f2e2c057300" next="0x7f2e2c06f908" prev="(nil)" upper="0x7f2e2c067e08" lower="0x7f2e2c0587d0"><section ptr="0x7f2e2c0587d0" next="(nil)" prev="(nil)" upper="0x7f2e2c057300" lower="0x7f2e2c06bee0" follow="0x7f2e2c0588c8" precede="0x7f2e2c0586d8"><column ptr="0x7f2e2c06bee0" next="(nil)" prev="(nil)" upper="0x7f2e2c0587d0" lower="0x7f2e2c057cc0"><body ptr="0x7f2e2c057cc0" next="(nil)" prev="(nil)" upper="0x7f2e2c06bee0" lower="0x7f2e2c040c68"><txt ptr="0x7f2e2c040c68" next="0x7f2e2c040e88" prev="(nil)" upper="0x7f2e2c057cc0" lower="(nil)">Appendix 1: Test Cases, JUnits<Finish/></txt><txt ptr="0x7f2e2c040e88" next="0x7f2e2c05d0f8" prev="0x7f2e2c040c68" upper="0x7f2e2c057cc0" lower="(nil)"><Finish/></txt><tab ptr="0x7f2e2c05d0f8" next="(nil)" prev="0x7f2e2c040e88" upper="0x7f2e2c057cc0" lower="0x7f2e2c05e460" follow="0x7f2e2c05d2e8"><row ptr="0x7f2e2c05e460" next="0x7f2e2c05e540" prev="(nil)" upper="0x7f2e2c05d0f8" lower="0x7f2e2c05f7d0"><cell ptr="0x7f2e2c05f7d0" next="0x7f2e2c05f898" prev="(nil)" upper="0x7f2e2c05e460" lower="0x7f2e2c0410c0"><txt ptr="0x7f2e2c0410c0" next="(nil)" prev="(nil)" upper="0x7f2e2c05f7d0" lower="(nil)">Test<Finish/></txt></cell><cell ptr="0x7f2e2c05f898" next="0x7f2e2c05f960" prev="0x7f2e2c05f7d0" upper="0x7f2e2c05e460" lower="0x7f2e2c0411d0"><txt ptr="0x7f2e2c0411d0" next="(nil)" prev="(nil)" upper="0x7f2e2c05f898" lower="(nil)">Description/Scenario<Finish/></txt></cell><cell ptr="0x7f2e2c05f960" next="0x7f2e2c05fa28" prev="0x7f2e2c05f898" upper="0x7f2e2c05e460" lower="0x7f2e2c0412e0"><txt ptr="0x7f2e2c0412e0" next="(nil)" prev="(nil)" upper="0x7f2e2c05f960" lower="(nil)">Expected result<Finish/></txt></cell><cell ptr="0x7f2e2c05fa28" next="0x7f2e2c05faf0" prev="0x7f2e2c05f960" upper="0x7f2e2c05e460" lower="0x7f2e2c0413f0"><txt ptr="0x7f2e2c0413f0" next="(nil)" prev="(nil)" upper="0x7f2e2c05fa28" lower="(nil)">Actual Result<Finish/></txt></cell><cell ptr="0x7f2e2c05faf0" next="(nil)" prev="0x7f2e2c05fa28" upper="0x7f2e2c05e460" lower="0x7f2e2c041500"><txt ptr="0x7f2e2c041500" next="(nil)" prev="(nil)" upper="0x7f2e2c05faf0" lower="(nil)">Pass/Fail<Finish/></txt></cell></row><row ptr="0x7f2e2c05e540" next="0x7f2e2c05e620" prev="0x7f2e2c05e460" upper="0x7f2e2c05d0f8" lower="0x7f2e2c05fbb8"><cell ptr="0x7f2e2c05fbb8" next="0x7f2e2c05fc80" prev="(nil)" upper="0x7f2e2c05e540" lower="0x7f2e2c041610"><txt ptr="0x7f2e2c041610" next="0x7f2e2c041720" prev="(nil)" upper="0x7f2e2c05fbb8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c041720" next="0x7f2e2c041830" prev="0x7f2e2c041610" upper="0x7f2e2c05fbb8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c041830" next="(nil)" prev="0x7f2e2c041720" upper="0x7f2e2c05fbb8" lower="(nil)">Empty set of nodes<Finish/></txt></cell><cell ptr="0x7f2e2c05fc80" next="0x7f2e2c05fd48" prev="0x7f2e2c05fbb8" upper="0x7f2e2c05e540" lower="0x7f2e2c041940"><txt ptr="0x7f2e2c041940" next="(nil)" prev="(nil)" upper="0x7f2e2c05fc80" lower="(nil)">Handle the case where the user enter an empty file (empty set of nodes)<Finish/></txt></cell><cell ptr="0x7f2e2c05fd48" next="0x7f2e2c05fe10" prev="0x7f2e2c05fc80" upper="0x7f2e2c05e540" lower="0x7f2e2c041a50"><txt ptr="0x7f2e2c041a50" next="(nil)" prev="(nil)" upper="0x7f2e2c05fd48" lower="(nil)">The front side (browser/JavaScript) should handle this case and silently bypassing, without even bothering the server.<Finish/></txt></cell><cell ptr="0x7f2e2c05fe10" next="0x7f2e2c05fed8" prev="0x7f2e2c05fd48" upper="0x7f2e2c05e540" lower="0x7f2e2c041b60"><txt ptr="0x7f2e2c041b60" next="0x7f2e2c041c70" prev="(nil)" upper="0x7f2e2c05fe10" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c041c70" next="0x7f2e2c041d80" prev="0x7f2e2c041b60" upper="0x7f2e2c05fe10" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c041d80" next="0x7f2e2c041e90" prev="0x7f2e2c041c70" upper="0x7f2e2c05fe10" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c041e90" next="(nil)" prev="0x7f2e2c041d80" upper="0x7f2e2c05fe10" lower="(nil)">As expected<Finish/></txt></cell><cell ptr="0x7f2e2c05fed8" next="(nil)" prev="0x7f2e2c05fe10" upper="0x7f2e2c05e540" lower="0x7f2e2c0420c8"><txt ptr="0x7f2e2c0420c8" next="0x7f2e2c0421d8" prev="(nil)" upper="0x7f2e2c05fed8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0421d8" next="0x7f2e2c0422e8" prev="0x7f2e2c0420c8" upper="0x7f2e2c05fed8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0422e8" next="0x7f2e2c0423f8" prev="0x7f2e2c0421d8" upper="0x7f2e2c05fed8" lower="(nil)">Pass<Finish/></txt><txt ptr="0x7f2e2c0423f8" next="(nil)" prev="0x7f2e2c0422e8" upper="0x7f2e2c05fed8" lower="(nil)">Application stable<Finish/></txt></cell></row><row ptr="0x7f2e2c05e620" next="0x7f2e2c05e700" prev="0x7f2e2c05e540" upper="0x7f2e2c05d0f8" lower="0x7f2e2c043008"><cell ptr="0x7f2e2c043008" next="0x7f2e2c0430d0" prev="(nil)" upper="0x7f2e2c05e620" lower="0x7f2e2c042508"><txt ptr="0x7f2e2c042508" next="0x7f2e2c042618" prev="(nil)" upper="0x7f2e2c043008" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c042618" next="0x7f2e2c042728" prev="0x7f2e2c042508" upper="0x7f2e2c043008" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c042728" next="0x7f2e2c042838" prev="0x7f2e2c042618" upper="0x7f2e2c043008" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c042838" next="(nil)" prev="0x7f2e2c042728" upper="0x7f2e2c043008" lower="(nil)">One simple node<Finish/></txt></cell><cell ptr="0x7f2e2c0430d0" next="0x7f2e2c043198" prev="0x7f2e2c043008" upper="0x7f2e2c05e620" lower="0x7f2e2c042948"><txt ptr="0x7f2e2c042948" next="(nil)" prev="(nil)" upper="0x7f2e2c0430d0" lower="(nil)">Handle the case where the user enter a unique single node. Boundary limit cases testing<Finish/></txt></cell><cell ptr="0x7f2e2c043198" next="0x7f2e2c043260" prev="0x7f2e2c0430d0" upper="0x7f2e2c05e620" lower="0x7f2e2c042a58"><txt ptr="0x7f2e2c042a58" next="(nil)" prev="(nil)" upper="0x7f2e2c043198" lower="(nil)">A unique node JSON object request/response is exchanged between the client and the server and this for all the algorithms. Stable application.<Finish/></txt></cell><cell ptr="0x7f2e2c043260" next="0x7f2e2c043328" prev="0x7f2e2c043198" upper="0x7f2e2c05e620" lower="0x7f2e2c042b68"><txt ptr="0x7f2e2c042b68" next="0x7f2e2c042c78" prev="(nil)" upper="0x7f2e2c043260" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c042c78" next="0x7f2e2c042d88" prev="0x7f2e2c042b68" upper="0x7f2e2c043260" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c042d88" next="0x7f2e2c042e98" prev="0x7f2e2c042c78" upper="0x7f2e2c043260" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c042e98" next="0x7f2e2c0440d0" prev="0x7f2e2c042d88" upper="0x7f2e2c043260" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0440d0" next="(nil)" prev="0x7f2e2c042e98" upper="0x7f2e2c043260" lower="(nil)">As expected<Finish/></txt></cell><cell ptr="0x7f2e2c043328" next="(nil)" prev="0x7f2e2c043260" upper="0x7f2e2c05e620" lower="0x7f2e2c0441e0"><txt ptr="0x7f2e2c0441e0" next="0x7f2e2c0442f0" prev="(nil)" upper="0x7f2e2c043328" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0442f0" next="0x7f2e2c044400" prev="0x7f2e2c0441e0" upper="0x7f2e2c043328" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c044400" next="0x7f2e2c044510" prev="0x7f2e2c0442f0" upper="0x7f2e2c043328" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c044510" next="0x7f2e2c044620" prev="0x7f2e2c044400" upper="0x7f2e2c043328" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c044620" next="(nil)" prev="0x7f2e2c044510" upper="0x7f2e2c043328" lower="(nil)">Pass<Finish/></txt></cell></row><row ptr="0x7f2e2c05e700" next="0x7f2e2c05e7e0" prev="0x7f2e2c05e620" upper="0x7f2e2c05d0f8" lower="0x7f2e2c0433f0"><cell ptr="0x7f2e2c0433f0" next="0x7f2e2c0434b8" prev="(nil)" upper="0x7f2e2c05e700" lower="0x7f2e2c044730"><txt ptr="0x7f2e2c044730" next="0x7f2e2c044840" prev="(nil)" upper="0x7f2e2c0433f0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c044840" next="0x7f2e2c044950" prev="0x7f2e2c044730" upper="0x7f2e2c0433f0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c044950" next="(nil)" prev="0x7f2e2c044840" upper="0x7f2e2c0433f0" lower="(nil)">Two nodes with one edge<Finish/></txt></cell><cell ptr="0x7f2e2c0434b8" next="0x7f2e2c043580" prev="0x7f2e2c0433f0" upper="0x7f2e2c05e700" lower="0x7f2e2c044a60"><txt ptr="0x7f2e2c044a60" next="(nil)" prev="(nil)" upper="0x7f2e2c0434b8" lower="(nil)">Handle the case where the user enter Two nodes linked by an edge. Boundary limit cases testing<Finish/></txt></cell><cell ptr="0x7f2e2c043580" next="0x7f2e2c043648" prev="0x7f2e2c0434b8" upper="0x7f2e2c05e700" lower="0x7f2e2c044b70"><txt ptr="0x7f2e2c044b70" next="(nil)" prev="(nil)" upper="0x7f2e2c043580" lower="(nil)">Application stable; the results returned are correct and accurate for all the algorithms.<Finish/></txt></cell><cell ptr="0x7f2e2c043648" next="0x7f2e2c043710" prev="0x7f2e2c043580" upper="0x7f2e2c05e700" lower="0x7f2e2c044c80"><txt ptr="0x7f2e2c044c80" next="0x7f2e2c044d90" prev="(nil)" upper="0x7f2e2c043648" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c044d90" next="0x7f2e2c044ea0" prev="0x7f2e2c044c80" upper="0x7f2e2c043648" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c044ea0" next="0x7f2e2c0450d8" prev="0x7f2e2c044d90" upper="0x7f2e2c043648" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0450d8" next="(nil)" prev="0x7f2e2c044ea0" upper="0x7f2e2c043648" lower="(nil)">As expected<Finish/></txt></cell><cell ptr="0x7f2e2c043710" next="(nil)" prev="0x7f2e2c043648" upper="0x7f2e2c05e700" lower="0x7f2e2c0451e8"><txt ptr="0x7f2e2c0451e8" next="0x7f2e2c0452f8" prev="(nil)" upper="0x7f2e2c043710" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0452f8" next="0x7f2e2c045408" prev="0x7f2e2c0451e8" upper="0x7f2e2c043710" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c045408" next="0x7f2e2c045518" prev="0x7f2e2c0452f8" upper="0x7f2e2c043710" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c045518" next="(nil)" prev="0x7f2e2c045408" upper="0x7f2e2c043710" lower="(nil)">Pass<Finish/></txt></cell></row><row ptr="0x7f2e2c05e7e0" next="0x7f2e2c05e8c0" prev="0x7f2e2c05e700" upper="0x7f2e2c05d0f8" lower="0x7f2e2c0437d8"><cell ptr="0x7f2e2c0437d8" next="0x7f2e2c0438a0" prev="(nil)" upper="0x7f2e2c05e7e0" lower="0x7f2e2c045628"><txt ptr="0x7f2e2c045628" next="0x7f2e2c045738" prev="(nil)" upper="0x7f2e2c0437d8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c045738" next="0x7f2e2c045848" prev="0x7f2e2c045628" upper="0x7f2e2c0437d8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c045848" next="(nil)" prev="0x7f2e2c045738" upper="0x7f2e2c0437d8" lower="(nil)">Two independent nodes<Finish/></txt></cell><cell ptr="0x7f2e2c0438a0" next="0x7f2e2c043968" prev="0x7f2e2c0437d8" upper="0x7f2e2c05e7e0" lower="0x7f2e2c045958"><txt ptr="0x7f2e2c045958" next="(nil)" prev="(nil)" upper="0x7f2e2c0438a0" lower="(nil)">Handle the case where the user enter Two independent nodes. Boundary limit cases testing<Finish/></txt></cell><cell ptr="0x7f2e2c043968" next="0x7f2e2c043a30" prev="0x7f2e2c0438a0" upper="0x7f2e2c05e7e0" lower="0x7f2e2c045a68"><txt ptr="0x7f2e2c045a68" next="(nil)" prev="(nil)" upper="0x7f2e2c043968" lower="(nil)">Application stable; the results returned are correct and accurate for all the algorithms.<Finish/></txt></cell><cell ptr="0x7f2e2c043a30" next="0x7f2e2c043af8" prev="0x7f2e2c043968" upper="0x7f2e2c05e7e0" lower="0x7f2e2c045b78"><txt ptr="0x7f2e2c045b78" next="0x7f2e2c045c88" prev="(nil)" upper="0x7f2e2c043a30" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c045c88" next="0x7f2e2c045d98" prev="0x7f2e2c045b78" upper="0x7f2e2c043a30" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c045d98" next="(nil)" prev="0x7f2e2c045c88" upper="0x7f2e2c043a30" lower="(nil)">As expected<Finish/></txt></cell><cell ptr="0x7f2e2c043af8" next="(nil)" prev="0x7f2e2c043a30" upper="0x7f2e2c05e7e0" lower="0x7f2e2c045ea8"><txt ptr="0x7f2e2c045ea8" next="0x7f2e2c0460e0" prev="(nil)" upper="0x7f2e2c043af8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0460e0" next="0x7f2e2c0461f0" prev="0x7f2e2c045ea8" upper="0x7f2e2c043af8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0461f0" next="(nil)" prev="0x7f2e2c0460e0" upper="0x7f2e2c043af8" lower="(nil)">Pass<Finish/></txt></cell></row><row ptr="0x7f2e2c05e8c0" next="0x7f2e2c05e9a0" prev="0x7f2e2c05e7e0" upper="0x7f2e2c05d0f8" lower="0x7f2e2c043bc0"><cell ptr="0x7f2e2c043bc0" next="0x7f2e2c043c88" prev="(nil)" upper="0x7f2e2c05e8c0" lower="0x7f2e2c046300"><txt ptr="0x7f2e2c046300" next="0x7f2e2c046410" prev="(nil)" upper="0x7f2e2c043bc0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c046410" next="(nil)" prev="0x7f2e2c046300" upper="0x7f2e2c043bc0" lower="(nil)">Three nodes with two edges<Finish/></txt></cell><cell ptr="0x7f2e2c043c88" next="0x7f2e2c043d50" prev="0x7f2e2c043bc0" upper="0x7f2e2c05e8c0" lower="0x7f2e2c046520"><txt ptr="0x7f2e2c046520" next="(nil)" prev="(nil)" upper="0x7f2e2c043c88" lower="(nil)">Handle the case where the user enter three nodes linked by two edges. Boundary limit cases testing<Finish/></txt></cell><cell ptr="0x7f2e2c043d50" next="0x7f2e2c043e18" prev="0x7f2e2c043c88" upper="0x7f2e2c05e8c0" lower="0x7f2e2c046630"><txt ptr="0x7f2e2c046630" next="(nil)" prev="(nil)" upper="0x7f2e2c043d50" lower="(nil)">Application stable; results  correct and accurate for all the algorithms.<Finish/></txt></cell><cell ptr="0x7f2e2c043e18" next="0x7f2e2c043ee0" prev="0x7f2e2c043d50" upper="0x7f2e2c05e8c0" lower="0x7f2e2c046740"><txt ptr="0x7f2e2c046740" next="0x7f2e2c046850" prev="(nil)" upper="0x7f2e2c043e18" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c046850" next="0x7f2e2c046960" prev="0x7f2e2c046740" upper="0x7f2e2c043e18" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c046960" next="(nil)" prev="0x7f2e2c046850" upper="0x7f2e2c043e18" lower="(nil)">As expected<Finish/></txt></cell><cell ptr="0x7f2e2c043ee0" next="(nil)" prev="0x7f2e2c043e18" upper="0x7f2e2c05e8c0" lower="0x7f2e2c046a70"><txt ptr="0x7f2e2c046a70" next="0x7f2e2c046b80" prev="(nil)" upper="0x7f2e2c043ee0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c046b80" next="0x7f2e2c046c90" prev="0x7f2e2c046a70" upper="0x7f2e2c043ee0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c046c90" next="(nil)" prev="0x7f2e2c046b80" upper="0x7f2e2c043ee0" lower="(nil)">Pass<Finish/></txt></cell></row><row ptr="0x7f2e2c05e9a0" next="0x7f2e2c05ea80" prev="0x7f2e2c05e8c0" upper="0x7f2e2c05d0f8" lower="0x7f2e2c047010"><cell ptr="0x7f2e2c047010" next="0x7f2e2c0470d8" prev="(nil)" upper="0x7f2e2c05e9a0" lower="0x7f2e2c046da0"><txt ptr="0x7f2e2c046da0" next="0x7f2e2c046eb0" prev="(nil)" upper="0x7f2e2c047010" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c046eb0" next="(nil)" prev="0x7f2e2c046da0" upper="0x7f2e2c047010" lower="(nil)">Three independent nodes without any edge<Finish/></txt></cell><cell ptr="0x7f2e2c0470d8" next="0x7f2e2c0471a0" prev="0x7f2e2c047010" upper="0x7f2e2c05e9a0" lower="0x7f2e2c0480e8"><txt ptr="0x7f2e2c0480e8" next="(nil)" prev="(nil)" upper="0x7f2e2c0470d8" lower="(nil)">Handle the case where the user enter three independent nodes. Boundary limit cases testing<Finish/></txt></cell><cell ptr="0x7f2e2c0471a0" next="0x7f2e2c047268" prev="0x7f2e2c0470d8" upper="0x7f2e2c05e9a0" lower="0x7f2e2c0481f8"><txt ptr="0x7f2e2c0481f8" next="(nil)" prev="(nil)" upper="0x7f2e2c0471a0" lower="(nil)">Application stable; the results returned are correct and accurate for all the algorithms.<Finish/></txt></cell><cell ptr="0x7f2e2c047268" next="0x7f2e2c047330" prev="0x7f2e2c0471a0" upper="0x7f2e2c05e9a0" lower="0x7f2e2c048308"><txt ptr="0x7f2e2c048308" next="0x7f2e2c048418" prev="(nil)" upper="0x7f2e2c047268" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c048418" next="0x7f2e2c048528" prev="0x7f2e2c048308" upper="0x7f2e2c047268" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c048528" next="(nil)" prev="0x7f2e2c048418" upper="0x7f2e2c047268" lower="(nil)">As expected<Finish/></txt></cell><cell ptr="0x7f2e2c047330" next="(nil)" prev="0x7f2e2c047268" upper="0x7f2e2c05e9a0" lower="0x7f2e2c048638"><txt ptr="0x7f2e2c048638" next="0x7f2e2c048748" prev="(nil)" upper="0x7f2e2c047330" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c048748" next="0x7f2e2c048858" prev="0x7f2e2c048638" upper="0x7f2e2c047330" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c048858" next="(nil)" prev="0x7f2e2c048748" upper="0x7f2e2c047330" lower="(nil)">Pass<Finish/></txt></cell></row><row ptr="0x7f2e2c05ea80" next="(nil)" prev="0x7f2e2c05e9a0" upper="0x7f2e2c05d0f8" lower="0x7f2e2c0473f8"><cell ptr="0x7f2e2c0473f8" next="0x7f2e2c0474c0" prev="(nil)" upper="0x7f2e2c05ea80" lower="0x7f2e2c048968"><txt ptr="0x7f2e2c048968" next="(nil)" prev="(nil)" upper="0x7f2e2c0473f8" lower="(nil)" follow="0x7f2e2409a7f0">Multiple redundant nodes, single, linked with other nodes<Finish/></txt></cell><cell ptr="0x7f2e2c0474c0" next="0x7f2e2c047588" prev="0x7f2e2c0473f8" upper="0x7f2e2c05ea80" lower="0x7f2e2c048a78"><txt ptr="0x7f2e2c048a78" next="(nil)" prev="(nil)" upper="0x7f2e2c0474c0" lower="(nil)" follow="0x7f2e2409a900">Handle the case of redundant data, nodes, edges.<Finish/></txt></cell><cell ptr="0x7f2e2c047588" next="0x7f2e2c047650" prev="0x7f2e2c0474c0" upper="0x7f2e2c05ea80" lower="0x7f2e2c048b88"><txt ptr="0x7f2e2c048b88" next="(nil)" prev="(nil)" upper="0x7f2e2c047588" lower="(nil)" follow="0x7f2e2409aa10">Application stable; and correct and accurate for all the algorithms.<Finish/></txt></cell><cell ptr="0x7f2e2c047650" next="0x7f2e2c047718" prev="0x7f2e2c047588" upper="0x7f2e2c05ea80" lower="0x7f2e2c048c98"><txt ptr="0x7f2e2c048c98" next="0x7f2e2c048da8" prev="(nil)" upper="0x7f2e2c047650" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c048da8" next="(nil)" prev="0x7f2e2c048c98" upper="0x7f2e2c047650" lower="(nil)"><Finish/></txt></cell><cell ptr="0x7f2e2c047718" next="(nil)" prev="0x7f2e2c047650" upper="0x7f2e2c05ea80" lower="0x7f2e2c0490f0"><txt ptr="0x7f2e2c0490f0" next="0x7f2e2c049200" prev="(nil)" upper="0x7f2e2c047718" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c049200" next="(nil)" prev="0x7f2e2c0490f0" upper="0x7f2e2c047718" lower="(nil)"><Finish/></txt></cell></row></tab></body></column></section></body><footer ptr="0x7f2e2c06f908" next="(nil)" prev="0x7f2e2c057300" upper="0x7f2e2c067e08" lower="0x7f2e2c040d78"><txt ptr="0x7f2e2c040d78" next="(nil)" prev="(nil)" upper="0x7f2e2c06f908" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c067ee8" next="0x7f2e2c032010" prev="0x7f2e2c067e08" upper="0x1af44a0" lower="0x7f2e2c057480"><body ptr="0x7f2e2c057480" next="0x7f2e2c06f9c8" prev="(nil)" upper="0x7f2e2c067ee8" lower="0x7f2e2c0588c8"><section ptr="0x7f2e2c0588c8" next="(nil)" prev="(nil)" upper="0x7f2e2c057480" lower="0x7f2e2c039010" follow="0x7f2e2c0589c0" precede="0x7f2e2c0587d0"><column ptr="0x7f2e2c039010" next="(nil)" prev="(nil)" upper="0x7f2e2c0588c8" lower="0x7f2e2c057e40"><body ptr="0x7f2e2c057e40" next="(nil)" prev="(nil)" upper="0x7f2e2c039010" lower="0x7f2e2c05d2e8"><tab ptr="0x7f2e2c05d2e8" next="0x7f2e2c031790" prev="(nil)" upper="0x7f2e2c057e40" lower="0x7f2e2c04e1c8" precede="0x7f2e2c05d0f8"><row ptr="0x7f2e2c04e1c8" next="0x7f2e2c05eb60" prev="(nil)" upper="0x7f2e2c05d2e8" lower="0x7f2e2c030728"><cell ptr="0x7f2e2c030728" next="0x7f2e2c030660" prev="(nil)" upper="0x7f2e2c04e1c8" lower="0x7f2e2409a7f0"><txt ptr="0x7f2e2409a7f0" next="(nil)" prev="(nil)" upper="0x7f2e2c030728" lower="(nil)" precede="0x7f2e2c048968">Multiple redundant nodes, single, linked with other nodes<Finish/></txt></cell><cell ptr="0x7f2e2c030660" next="0x7f2e2c030598" prev="0x7f2e2c030728" upper="0x7f2e2c04e1c8" lower="0x7f2e2409a900"><txt ptr="0x7f2e2409a900" next="(nil)" prev="(nil)" upper="0x7f2e2c030660" lower="(nil)" precede="0x7f2e2c048a78">Handle the case of redundant data, nodes, edges.<Finish/></txt></cell><cell ptr="0x7f2e2c030598" next="0x7f2e2c0304d0" prev="0x7f2e2c030660" upper="0x7f2e2c04e1c8" lower="0x7f2e2409aa10"><txt ptr="0x7f2e2409aa10" next="(nil)" prev="(nil)" upper="0x7f2e2c030598" lower="(nil)" precede="0x7f2e2c048b88">Application stable; and correct and accurate for all the algorithms.<Finish/></txt></cell><cell ptr="0x7f2e2c0304d0" next="0x7f2e2c030408" prev="0x7f2e2c030598" upper="0x7f2e2c04e1c8" lower="0x7f2e2c048eb8"><txt ptr="0x7f2e2c048eb8" next="(nil)" prev="(nil)" upper="0x7f2e2c0304d0" lower="(nil)">As expected<Finish/></txt></cell><cell ptr="0x7f2e2c030408" next="(nil)" prev="0x7f2e2c0304d0" upper="0x7f2e2c04e1c8" lower="0x7f2e2c049310"><txt ptr="0x7f2e2c049310" next="(nil)" prev="(nil)" upper="0x7f2e2c030408" lower="(nil)">Pass<Finish/></txt></cell></row><row ptr="0x7f2e2c05eb60" next="0x7f2e2c05ec40" prev="0x7f2e2c04e1c8" upper="0x7f2e2c05d2e8" lower="0x7f2e2c0477e0"><cell ptr="0x7f2e2c0477e0" next="0x7f2e2c0478a8" prev="(nil)" upper="0x7f2e2c05eb60" lower="0x7f2e2c049420"><txt ptr="0x7f2e2c049420" next="0x7f2e2c049530" prev="(nil)" upper="0x7f2e2c0477e0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c049530" next="(nil)" prev="0x7f2e2c049420" upper="0x7f2e2c0477e0" lower="(nil)">Circle network<Finish/></txt></cell><cell ptr="0x7f2e2c0478a8" next="0x7f2e2c047970" prev="0x7f2e2c0477e0" upper="0x7f2e2c05eb60" lower="0x7f2e2c049640"><txt ptr="0x7f2e2c049640" next="(nil)" prev="(nil)" upper="0x7f2e2c0478a8" lower="(nil)">Typical network graph to test evaluate the application.<Finish/></txt></cell><cell ptr="0x7f2e2c047970" next="0x7f2e2c047a38" prev="0x7f2e2c0478a8" upper="0x7f2e2c05eb60" lower="0x7f2e2c049750"><txt ptr="0x7f2e2c049750" next="(nil)" prev="(nil)" upper="0x7f2e2c047970" lower="(nil)">Application stable; and correct and accurate for all the algorithms.<Finish/></txt></cell><cell ptr="0x7f2e2c047a38" next="0x7f2e2c047b00" prev="0x7f2e2c047970" upper="0x7f2e2c05eb60" lower="0x7f2e2c049860"><txt ptr="0x7f2e2c049860" next="0x7f2e2c049970" prev="(nil)" upper="0x7f2e2c047a38" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c049970" next="0x7f2e2c049a80" prev="0x7f2e2c049860" upper="0x7f2e2c047a38" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c049a80" next="(nil)" prev="0x7f2e2c049970" upper="0x7f2e2c047a38" lower="(nil)">As expected<Finish/></txt></cell><cell ptr="0x7f2e2c047b00" next="(nil)" prev="0x7f2e2c047a38" upper="0x7f2e2c05eb60" lower="0x7f2e2c049b90"><txt ptr="0x7f2e2c049b90" next="0x7f2e2c049ca0" prev="(nil)" upper="0x7f2e2c047b00" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c049ca0" next="(nil)" prev="0x7f2e2c049b90" upper="0x7f2e2c047b00" lower="(nil)">Pass<Finish/></txt></cell></row><row ptr="0x7f2e2c05ec40" next="0x7f2e2c05ed20" prev="0x7f2e2c05eb60" upper="0x7f2e2c05d2e8" lower="0x7f2e2c047bc8"><cell ptr="0x7f2e2c047bc8" next="0x7f2e2c047c90" prev="(nil)" upper="0x7f2e2c05ec40" lower="0x7f2e2c049db0"><txt ptr="0x7f2e2c049db0" next="0x7f2e2c049ec0" prev="(nil)" upper="0x7f2e2c047bc8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c049ec0" next="(nil)" prev="0x7f2e2c049db0" upper="0x7f2e2c047bc8" lower="(nil)">Star Network<Finish/></txt></cell><cell ptr="0x7f2e2c047c90" next="0x7f2e2c047d58" prev="0x7f2e2c047bc8" upper="0x7f2e2c05ec40" lower="0x7f2e2c04a000"><txt ptr="0x7f2e2c04a000" next="(nil)" prev="(nil)" upper="0x7f2e2c047c90" lower="(nil)">Typical network graph to test evaluate the application.<Finish/></txt></cell><cell ptr="0x7f2e2c047d58" next="0x7f2e2c047e20" prev="0x7f2e2c047c90" upper="0x7f2e2c05ec40" lower="0x7f2e2c04a110"><txt ptr="0x7f2e2c04a110" next="(nil)" prev="(nil)" upper="0x7f2e2c047d58" lower="(nil)">Application stable; and correct and accurate for all the algorithms.<Finish/></txt></cell><cell ptr="0x7f2e2c047e20" next="0x7f2e2c047ee8" prev="0x7f2e2c047d58" upper="0x7f2e2c05ec40" lower="0x7f2e2c04a220"><txt ptr="0x7f2e2c04a220" next="0x7f2e2c04a330" prev="(nil)" upper="0x7f2e2c047e20" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04a330" next="(nil)" prev="0x7f2e2c04a220" upper="0x7f2e2c047e20" lower="(nil)">As expected<Finish/></txt></cell><cell ptr="0x7f2e2c047ee8" next="(nil)" prev="0x7f2e2c047e20" upper="0x7f2e2c05ec40" lower="0x7f2e2c04a440"><txt ptr="0x7f2e2c04a440" next="0x7f2e2c04a550" prev="(nil)" upper="0x7f2e2c047ee8" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04a550" next="(nil)" prev="0x7f2e2c04a440" upper="0x7f2e2c047ee8" lower="(nil)">Pass<Finish/></txt></cell></row><row ptr="0x7f2e2c05ed20" next="0x7f2e2c05ee00" prev="0x7f2e2c05ec40" upper="0x7f2e2c05d2e8" lower="0x7f2e2c04b018"><cell ptr="0x7f2e2c04b018" next="0x7f2e2c04b0e0" prev="(nil)" upper="0x7f2e2c05ed20" lower="0x7f2e2c04a660"><txt ptr="0x7f2e2c04a660" next="0x7f2e2c04a770" prev="(nil)" upper="0x7f2e2c04b018" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04a770" next="(nil)" prev="0x7f2e2c04a660" upper="0x7f2e2c04b018" lower="(nil)">Line Network<Finish/></txt></cell><cell ptr="0x7f2e2c04b0e0" next="0x7f2e2c04b1a8" prev="0x7f2e2c04b018" upper="0x7f2e2c05ed20" lower="0x7f2e2c04a880"><txt ptr="0x7f2e2c04a880" next="(nil)" prev="(nil)" upper="0x7f2e2c04b0e0" lower="(nil)">Typical network graph to test evaluate the application.<Finish/></txt></cell><cell ptr="0x7f2e2c04b1a8" next="0x7f2e2c04b270" prev="0x7f2e2c04b0e0" upper="0x7f2e2c05ed20" lower="0x7f2e2c04a990"><txt ptr="0x7f2e2c04a990" next="(nil)" prev="(nil)" upper="0x7f2e2c04b1a8" lower="(nil)">Application stable; and correct and accurate for all the algorithms.<Finish/></txt></cell><cell ptr="0x7f2e2c04b270" next="0x7f2e2c04b338" prev="0x7f2e2c04b1a8" upper="0x7f2e2c05ed20" lower="0x7f2e2c04aaa0"><txt ptr="0x7f2e2c04aaa0" next="0x7f2e2c04abb0" prev="(nil)" upper="0x7f2e2c04b270" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04abb0" next="(nil)" prev="0x7f2e2c04aaa0" upper="0x7f2e2c04b270" lower="(nil)">As expected<Finish/></txt></cell><cell ptr="0x7f2e2c04b338" next="(nil)" prev="0x7f2e2c04b270" upper="0x7f2e2c05ed20" lower="0x7f2e2c04acc0"><txt ptr="0x7f2e2c04acc0" next="0x7f2e2c04add0" prev="(nil)" upper="0x7f2e2c04b338" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04add0" next="(nil)" prev="0x7f2e2c04acc0" upper="0x7f2e2c04b338" lower="(nil)">Pass<Finish/></txt></cell></row><row ptr="0x7f2e2c05ee00" next="0x7f2e2c05eee0" prev="0x7f2e2c05ed20" upper="0x7f2e2c05d2e8" lower="0x7f2e2c04b400"><cell ptr="0x7f2e2c04b400" next="0x7f2e2c04b4c8" prev="(nil)" upper="0x7f2e2c05ee00" lower="0x7f2e2c04c008"><txt ptr="0x7f2e2c04c008" next="0x7f2e2c04c118" prev="(nil)" upper="0x7f2e2c04b400" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04c118" next="0x7f2e2c04c228" prev="0x7f2e2c04c008" upper="0x7f2e2c04b400" lower="(nil)">Stress test <Finish/></txt><txt ptr="0x7f2e2c04c228" next="(nil)" prev="0x7f2e2c04c118" upper="0x7f2e2c04b400" lower="(nil)">Max load<Finish/></txt></cell><cell ptr="0x7f2e2c04b4c8" next="0x7f2e2c04b590" prev="0x7f2e2c04b400" upper="0x7f2e2c05ee00" lower="0x7f2e2c04c338"><txt ptr="0x7f2e2c04c338" next="(nil)" prev="(nil)" upper="0x7f2e2c04b4c8" lower="(nil)">Quantify the maximum data exchangeable between the client and the server.<Finish/></txt></cell><cell ptr="0x7f2e2c04b590" next="0x7f2e2c04b658" prev="0x7f2e2c04b4c8" upper="0x7f2e2c05ee00" lower="0x7f2e2c04c448"><txt ptr="0x7f2e2c04c448" next="(nil)" prev="(nil)" upper="0x7f2e2c04b590" lower="(nil)">While the application is stable; and the results are correct and accurate for all the algorithms.<Finish/></txt></cell><cell ptr="0x7f2e2c04b658" next="0x7f2e2c04b720" prev="0x7f2e2c04b590" upper="0x7f2e2c05ee00" lower="0x7f2e2c04c558"><txt ptr="0x7f2e2c04c558" next="0x7f2e2c04c668" prev="(nil)" upper="0x7f2e2c04b658" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04c668" next="0x7f2e2c04c778" prev="0x7f2e2c04c558" upper="0x7f2e2c04b658" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04c778" next="(nil)" prev="0x7f2e2c04c668" upper="0x7f2e2c04b658" lower="(nil)">As expected<Finish/></txt></cell><cell ptr="0x7f2e2c04b720" next="(nil)" prev="0x7f2e2c04b658" upper="0x7f2e2c05ee00" lower="0x7f2e2c04c888"><txt ptr="0x7f2e2c04c888" next="0x7f2e2c04c998" prev="(nil)" upper="0x7f2e2c04b720" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04c998" next="0x7f2e2c04caa8" prev="0x7f2e2c04c888" upper="0x7f2e2c04b720" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04caa8" next="(nil)" prev="0x7f2e2c04c998" upper="0x7f2e2c04b720" lower="(nil)">Pass<Finish/></txt></cell></row><row ptr="0x7f2e2c05eee0" next="0x7f2e2c04e008" prev="0x7f2e2c05ee00" upper="0x7f2e2c05d2e8" lower="0x7f2e2c04b7e8"><cell ptr="0x7f2e2c04b7e8" next="0x7f2e2c04b8b0" prev="(nil)" upper="0x7f2e2c05eee0" lower="0x7f2e2c04cbb8"><txt ptr="0x7f2e2c04cbb8" next="0x7f2e2c04ccc8" prev="(nil)" upper="0x7f2e2c04b7e8" lower="(nil)">Comments<Finish/></txt><txt ptr="0x7f2e2c04ccc8" next="(nil)" prev="0x7f2e2c04cbb8" upper="0x7f2e2c04b7e8" lower="(nil)">Single and multiple comment line<Finish/></txt></cell><cell ptr="0x7f2e2c04b8b0" next="0x7f2e2c04b978" prev="0x7f2e2c04b7e8" upper="0x7f2e2c05eee0" lower="0x7f2e2c04cdd8"><txt ptr="0x7f2e2c04cdd8" next="(nil)" prev="(nil)" upper="0x7f2e2c04b8b0" lower="(nil)">Ensure that the user can comment different section of its network file.<Finish/></txt></cell><cell ptr="0x7f2e2c04b978" next="0x7f2e2c04ba40" prev="0x7f2e2c04b8b0" upper="0x7f2e2c05eee0" lower="0x7f2e2c04d010"><txt ptr="0x7f2e2c04d010" next="0x7f2e2c04d120" prev="(nil)" upper="0x7f2e2c04b978" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04d120" next="0x7f2e2c04d230" prev="0x7f2e2c04d010" upper="0x7f2e2c04b978" lower="(nil)">Application stable.<Finish/></txt><txt ptr="0x7f2e2c04d230" next="(nil)" prev="0x7f2e2c04d120" upper="0x7f2e2c04b978" lower="(nil)"><Finish/></txt></cell><cell ptr="0x7f2e2c04ba40" next="0x7f2e2c04bb08" prev="0x7f2e2c04b978" upper="0x7f2e2c05eee0" lower="0x7f2e2c04d340"><txt ptr="0x7f2e2c04d340" next="0x7f2e2c04d450" prev="(nil)" upper="0x7f2e2c04ba40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04d450" next="0x7f2e2c04d560" prev="0x7f2e2c04d340" upper="0x7f2e2c04ba40" lower="(nil)">As expected<Finish/></txt><txt ptr="0x7f2e2c04d560" next="(nil)" prev="0x7f2e2c04d450" upper="0x7f2e2c04ba40" lower="(nil)">Application stable<Finish/></txt></cell><cell ptr="0x7f2e2c04bb08" next="(nil)" prev="0x7f2e2c04ba40" upper="0x7f2e2c05eee0" lower="0x7f2e2c04d670"><txt ptr="0x7f2e2c04d670" next="0x7f2e2c04d780" prev="(nil)" upper="0x7f2e2c04bb08" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04d780" next="(nil)" prev="0x7f2e2c04d670" upper="0x7f2e2c04bb08" lower="(nil)">Pass<Finish/></txt></cell></row><row ptr="0x7f2e2c04e008" next="0x7f2e2c04e0e8" prev="0x7f2e2c05eee0" upper="0x7f2e2c05d2e8" lower="0x7f2e2c04bbd0"><cell ptr="0x7f2e2c04bbd0" next="0x7f2e2c04bc98" prev="(nil)" upper="0x7f2e2c04e008" lower="0x7f2e2c04d890"><txt ptr="0x7f2e2c04d890" next="0x7f2e2c04d9a0" prev="(nil)" upper="0x7f2e2c04bbd0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04d9a0" next="(nil)" prev="0x7f2e2c04d890" upper="0x7f2e2c04bbd0" lower="(nil)">Tabs and Space characters<Finish/></txt></cell><cell ptr="0x7f2e2c04bc98" next="0x7f2e2c04bd60" prev="0x7f2e2c04bbd0" upper="0x7f2e2c04e008" lower="0x7f2e2c04dab0"><txt ptr="0x7f2e2c04dab0" next="(nil)" prev="(nil)" upper="0x7f2e2c04bc98" lower="(nil)">Handle users' misbehavior in translating and writing their network<Finish/></txt></cell><cell ptr="0x7f2e2c04bd60" next="0x7f2e2c04be28" prev="0x7f2e2c04bc98" upper="0x7f2e2c04e008" lower="0x7f2e2c04dbc0"><txt ptr="0x7f2e2c04dbc0" next="0x7f2e2c04dcd0" prev="(nil)" upper="0x7f2e2c04bd60" lower="(nil)">Application stable; and correct and accurate for all the algorithms.<Finish/></txt><txt ptr="0x7f2e2c04dcd0" next="(nil)" prev="0x7f2e2c04dbc0" upper="0x7f2e2c04bd60" lower="(nil)"><Finish/></txt></cell><cell ptr="0x7f2e2c04be28" next="0x7f2e2c04bef0" prev="0x7f2e2c04bd60" upper="0x7f2e2c04e008" lower="0x7f2e2c04dde0"><txt ptr="0x7f2e2c04dde0" next="0x7f2e2c04f018" prev="(nil)" upper="0x7f2e2c04be28" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04f018" next="0x7f2e2c04f128" prev="0x7f2e2c04dde0" upper="0x7f2e2c04be28" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04f128" next="(nil)" prev="0x7f2e2c04f018" upper="0x7f2e2c04be28" lower="(nil)">As expected<Finish/></txt></cell><cell ptr="0x7f2e2c04bef0" next="(nil)" prev="0x7f2e2c04be28" upper="0x7f2e2c04e008" lower="0x7f2e2c04f238"><txt ptr="0x7f2e2c04f238" next="0x7f2e2c04f348" prev="(nil)" upper="0x7f2e2c04bef0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04f348" next="0x7f2e2c04f458" prev="0x7f2e2c04f238" upper="0x7f2e2c04bef0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04f458" next="(nil)" prev="0x7f2e2c04f348" upper="0x7f2e2c04bef0" lower="(nil)">Pass<Finish/></txt></cell></row><row ptr="0x7f2e2c04e0e8" next="(nil)" prev="0x7f2e2c04e008" upper="0x7f2e2c05d2e8" lower="0x7f2e2c030020"><cell ptr="0x7f2e2c030020" next="0x7f2e2c0300e8" prev="(nil)" upper="0x7f2e2c04e0e8" lower="0x7f2e2c04f568"><txt ptr="0x7f2e2c04f568" next="0x7f2e2c04f678" prev="(nil)" upper="0x7f2e2c030020" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04f678" next="0x7f2e2c04f788" prev="0x7f2e2c04f568" upper="0x7f2e2c030020" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04f788" next="0x7f2e2c04f898" prev="0x7f2e2c04f678" upper="0x7f2e2c030020" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04f898" next="(nil)" prev="0x7f2e2c04f788" upper="0x7f2e2c030020" lower="(nil)">Prominent nodes test<Finish/></txt></cell><cell ptr="0x7f2e2c0300e8" next="0x7f2e2c0301b0" prev="0x7f2e2c030020" upper="0x7f2e2c04e0e8" lower="0x7f2e2c04f9a8"><txt ptr="0x7f2e2c04f9a8" next="(nil)" prev="(nil)" upper="0x7f2e2c0300e8" lower="(nil)">Ensure that the user can enter the prominent nodes in the network file, and collect statistics about the algorithms' precision and accuracy.<Finish/></txt></cell><cell ptr="0x7f2e2c0301b0" next="0x7f2e2c030278" prev="0x7f2e2c0300e8" upper="0x7f2e2c04e0e8" lower="0x7f2e2c04fab8"><txt ptr="0x7f2e2c04fab8" next="0x7f2e2c04fbc8" prev="(nil)" upper="0x7f2e2c0301b0" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04fbc8" next="(nil)" prev="0x7f2e2c04fab8" upper="0x7f2e2c0301b0" lower="(nil)">Application stable; Statistics are correct and accurate for all the algorithms.<Finish/></txt></cell><cell ptr="0x7f2e2c030278" next="0x7f2e2c030340" prev="0x7f2e2c0301b0" upper="0x7f2e2c04e0e8" lower="0x7f2e2c04fcd8"><txt ptr="0x7f2e2c04fcd8" next="0x7f2e2c04fde8" prev="(nil)" upper="0x7f2e2c030278" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c04fde8" next="0x7f2e2c031020" prev="0x7f2e2c04fcd8" upper="0x7f2e2c030278" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c031020" next="0x7f2e2c031130" prev="0x7f2e2c04fde8" upper="0x7f2e2c030278" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c031130" next="(nil)" prev="0x7f2e2c031020" upper="0x7f2e2c030278" lower="(nil)">As expected<Finish/></txt></cell><cell ptr="0x7f2e2c030340" next="(nil)" prev="0x7f2e2c030278" upper="0x7f2e2c04e0e8" lower="0x7f2e2c031240"><txt ptr="0x7f2e2c031240" next="0x7f2e2c031350" prev="(nil)" upper="0x7f2e2c030340" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c031350" next="0x7f2e2c031460" prev="0x7f2e2c031240" upper="0x7f2e2c030340" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c031460" next="0x7f2e2c031570" prev="0x7f2e2c031350" upper="0x7f2e2c030340" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c031570" next="(nil)" prev="0x7f2e2c031460" upper="0x7f2e2c030340" lower="(nil)">Pass<Finish/></txt></cell></row></tab><txt ptr="0x7f2e2c031790" next="0x7f2e2c0318a0" prev="0x7f2e2c05d2e8" upper="0x7f2e2c057e40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0318a0" next="0x7f2e2c0319b0" prev="0x7f2e2c031790" upper="0x7f2e2c057e40" lower="(nil)">All the previous unit test cases are grouped in a JUnit test suit. Each time a new functionality or feature is developed, its unit test case is added to the test suit, which is executed again, to test the stability, correctness and accuracy of the whole application.<Finish/></txt><txt ptr="0x7f2e2c0319b0" next="0x7f2e2c031ac0" prev="0x7f2e2c0318a0" upper="0x7f2e2c057e40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c031ac0" next="0x7f2e2c031bd0" prev="0x7f2e2c0319b0" upper="0x7f2e2c057e40" lower="(nil)">Test cases, regression JUnit <Finish/></txt><txt ptr="0x7f2e2c031bd0" next="0x7f2e2c031ce0" prev="0x7f2e2c031ac0" upper="0x7f2e2c057e40" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c031ce0" next="(nil)" prev="0x7f2e2c031bd0" upper="0x7f2e2c057e40" lower="(nil)">Correctness: To ensure the algorithm return the correct result, deliberate input networks were used with the web-application, and the outcome was compared with the expected result.<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06f9c8" next="(nil)" prev="0x7f2e2c057480" upper="0x7f2e2c067ee8" lower="0x7f2e2c031680"><txt ptr="0x7f2e2c031680" next="(nil)" prev="(nil)" upper="0x7f2e2c06f9c8" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c032010" next="0x7f2e2c0320f0" prev="0x7f2e2c067ee8" upper="0x1af44a0" lower="0x7f2e2c057600"><body ptr="0x7f2e2c057600" next="0x7f2e2c06fa88" prev="(nil)" upper="0x7f2e2c032010" lower="0x7f2e2c0589c0"><section ptr="0x7f2e2c0589c0" next="(nil)" prev="(nil)" upper="0x7f2e2c057600" lower="0x7f2e2c0390d8" follow="0x7f2e2c058ab8" precede="0x7f2e2c0588c8"><column ptr="0x7f2e2c0390d8" next="(nil)" prev="(nil)" upper="0x7f2e2c0589c0" lower="0x7f2e2c03b008"><body ptr="0x7f2e2c03b008" next="(nil)" prev="(nil)" upper="0x7f2e2c0390d8" lower="0x7f2e2c031df0"><txt ptr="0x7f2e2c031df0" next="0x7f2e2c033138" prev="(nil)" upper="0x7f2e2c03b008" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c033138" next="0x7f2e2c033248" prev="0x7f2e2c031df0" upper="0x7f2e2c03b008" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c033248" next="0x7f2e2c033358" prev="0x7f2e2c033138" upper="0x7f2e2c03b008" lower="(nil)"><anchored><fly ptr="0x1b019b0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1b01d10"><txt ptr="0x1b01d10" next="(nil)" prev="(nil)" upper="0x1b019b0" lower="(nil)"/></fly></anchored>Figure 28: Circle: 0% on all measures (degree and closeness) of centralization.<Finish/></txt><txt ptr="0x7f2e2c033358" next="0x7f2e2c033468" prev="0x7f2e2c033248" upper="0x7f2e2c03b008" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c033468" next="0x7f2e2c033578" prev="0x7f2e2c033358" upper="0x7f2e2c03b008" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c033578" next="0x7f2e2c033688" prev="0x7f2e2c033468" upper="0x7f2e2c03b008" lower="(nil)"><anchored><fly ptr="0x1b01e80" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1b02220"><txt ptr="0x1b02220" next="(nil)" prev="(nil)" upper="0x1b01e80" lower="(nil)"/></fly></anchored><Finish/></txt><txt ptr="0x7f2e2c033688" next="(nil)" prev="0x7f2e2c033578" upper="0x7f2e2c03b008" lower="(nil)">Figure 29: Star: 100% on all measures (degree and closeness) of centralization.<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06fa88" next="(nil)" prev="0x7f2e2c057600" upper="0x7f2e2c032010" lower="0x7f2e2c033028"><txt ptr="0x7f2e2c033028" next="(nil)" prev="(nil)" upper="0x7f2e2c06fa88" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c0320f0" next="0x7f2e2c0321d0" prev="0x7f2e2c032010" upper="0x1af44a0" lower="0x7f2e2c057780"><body ptr="0x7f2e2c057780" next="0x7f2e2c06fb48" prev="(nil)" upper="0x7f2e2c0320f0" lower="0x7f2e2c058ab8"><section ptr="0x7f2e2c058ab8" next="(nil)" prev="(nil)" upper="0x7f2e2c057780" lower="0x7f2e2c0391a0" follow="0x7f2e2c058bb0" precede="0x7f2e2c0589c0"><column ptr="0x7f2e2c0391a0" next="(nil)" prev="(nil)" upper="0x7f2e2c058ab8" lower="0x7f2e2c03b188"><body ptr="0x7f2e2c03b188" next="(nil)" prev="(nil)" upper="0x7f2e2c0391a0" lower="0x7f2e2c033798"><txt ptr="0x7f2e2c033798" next="0x7f2e2c0339b8" prev="(nil)" upper="0x7f2e2c03b188" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0339b8" next="0x7f2e2c033ac8" prev="0x7f2e2c033798" upper="0x7f2e2c03b188" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c033ac8" next="0x7f2e2c033bd8" prev="0x7f2e2c0339b8" upper="0x7f2e2c03b188" lower="(nil)">Figure 30: Complete network: 100% on the density measure. Diameter 1.<Finish/></txt><txt ptr="0x7f2e2c033bd8" next="0x7f2e2c033ce8" prev="0x7f2e2c033ac8" upper="0x7f2e2c03b188" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c033ce8" next="0x7f2e2c033df8" prev="0x7f2e2c033bd8" upper="0x7f2e2c03b188" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c033df8" next="0x7f2e2c034030" prev="0x7f2e2c033ce8" upper="0x7f2e2c03b188" lower="(nil)"><anchored><fly ptr="0x1b02370" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1b026f0"><txt ptr="0x1b026f0" next="(nil)" prev="(nil)" upper="0x1b02370" lower="(nil)"/></fly></anchored><Finish/></txt><txt ptr="0x7f2e2c034030" next="0x7f2e2c034140" prev="0x7f2e2c033df8" upper="0x7f2e2c03b188" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c034140" next="0x7f2e2c034250" prev="0x7f2e2c034030" upper="0x7f2e2c03b188" lower="(nil)"><anchored><fly ptr="0x1b02860" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1b02be0"><txt ptr="0x1b02be0" next="(nil)" prev="(nil)" upper="0x1b02860" lower="(nil)"/></fly></anchored><Finish/></txt><txt ptr="0x7f2e2c034250" next="(nil)" prev="0x7f2e2c034140" upper="0x7f2e2c03b188" lower="(nil)">Figure 31: Line network<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06fb48" next="(nil)" prev="0x7f2e2c057780" upper="0x7f2e2c0320f0" lower="0x7f2e2c0338a8"><txt ptr="0x7f2e2c0338a8" next="(nil)" prev="(nil)" upper="0x7f2e2c06fb48" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c0321d0" next="0x7f2e2c0322b0" prev="0x7f2e2c0320f0" upper="0x1af44a0" lower="0x7f2e2c057900"><body ptr="0x7f2e2c057900" next="0x7f2e2c06fc08" prev="(nil)" upper="0x7f2e2c0321d0" lower="0x7f2e2c058bb0"><section ptr="0x7f2e2c058bb0" next="(nil)" prev="(nil)" upper="0x7f2e2c057900" lower="0x7f2e2c039268" follow="0x7f2e2c058ca8" precede="0x7f2e2c058ab8"><column ptr="0x7f2e2c039268" next="(nil)" prev="(nil)" upper="0x7f2e2c058bb0" lower="0x7f2e2c03b308"><body ptr="0x7f2e2c03b308" next="(nil)" prev="(nil)" upper="0x7f2e2c039268" lower="0x7f2e2c034360"><txt ptr="0x7f2e2c034360" next="0x7f2e2c034580" prev="(nil)" upper="0x7f2e2c03b308" lower="(nil)">Appendix 2: Object-Oriented Design UML<Finish/></txt><txt ptr="0x7f2e2c034580" next="0x7f2e2c034690" prev="0x7f2e2c034360" upper="0x7f2e2c03b308" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c034690" next="0x7f2e2c0347a0" prev="0x7f2e2c034580" upper="0x7f2e2c03b308" lower="(nil)"><anchored><fly ptr="0x1b02d30" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1b030b0"><txt ptr="0x1b030b0" next="(nil)" prev="(nil)" upper="0x1b02d30" lower="(nil)"/></fly></anchored>Figure 32: Use Case Diagram of the web application (ArgoUML http://argouml.tigris.org)<Finish/></txt><txt ptr="0x7f2e2c0347a0" next="0x7f2e2c0348b0" prev="0x7f2e2c034690" upper="0x7f2e2c03b308" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0348b0" next="0x7f2e2c0349c0" prev="0x7f2e2c0347a0" upper="0x7f2e2c03b308" lower="(nil)">K-Core Decomposition Algorithm<Finish/></txt><txt ptr="0x7f2e2c0349c0" next="0x7f2e2c034ad0" prev="0x7f2e2c0348b0" upper="0x7f2e2c03b308" lower="(nil)">BRW Biased Random Walk<Finish/></txt><txt ptr="0x7f2e2c034ad0" next="0x7f2e2c034be0" prev="0x7f2e2c0349c0" upper="0x7f2e2c03b308" lower="(nil)">PCP Profile Core Periphery<Finish/></txt><txt ptr="0x7f2e2c034be0" next="0x7f2e2c034cf0" prev="0x7f2e2c034ad0" upper="0x7f2e2c03b308" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c034cf0" next="0x7f2e2c034e00" prev="0x7f2e2c034be0" upper="0x7f2e2c03b308" lower="(nil)">The use case diagram helped us to specify the context and the external interactions with the system. Each use case represents an interaction with the system, named in the ellipse as shown in the previous figure. This diagram also allows to plan iterations of development and validate the system's architecture. <Finish/></txt><txt ptr="0x7f2e2c034e00" next="0x7f2e2c035038" prev="0x7f2e2c034cf0" upper="0x7f2e2c03b308" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c035038" next="0x7f2e2c035148" prev="0x7f2e2c034e00" upper="0x7f2e2c03b308" lower="(nil)">The different steps in the design of our implementation are straight forward once some of the requirements are well defined. First, each use case has been further described, and different scenarios/situations have been performed. Next, a noun and verb analysis and CRC Class Collaboration Cards have been carried out to derive classes, their associated methods. These classes have been grouped into packages, the simplest components, while satisfying any constraint <Finish/></txt><txt ptr="0x7f2e2c035148" next="0x7f2e2c035258" prev="0x7f2e2c035038" upper="0x7f2e2c03b308" lower="(nil)">as shown in the Figure 33.<Finish/></txt><txt ptr="0x7f2e2c035258" next="0x7f2e2c035368" prev="0x7f2e2c035148" upper="0x7f2e2c03b308" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c035368" next="0x7f2e2c035478" prev="0x7f2e2c035258" upper="0x7f2e2c03b308" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c035478" next="(nil)" prev="0x7f2e2c035368" upper="0x7f2e2c03b308" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06fc08" next="(nil)" prev="0x7f2e2c057900" upper="0x7f2e2c0321d0" lower="0x7f2e2c034470"><txt ptr="0x7f2e2c034470" next="(nil)" prev="(nil)" upper="0x7f2e2c06fc08" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c0322b0" next="0x7f2e2c032390" prev="0x7f2e2c0321d0" upper="0x1af44a0" lower="0x7f2e2c057a80"><body ptr="0x7f2e2c057a80" next="0x7f2e2c06fcc8" prev="(nil)" upper="0x7f2e2c0322b0" lower="0x7f2e2c058ca8"><section ptr="0x7f2e2c058ca8" next="(nil)" prev="(nil)" upper="0x7f2e2c057a80" lower="0x7f2e2c039330" follow="0x7f2e2c058da0" precede="0x7f2e2c058bb0"><column ptr="0x7f2e2c039330" next="(nil)" prev="(nil)" upper="0x7f2e2c058ca8" lower="0x7f2e2c03b488"><body ptr="0x7f2e2c03b488" next="(nil)" prev="(nil)" upper="0x7f2e2c039330" lower="0x7f2e2c035588"><txt ptr="0x7f2e2c035588" next="0x7f2e2c0357a8" prev="(nil)" upper="0x7f2e2c03b488" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0357a8" next="0x7f2e2c0358b8" prev="0x7f2e2c035588" upper="0x7f2e2c03b488" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0358b8" next="0x7f2e2c0359c8" prev="0x7f2e2c0357a8" upper="0x7f2e2c03b488" lower="(nil)">Figure 33: Class Diagram of some of the classes in the server side.<Finish/></txt><txt ptr="0x7f2e2c0359c8" next="0x7f2e2c035ad8" prev="0x7f2e2c0358b8" upper="0x7f2e2c03b488" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c035ad8" next="0x7f2e2c035be8" prev="0x7f2e2c0359c8" upper="0x7f2e2c03b488" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c035be8" next="0x7f2e2c035cf8" prev="0x7f2e2c035ad8" upper="0x7f2e2c03b488" lower="(nil)"><anchored><fly ptr="0x1b03220" next="(nil)" prev="(nil)" upper="(nil)" lower="0x1b035c0"><txt ptr="0x1b035c0" next="(nil)" prev="(nil)" upper="0x1b03220" lower="(nil)"/></fly></anchored><Finish/></txt><txt ptr="0x7f2e2c035cf8" next="0x7f2e2c035e08" prev="0x7f2e2c035be8" upper="0x7f2e2c03b488" lower="(nil)">The Figure 33 shows an overview of the object-oriented design classes and their relationships in the server side. These classes define the objects created dynamically in the system and their interactions. For instance, after receiving the user request, the controller_servlet object can instantiate any object algorithms (metrics, K-Core, PCP, BRW) depending on the request of the user. Then the object algorithm instantiate a Graph object and so on.<Finish/></txt><txt ptr="0x7f2e2c035e08" next="0x7f2e2c036040" prev="0x7f2e2c035cf8" upper="0x7f2e2c03b488" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c036040" next="0x7f2e2c036150" prev="0x7f2e2c035e08" upper="0x7f2e2c03b488" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c036150" next="0x7f2e2c036260" prev="0x7f2e2c036040" upper="0x7f2e2c03b488" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c036260" next="(nil)" prev="0x7f2e2c036150" upper="0x7f2e2c03b488" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06fcc8" next="(nil)" prev="0x7f2e2c057a80" upper="0x7f2e2c0322b0" lower="0x7f2e2c035698"><txt ptr="0x7f2e2c035698" next="(nil)" prev="(nil)" upper="0x7f2e2c06fcc8" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c032390" next="0x7f2e2c032470" prev="0x7f2e2c0322b0" upper="0x1af44a0" lower="0x7f2e2c057c00"><body ptr="0x7f2e2c057c00" next="0x7f2e2c06fd88" prev="(nil)" upper="0x7f2e2c032390" lower="0x7f2e2c058da0"><section ptr="0x7f2e2c058da0" next="(nil)" prev="(nil)" upper="0x7f2e2c057c00" lower="0x7f2e2c0393f8" follow="0x7f2e2c0623e8" precede="0x7f2e2c058ca8"><column ptr="0x7f2e2c0393f8" next="(nil)" prev="(nil)" upper="0x7f2e2c058da0" lower="0x7f2e2c03b608"><body ptr="0x7f2e2c03b608" next="(nil)" prev="(nil)" upper="0x7f2e2c0393f8" lower="0x7f2e2c036370"><txt ptr="0x7f2e2c036370" next="0x7f2e2c036590" prev="(nil)" upper="0x7f2e2c03b608" lower="(nil)">Appendix 3: External libraires<Finish/></txt><txt ptr="0x7f2e2c036590" next="0x7f2e2c0366a0" prev="0x7f2e2c036370" upper="0x7f2e2c03b608" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0366a0" next="0x7f2e2c0367b0" prev="0x7f2e2c036590" upper="0x7f2e2c03b608" lower="(nil)">JavaScript libraries:<Finish/></txt><txt ptr="0x7f2e2c0367b0" next="0x7f2e2c0368c0" prev="0x7f2e2c0366a0" upper="0x7f2e2c03b608" lower="(nil)">jQuery<Finish/></txt><txt ptr="0x7f2e2c0368c0" next="0x7f2e2c0369d0" prev="0x7f2e2c0367b0" upper="0x7f2e2c03b608" lower="(nil)">jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.<Finish/></txt><txt ptr="0x7f2e2c0369d0" next="0x7f2e2c036ae0" prev="0x7f2e2c0368c0" upper="0x7f2e2c03b608" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c036ae0" next="0x7f2e2c036bf0" prev="0x7f2e2c0369d0" upper="0x7f2e2c03b608" lower="(nil)">jQuery UI<Finish/></txt><txt ptr="0x7f2e2c036bf0" next="0x7f2e2c036d00" prev="0x7f2e2c036ae0" upper="0x7f2e2c03b608" lower="(nil)">jQuery UI is a curated set of user interface interactions, effects, widgets, and themes built on top of the jQuery javaScript Library.<Finish/></txt><txt ptr="0x7f2e2c036d00" next="0x7f2e2c036e10" prev="0x7f2e2c036bf0" upper="0x7f2e2c03b608" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c036e10" next="0x7f2e2c037048" prev="0x7f2e2c036d00" upper="0x7f2e2c03b608" lower="(nil)">Flot Attractive JavaScript plotting for jQuery<Finish/></txt><txt ptr="0x7f2e2c037048" next="0x7f2e2c037158" prev="0x7f2e2c036e10" upper="0x7f2e2c03b608" lower="(nil)">Flot is a pure JavaScript plotting library for jQuery, with a focus on simple usage, attractive looks and interactive features.<Finish/></txt><txt ptr="0x7f2e2c037158" next="0x7f2e2c037268" prev="0x7f2e2c037048" upper="0x7f2e2c03b608" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c037268" next="0x7f2e2c037378" prev="0x7f2e2c037158" upper="0x7f2e2c03b608" lower="(nil)">Cytoscape<Finish/></txt><txt ptr="0x7f2e2c037378" next="0x7f2e2c037488" prev="0x7f2e2c037268" upper="0x7f2e2c03b608" lower="(nil)">Cytoscape.js is an open-source graph theory library written in JavaScript. You can use Cytoscape.js for graph analysis and visualization.<Finish/></txt><txt ptr="0x7f2e2c037488" next="0x7f2e2c037598" prev="0x7f2e2c037378" upper="0x7f2e2c03b608" lower="(nil)">Cytoscape.js allows you to easily display and manipulate rich, interactive graphs. Because Cytoscape.js allows the user to interact with the graph and the library allows the client to hook into user events, Cytoscape.js is easily integrated into your webapp, especially since Cytoscape.js supports both desktop browsers, like Chrome, and mobile browsers, like on the iPad. Cytoscape.js includes all the gestures you would expect out-of-the-box, including pinch-to-zoom, box selection, panning, et cetera.<Finish/></txt><txt ptr="0x7f2e2c037598" next="0x7f2e2c0376a8" prev="0x7f2e2c037488" upper="0x7f2e2c03b608" lower="(nil)">Cytoscape.js also has graph analysis in mind: The library contains a slew of useful functions in graph theory. You can use Cytoscape.js headlessly on Node.js to do graph analysis in the terminal or on a web server.<Finish/></txt><txt ptr="0x7f2e2c0376a8" next="0x7f2e2c0377b8" prev="0x7f2e2c037598" upper="0x7f2e2c03b608" lower="(nil)">Arbor <Finish/></txt><txt ptr="0x7f2e2c0377b8" next="0x7f2e2c0378c8" prev="0x7f2e2c0376a8" upper="0x7f2e2c03b608" lower="(nil)">Arbor is a graph visualization library built with web workers and jQuery. Rather than trying to be an all-encompassing framework, arbor provides an efficient, force-directed layout algorithm plus abstractions for graph organization and screen refresh handling. It leaves the actual screen-drawing to you. This means you can use it with canvas, SVG, or even positioned HTML elements; whatever display approach is appropriate for your project and your performance needs. <Finish/></txt><txt ptr="0x7f2e2c0378c8" next="0x7f2e2c0379d8" prev="0x7f2e2c0377b8" upper="0x7f2e2c03b608" lower="(nil)">As a result, the code you write with it can be focused on the things that make your project unique – the graph data and your visual style – rather than spending time on the physics math that makes the layouts possible.<Finish/></txt><txt ptr="0x7f2e2c0379d8" next="0x7f2e2c037ae8" prev="0x7f2e2c0378c8" upper="0x7f2e2c03b608" lower="(nil)">Java Libraries:<Finish/></txt><txt ptr="0x7f2e2c037ae8" next="0x7f2e2c037bf8" prev="0x7f2e2c0379d8" upper="0x7f2e2c03b608" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c037bf8" next="0x7f2e2c037d08" prev="0x7f2e2c037ae8" upper="0x7f2e2c03b608" lower="(nil)">flexigraph (Java Graph Algorithm library)<Finish/></txt><txt ptr="0x7f2e2c037d08" next="0x7f2e2c037e18" prev="0x7f2e2c037bf8" upper="0x7f2e2c03b608" lower="(nil)">A Java graph algorithms library. This is the old description of the project, briefly touching in few design aspects of it. <Finish/></txt><txt ptr="0x7f2e2c037e18" next="0x7f2e2c038050" prev="0x7f2e2c037d08" upper="0x7f2e2c03b608" lower="(nil)">Flexigraph is a general framework for graphs. It offers various advantages over most graph frameworks out there (for example, JDSL, JUNG), as for example: <Finish/></txt><txt ptr="0x7f2e2c038050" next="0x7f2e2c038160" prev="0x7f2e2c037e18" upper="0x7f2e2c03b608" lower="(nil)">A much neater API (you will end up writing about half code you would need to write for JDSL to express the same thing). <Finish/></txt><txt ptr="0x7f2e2c038160" next="(nil)" prev="0x7f2e2c038050" upper="0x7f2e2c03b608" lower="(nil)" follow="0x7f2e2409ad40">Node and edge instances can be shared among many graphs (in JDSL, the same thing would require to maintain ugly mappings from a logical &quot;identity&quot; to the nodes/edges of any graph, while in JUNG, well, that is just slow). <Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06fd88" next="(nil)" prev="0x7f2e2c057c00" upper="0x7f2e2c032390" lower="0x7f2e2c036480"><txt ptr="0x7f2e2c036480" next="(nil)" prev="(nil)" upper="0x7f2e2c06fd88" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c032470" next="0x7f2e2c032550" prev="0x7f2e2c032390" upper="0x1af44a0" lower="0x7f2e2c057d80"><body ptr="0x7f2e2c057d80" next="0x7f2e2c06fe48" prev="(nil)" upper="0x7f2e2c032470" lower="0x7f2e2c0623e8"><section ptr="0x7f2e2c0623e8" next="(nil)" prev="(nil)" upper="0x7f2e2c057d80" lower="0x7f2e2c087ed8" follow="0x7f2e2409d018" precede="0x7f2e2c058da0"><column ptr="0x7f2e2c087ed8" next="(nil)" prev="(nil)" upper="0x7f2e2c0623e8" lower="0x7f2e2c076e48"><body ptr="0x7f2e2c076e48" next="(nil)" prev="(nil)" upper="0x7f2e2c087ed8" lower="0x7f2e2409ad40"><txt ptr="0x7f2e2409ad40" next="0x7f2e2c038490" prev="(nil)" upper="0x7f2e2c076e48" lower="(nil)" precede="0x7f2e2c038160">Node and edge instances can be shared among many graphs (in JDSL, the same thing would require to maintain ugly mappings from a logical &quot;identity&quot; to the nodes/edges of any graph, while in JUNG, well, that is just slow). <Finish/></txt><txt ptr="0x7f2e2c038490" next="0x7f2e2c0385a0" prev="0x7f2e2409ad40" upper="0x7f2e2c076e48" lower="(nil)">Thorough graph event support. For example, in Flexigraph offers a DegreeSorter class which, well, maintains the nodes of a graph sorted on their degree (so you can e.g. process nodes starting with those with smallest degree, etc). If this was implemented in JDSL, one would have to remember every time that the graph is updated, to also re-run the bucket sort. In Flexigraph, you create the DegreeSorter on the graph, and forget! Due to the event model, the graph can be changed and the DegreeSorter remains always consistent with the given graph, with no further ado. <Finish/></txt><txt ptr="0x7f2e2c0385a0" next="0x7f2e2c0386b0" prev="0x7f2e2c038490" upper="0x7f2e2c076e48" lower="(nil)">A better node/edge decoration framework. In other graph frameworks, one can associate arbitrary data to nodes/edges by &quot;put(key, value)&quot; or similar calls. And it is great: it is much faster than having to create a big HashMap containing as keys all the nodes of a graph, for example (try it). So, if one is developing algorithms that operate on a graph and generate data (a simple DFS implementation for instance), he should associate data to nodes/edges this way. All fine and well, except for this being the ideal recipy for creating memory leaks. Because all you, the algorithm implementor, can do is to write a public &quot;cleanup&quot; method to manually erase your algorithm-specific data from nodes/edges (as you don't know when the algorithm's data are not needed any more), and rely on the users remembering to call that method (or else, a memory leak - and good luck debugging that). And worse yet, this depends on the assumption that when the &quot;cleanup&quot; method is called, the graph will be in the state it was when it was decorated with data - cleanup will not be performed on nodes/edges that were accidentally removed before the &quot;cleanup&quot; method. <Finish/></txt><txt ptr="0x7f2e2c0386b0" next="0x7f2e2c0387c0" prev="0x7f2e2c0385a0" upper="0x7f2e2c076e48" lower="(nil)">This is an example of this problem - the DFS implementation of JDSL (notice the cleanup method), or a BFS algorithm of JUNG (notice the removeDecorations method). In Flexigraph, you can either associate strongly data in nodes/edges, like the other frameworks, or associate data weakly. That is, if the key will be garbage-collected (this is possible as it is not referenced strongly in the map inside node/edge), the value will also be automatically cleared. So it is possible to write algorithms that take advantage of node/edge decorations, in a memory-safe way, and with one less thing to remember for all users. <Finish/></txt><txt ptr="0x7f2e2c0387c0" next="0x7f2e2c0388d0" prev="0x7f2e2c0386b0" upper="0x7f2e2c076e48" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0388d0" next="0x7f2e2c0389e0" prev="0x7f2e2c0387c0" upper="0x7f2e2c076e48" lower="(nil)">(Extract Source from: https://code.google.com/p/flexigraph/)<Finish/></txt><txt ptr="0x7f2e2c0389e0" next="0x7f2e2c038af0" prev="0x7f2e2c0388d0" upper="0x7f2e2c076e48" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c038af0" next="0x7f2e2c038c00" prev="0x7f2e2c0389e0" upper="0x7f2e2c076e48" lower="(nil)">JSON-simple<Finish/></txt><txt ptr="0x7f2e2c038c00" next="0x7f2e2c038d10" prev="0x7f2e2c038af0" upper="0x7f2e2c076e48" lower="(nil)">JSON.simple is a simple Java toolkit for JSON objects. You can use JSON.simple to encode or decode JSON text.  (source: http://code.google.com/p/json-simple/)<Finish/></txt><txt ptr="0x7f2e2c038d10" next="0x7f2e2c038e20" prev="0x7f2e2c038c00" upper="0x7f2e2c076e48" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c038e20" next="0x7f2e2c03a058" prev="0x7f2e2c038d10" upper="0x7f2e2c076e48" lower="(nil)">Tomcat7 Server<Finish/></txt><txt ptr="0x7f2e2c03a058" next="0x7f2e2c03a168" prev="0x7f2e2c038e20" upper="0x7f2e2c076e48" lower="(nil)">Apache Tomcat is one of the most popular servlet container, which is available free from the Apache Group at http://tomcat.apache.org. Tomcat can run as a stand-alone servlet container or as part of a web server. There are also several application servers that include servlet containers. For the demonstration of the web application and to set-up multiple clients, I used the GlassFish application server. It is distributed as part of Java EE and included in the NetBeans Integrated Development Environment. <Finish/></txt><txt ptr="0x7f2e2c03a168" next="0x7f2e2c03a278" prev="0x7f2e2c03a058" upper="0x7f2e2c076e48" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03a278" next="0x7f2e2c03a388" prev="0x7f2e2c03a168" upper="0x7f2e2c076e48" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03a388" next="0x7f2e2c03a498" prev="0x7f2e2c03a278" upper="0x7f2e2c076e48" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03a498" next="0x7f2e2c03a5a8" prev="0x7f2e2c03a388" upper="0x7f2e2c076e48" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03a5a8" next="0x7f2e2c03a6b8" prev="0x7f2e2c03a498" upper="0x7f2e2c076e48" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03a6b8" next="0x7f2e2c03a7c8" prev="0x7f2e2c03a5a8" upper="0x7f2e2c076e48" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03a7c8" next="(nil)" prev="0x7f2e2c03a6b8" upper="0x7f2e2c076e48" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06fe48" next="(nil)" prev="0x7f2e2c057d80" upper="0x7f2e2c032470" lower="0x7f2e2c038380"><txt ptr="0x7f2e2c038380" next="(nil)" prev="(nil)" upper="0x7f2e2c06fe48" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c032550" next="0x7f2e2c032630" prev="0x7f2e2c032470" upper="0x1af44a0" lower="0x7f2e2c057f00"><body ptr="0x7f2e2c057f00" next="0x7f2e2c06ff08" prev="(nil)" upper="0x7f2e2c032550" lower="0x7f2e2409d018"><section ptr="0x7f2e2409d018" next="(nil)" prev="(nil)" upper="0x7f2e2c057f00" lower="0x7f2e2c039588" follow="0x7f2e2409d110" precede="0x7f2e2c0623e8"><column ptr="0x7f2e2c039588" next="(nil)" prev="(nil)" upper="0x7f2e2409d018" lower="0x7f2e2c03b908"><body ptr="0x7f2e2c03b908" next="(nil)" prev="(nil)" upper="0x7f2e2c039588" lower="0x7f2e2c03a8d8"><txt ptr="0x7f2e2c03a8d8" next="0x7f2e2c03aaf8" prev="(nil)" upper="0x7f2e2c03b908" lower="(nil)">References<Finish/></txt><txt ptr="0x7f2e2c03aaf8" next="0x7f2e2c03ac08" prev="0x7f2e2c03a8d8" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03ac08" next="0x7f2e2c03ad18" prev="0x7f2e2c03aaf8" upper="0x7f2e2c03b908" lower="(nil)">[1] Identifying Prominent Actors in Online<Finish/></txt><txt ptr="0x7f2e2c03ad18" next="0x7f2e2c03ae28" prev="0x7f2e2c03ac08" upper="0x7f2e2c03b908" lower="(nil)">Social Networks using Biased Random Walks, Frank W. Takes, Walter A. Kosters Leiden Institute of Advanced Computer Science, Leiden University, The Netherlands, (2011).<Finish/></txt><txt ptr="0x7f2e2c03ae28" next="0x7f2e2c03c060" prev="0x7f2e2c03ad18" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03c060" next="0x7f2e2c03c170" prev="0x7f2e2c03ae28" upper="0x7f2e2c03b908" lower="(nil)">[2] k-core decomposition: a tool for the visualization of large scale networks, <Finish/></txt><txt ptr="0x7f2e2c03c170" next="0x7f2e2c03c280" prev="0x7f2e2c03c060" upper="0x7f2e2c03b908" lower="(nil)">Ignacio Alvarez-Hamelin, Luca Dall'Asta, Alain Barrat and Alessandro Vespignani<Finish/></txt><txt ptr="0x7f2e2c03c280" next="0x7f2e2c03c390" prev="0x7f2e2c03c170" upper="0x7f2e2c03b908" lower="(nil)">South-Paris University, France, Indiana University, USA.<Finish/></txt><txt ptr="0x7f2e2c03c390" next="0x7f2e2c03c4a0" prev="0x7f2e2c03c280" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03c4a0" next="0x7f2e2c03c5b0" prev="0x7f2e2c03c390" upper="0x7f2e2c03b908" lower="(nil)">[3] Network Structure and minimum degree, Stephen B. Seidman, Social Networks 5 (1983) 269-287, George Mason University, North-Holland.<Finish/></txt><txt ptr="0x7f2e2c03c5b0" next="0x7f2e2c03c6c0" prev="0x7f2e2c03c4a0" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03c6c0" next="0x7f2e2c03c7d0" prev="0x7f2e2c03c5b0" upper="0x7f2e2c03b908" lower="(nil)">[4] Profiling Core-Periphery network structure by random walkers: Fabio Della Rossa, Fabio Dercole, and Carlo Piccardi. Scientific Report 3, Article number: 1467, published 19 March 2013.<Finish/></txt><txt ptr="0x7f2e2c03c7d0" next="0x7f2e2c03c8e0" prev="0x7f2e2c03c6c0" upper="0x7f2e2c03b908" lower="(nil)">http://www.nature.com/srep/2013/130319/srep01467/full/srep01467.html<Finish/></txt><txt ptr="0x7f2e2c03c8e0" next="0x7f2e2c03c9f0" prev="0x7f2e2c03c7d0" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03c9f0" next="0x7f2e2c03cb00" prev="0x7f2e2c03c8e0" upper="0x7f2e2c03b908" lower="(nil)">[5] The map equation: M. Rosvall, D. Axelsson, and C.T Bergstrom<Finish/></txt><txt ptr="0x7f2e2c03cb00" next="0x7f2e2c03cc10" prev="0x7f2e2c03c9f0" upper="0x7f2e2c03b908" lower="(nil)">Regular Article. The European Physical Journal Special Topics 178, 13-23 (2009)<Finish/></txt><txt ptr="0x7f2e2c03cc10" next="0x7f2e2c03cd20" prev="0x7f2e2c03cb00" upper="0x7f2e2c03b908" lower="(nil)">Department of Physics, Umea University, 9001 87 Umea Sweden<Finish/></txt><txt ptr="0x7f2e2c03cd20" next="0x7f2e2c03ce30" prev="0x7f2e2c03cc10" upper="0x7f2e2c03b908" lower="(nil)">Department of Biology, University of Washington, Seattle, Wa 98195-1800, USA.<Finish/></txt><txt ptr="0x7f2e2c03ce30" next="0x7f2e2c03d068" prev="0x7f2e2c03cd20" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03d068" next="0x7f2e2c03d178" prev="0x7f2e2c03ce30" upper="0x7f2e2c03b908" lower="(nil)">[6] An Information Flow Model for Conflict and Fission in Samll Groups, Wayne W. Zachary, Journal of Anthropological Research, vol. 33, No. 4 (Winter, 1977), pp. 452-473, University of New Mexico.<Finish/></txt><txt ptr="0x7f2e2c03d178" next="0x7f2e2c03d288" prev="0x7f2e2c03d068" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03d288" next="0x7f2e2c03d398" prev="0x7f2e2c03d178" upper="0x7f2e2c03b908" lower="(nil)">[7] Identifying the role that individual animals play in their social network, D. Lusseau, K. Schneider, O. J. Boisseau, P. Haase, E. Slooten, and S. M. Dawson, The bottlenose dolphin community of Doubtful Sound features a large proportion of long-lasting associations, Behavioral Ecology and Sociobiology 54, 396-405 (2003).<Finish/></txt><txt ptr="0x7f2e2c03d398" next="0x7f2e2c03d4a8" prev="0x7f2e2c03d288" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03d4a8" next="0x7f2e2c03d5b8" prev="0x7f2e2c03d398" upper="0x7f2e2c03b908" lower="(nil)">[8] Thurman B. (1979). In the office: Networks and coalitions. Social Networks, 2, 47-63, Syracuse University.<Finish/></txt><txt ptr="0x7f2e2c03d5b8" next="0x7f2e2c03d6c8" prev="0x7f2e2c03d4a8" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03d6c8" next="0x7f2e2c03d7d8" prev="0x7f2e2c03d5b8" upper="0x7f2e2c03b908" lower="(nil)">[9] Network of American football games between Division IA colleges during regular season Fall 2000. M. Girvan and M. E. J. Newman, Proc. Natl. Acad. Sci. USA 99, 7821-7826 (2002).<Finish/></txt><txt ptr="0x7f2e2c03d7d8" next="0x7f2e2c03d8e8" prev="0x7f2e2c03d6c8" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03d8e8" next="0x7f2e2c03d9f8" prev="0x7f2e2c03d7d8" upper="0x7f2e2c03b908" lower="(nil)">[10] U. Brandes. A Faster Algorithm for Betweennes Centrality. Journal of Mathematical Sociology, 25(2):163-177, 2001.<Finish/></txt><txt ptr="0x7f2e2c03d9f8" next="0x7f2e2c03db08" prev="0x7f2e2c03d8e8" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03db08" next="0x7f2e2c03dc18" prev="0x7f2e2c03d9f8" upper="0x7f2e2c03b908" lower="(nil)">[11] L. C. Freeman, Centrality in social networks: Conceptual clarification, Social Networks 1 (3) (1978) 215–239.<Finish/></txt><txt ptr="0x7f2e2c03dc18" next="0x7f2e2c03dd28" prev="0x7f2e2c03db08" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03dd28" next="0x7f2e2c03de38" prev="0x7f2e2c03dc18" upper="0x7f2e2c03b908" lower="(nil)">[12] Large Scale Structure and Dynamics of Complex Networks From Information Technology to *Finance and Natural Science Edited by: Guido Caldarelli (University of Rome “La *Sapienze”, Italy), Alessandro Vespignani (Indiana University, USA)<Finish/></txt><txt ptr="0x7f2e2c03de38" next="0x7f2e2c03e070" prev="0x7f2e2c03dd28" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03e070" next="0x7f2e2c03e180" prev="0x7f2e2c03de38" upper="0x7f2e2c03b908" lower="(nil)">[13] S. Wasserman and K. Faust. Social Network Analysis: Methods and Applications. Cambridge University Press, 1994.<Finish/></txt><txt ptr="0x7f2e2c03e180" next="(nil)" prev="0x7f2e2c03e070" upper="0x7f2e2c03b908" lower="(nil)"><Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c06ff08" next="(nil)" prev="0x7f2e2c057f00" upper="0x7f2e2c032550" lower="0x7f2e2c03a9e8"><txt ptr="0x7f2e2c03a9e8" next="(nil)" prev="(nil)" upper="0x7f2e2c06ff08" lower="(nil)">*<Finish/></txt></footer></page><page ptr="0x7f2e2c032630" next="(nil)" prev="0x7f2e2c032550" upper="0x1af44a0" lower="0x7f2e2c03b0c8"><body ptr="0x7f2e2c03b0c8" next="0x7f2e2c03f010" prev="(nil)" upper="0x7f2e2c032630" lower="0x7f2e2409d110"><section ptr="0x7f2e2409d110" next="(nil)" prev="(nil)" upper="0x7f2e2c03b0c8" lower="0x7f2e2c039650" precede="0x7f2e2409d018"><column ptr="0x7f2e2c039650" next="(nil)" prev="(nil)" upper="0x7f2e2409d110" lower="0x7f2e2c03ba88"><body ptr="0x7f2e2c03ba88" next="(nil)" prev="(nil)" upper="0x7f2e2c039650" lower="0x7f2e2c03e290"><txt ptr="0x7f2e2c03e290" next="0x7f2e2c03e4b0" prev="(nil)" upper="0x7f2e2c03ba88" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03e4b0" next="0x7f2e2c03e5c0" prev="0x7f2e2c03e290" upper="0x7f2e2c03ba88" lower="(nil)">[14] A Beginner’s Guide to Graph Theory, ISBN: 978-0-8176-4484-0 , W. D. Wallis, Birkhauser *(2000)<Finish/></txt><txt ptr="0x7f2e2c03e5c0" next="0x7f2e2c03e6d0" prev="0x7f2e2c03e4b0" upper="0x7f2e2c03ba88" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03e6d0" next="0x7f2e2c03e7e0" prev="0x7f2e2c03e5c0" upper="0x7f2e2c03ba88" lower="(nil)">[15] Programming the Word Wide Web, Sixth Edition, Pearson, Robert W. Sebesta, ISBN:978-0-13-705383-4, 2011.<Finish/></txt><txt ptr="0x7f2e2c03e7e0" next="0x7f2e2c03e8f0" prev="0x7f2e2c03e6d0" upper="0x7f2e2c03ba88" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03e8f0" next="0x7f2e2c03ea00" prev="0x7f2e2c03e7e0" upper="0x7f2e2c03ba88" lower="(nil)">[16] JavaScript: The Definitive Guide, O'Reilly Media; 5 edition (27 Aug 2006), ISBN: 978-0596101992<Finish/></txt><txt ptr="0x7f2e2c03ea00" next="0x7f2e2c03eb10" prev="0x7f2e2c03e8f0" upper="0x7f2e2c03ba88" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03eb10" next="0x7f2e2c03ec20" prev="0x7f2e2c03ea00" upper="0x7f2e2c03ba88" lower="(nil)">[17] Practical JavaScript, DOM Scripting, and Ajax Project, Springer Verlag GmbH (1 April 2007), ISBN: 978-1590598160.<Finish/></txt><txt ptr="0x7f2e2c03ec20" next="0x7f2e2c03ed30" prev="0x7f2e2c03eb10" upper="0x7f2e2c03ba88" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c03ed30" next="0x7f2e2c03ee40" prev="0x7f2e2c03ec20" upper="0x7f2e2c03ba88" lower="(nil)">[18] Murach's JavaScript and jQuery, Mike Murach &amp; Associates Inc. (16 Jan 2013), ISBN: 978-1890774707.<Finish/></txt><txt ptr="0x7f2e2c03ee40" next="0x7f2e2c020078" prev="0x7f2e2c03ed30" upper="0x7f2e2c03ba88" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c020078" next="0x7f2e2c020188" prev="0x7f2e2c03ee40" upper="0x7f2e2c03ba88" lower="(nil)">[19] Software Engineering 9, International Edition, Sommerville, ISBN:978-0-13-705346-9, 2011.<Finish/></txt><txt ptr="0x7f2e2c020188" next="0x7f2e2c020298" prev="0x7f2e2c020078" upper="0x7f2e2c03ba88" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c020298" next="0x7f2e2c0203a8" prev="0x7f2e2c020188" upper="0x7f2e2c03ba88" lower="(nil)">[20] Learn Java for Web Development: Modern Java Web Development, Apress, Vishal Layka, ISBN: 978-1430259831<Finish/></txt><txt ptr="0x7f2e2c0203a8" next="0x7f2e2c0204b8" prev="0x7f2e2c020298" upper="0x7f2e2c03ba88" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0204b8" next="0x7f2e2c0205c8" prev="0x7f2e2c0203a8" upper="0x7f2e2c03ba88" lower="(nil)">[21] D. Edler and M. Rosvall (2013), The MapEquation software package, available online at*http://www.mapequation.org<Finish/></txt><txt ptr="0x7f2e2c0205c8" next="0x7f2e2c0206d8" prev="0x7f2e2c0204b8" upper="0x7f2e2c03ba88" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0206d8" next="0x7f2e2c0207e8" prev="0x7f2e2c0205c8" upper="0x7f2e2c03ba88" lower="(nil)">[22] http://www.cytoscape.org, cytoscape.js, JavaScript library for network visualization, (2014).<Finish/></txt><txt ptr="0x7f2e2c0207e8" next="0x7f2e2c0208f8" prev="0x7f2e2c0206d8" upper="0x7f2e2c03ba88" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c0208f8" next="0x7f2e2c020a08" prev="0x7f2e2c0207e8" upper="0x7f2e2c03ba88" lower="(nil)">[23] flexigraph, a Java graph algorithms library, http://code.google.com/p/flexigraph/ <Finish/></txt><txt ptr="0x7f2e2c020a08" next="0x7f2e2c020b18" prev="0x7f2e2c0208f8" upper="0x7f2e2c03ba88" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c020b18" next="0x7f2e2c020c28" prev="0x7f2e2c020a08" upper="0x7f2e2c03ba88" lower="(nil)">[24] Flot, Attractive JavaScript plotting for jQuery, http://www.flotcharts.org/ <Finish/></txt><txt ptr="0x7f2e2c020c28" next="0x7f2e2c020d38" prev="0x7f2e2c020b18" upper="0x7f2e2c03ba88" lower="(nil)"><Finish/></txt><txt ptr="0x7f2e2c020d38" next="(nil)" prev="0x7f2e2c020c28" upper="0x7f2e2c03ba88" lower="(nil)">[25] Ranking the Importance of Nodes of Complex Networks by the Equivalence Classes Approach, Bojin Zhenga,b,c , Deyi Lic , Guisheng Chenc , Wenhua Dua , Jianmin Wanga, College of Computer Science, South-Central University for Nationalities, Wuhan 430074, China, State Key Laboratory of Networking and Switching Technology, Beijing University of Posts and Telecommunications, Beijing 100876, China, School of Software, Tsinghua University, Beijing 100084,China<Finish/></txt></body></column></section></body><footer ptr="0x7f2e2c03f010" next="(nil)" prev="0x7f2e2c03b0c8" upper="0x7f2e2c032630" lower="0x7f2e2c03e3a0"><txt ptr="0x7f2e2c03e3a0" next="(nil)" prev="(nil)" upper="0x7f2e2c03f010" lower="(nil)">*<Finish/></txt></footer></page></root>
